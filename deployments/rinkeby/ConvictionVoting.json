{
  "address": "0x4c96307326140896dAaB5Dec37576D98A8d7F712",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "stableTokenOracle",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "hasInitialized",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "proposalCounter",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "fundsManager",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "executeProposal",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "D",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ABSTAIN_PROPOSAL_ID",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "stakeAllToProposal",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_agreement",
          "type": "address"
        }
      ],
      "name": "setAgreement",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_script",
          "type": "bytes"
        }
      ],
      "name": "getEVMScriptExecutor",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRecoveryVault",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MAX_STAKED_PROPOSALS",
      "outputs": [
        {
          "name": "",
          "type": "uint64"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_stableTokenOracle",
          "type": "address"
        },
        {
          "name": "_stableToken",
          "type": "address"
        }
      ],
      "name": "setStableTokenOracleSettings",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "onTransfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_hookId",
          "type": "uint256"
        },
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "onRegisterAsHook",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "requestToken",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_title",
          "type": "string"
        },
        {
          "name": "_link",
          "type": "bytes"
        },
        {
          "name": "_requestedAmount",
          "type": "uint256"
        },
        {
          "name": "_stableRequestAmount",
          "type": "bool"
        },
        {
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "addProposal",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "UPDATE_SETTINGS_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "withdrawAllFromProposal",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "stakeToken",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decay",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestedAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateThreshold",
      "outputs": [
        {
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_stakeToken",
          "type": "address"
        },
        {
          "name": "_requestToken",
          "type": "address"
        },
        {
          "name": "_stableToken",
          "type": "address"
        },
        {
          "name": "_stableTokenOracle",
          "type": "address"
        },
        {
          "name": "_fundsManager",
          "type": "address"
        },
        {
          "name": "_decay",
          "type": "uint256"
        },
        {
          "name": "_maxRatio",
          "type": "uint256"
        },
        {
          "name": "_weight",
          "type": "uint256"
        },
        {
          "name": "_minThresholdStakePercentage",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_proposalId",
          "type": "uint256"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromProposal",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "canChallenge",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "getVoterStakedProposals",
      "outputs": [
        {
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxRatio",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "canClose",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputableActionId",
          "type": "uint256"
        }
      ],
      "name": "onDisputableActionAllowed",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "token",
          "type": "address"
        }
      ],
      "name": "allowRecoverability",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputableActionId",
          "type": "uint256"
        },
        {
          "name": "_challengeId",
          "type": "uint256"
        },
        {
          "name": "_challenger",
          "type": "address"
        }
      ],
      "name": "onDisputableActionChallenged",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "appId",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "contractPaused",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getInitializationBlock",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CHALLENGE_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_fundsManager",
          "type": "address"
        }
      ],
      "name": "setFundsManager",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "transferToVault",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "withdrawFromInactiveProposals",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_sender",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        },
        {
          "name": "_params",
          "type": "uint256[]"
        }
      ],
      "name": "canPerform",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "weight",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEVMScriptRegistry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "stableToken",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "getTokenManager",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputableActionId",
          "type": "uint256"
        }
      ],
      "name": "onDisputableActionVoided",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getAgreement",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_hookId",
          "type": "uint256"
        },
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "onRevokeAsHook",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_decay",
          "type": "uint256"
        },
        {
          "name": "_maxRatio",
          "type": "uint256"
        },
        {
          "name": "_weight",
          "type": "uint256"
        },
        {
          "name": "_minThresholdStakePercentage",
          "type": "uint256"
        }
      ],
      "name": "setConvictionCalculationSettings",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "name": "requestedAmount",
          "type": "uint256"
        },
        {
          "name": "stableRequestAmount",
          "type": "bool"
        },
        {
          "name": "beneficiary",
          "type": "address"
        },
        {
          "name": "stakedTokens",
          "type": "uint256"
        },
        {
          "name": "convictionLast",
          "type": "uint256"
        },
        {
          "name": "blockLast",
          "type": "uint64"
        },
        {
          "name": "agreementActionId",
          "type": "uint256"
        },
        {
          "name": "proposalStatus",
          "type": "uint8"
        },
        {
          "name": "submitter",
          "type": "address"
        },
        {
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_title",
          "type": "string"
        },
        {
          "name": "_link",
          "type": "bytes"
        }
      ],
      "name": "addSignalingProposal",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "SET_AGREEMENT_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "kernel",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_holder",
          "type": "address"
        },
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "onApprove",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_timePassed",
          "type": "uint64"
        },
        {
          "name": "_lastConv",
          "type": "uint256"
        },
        {
          "name": "_oldAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateConviction",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minThresholdStakePercentage",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "PAUSE_CONTRACT_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ONE_HUNDRED_PERCENT",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "getTotalVoterStake",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isPetrified",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "cancelProposal",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_proposalId",
          "type": "uint256"
        },
        {
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "getProposalVoterStake",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_pauseEnabled",
          "type": "bool"
        }
      ],
      "name": "pauseContract",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CREATE_PROPOSALS_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CANCEL_PROPOSALS_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputableActionId",
          "type": "uint256"
        }
      ],
      "name": "onDisputableActionRejected",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_proposalId",
          "type": "uint256"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeToProposal",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "pauseEnabled",
          "type": "bool"
        }
      ],
      "name": "ContractPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "stableTokenOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "stableToken",
          "type": "address"
        }
      ],
      "name": "OracleSettingsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "fundsManager",
          "type": "address"
        }
      ],
      "name": "FundsManagerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "decay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "maxRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "minThresholdStakePercentage",
          "type": "uint256"
        }
      ],
      "name": "ConvictionSettingsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "entity",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "actionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "name": "link",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "stable",
          "type": "bool"
        },
        {
          "indexed": false,
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "ProposalAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "entity",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "tokensStaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "totalTokensStaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "conviction",
          "type": "uint256"
        }
      ],
      "name": "StakeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "entity",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "tokensStaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "totalTokensStaked",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "conviction",
          "type": "uint256"
        }
      ],
      "name": "StakeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "conviction",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "ProposalPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalResumed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "script",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "input",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "ScriptResult",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoverToVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "agreement",
          "type": "address"
        }
      ],
      "name": "AgreementSet",
      "type": "event"
    }
  ],
  "transactionHash": "0x8ebf29c426430b73272142d59b5575861d82071d8275820216a7d5405c613986",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xdf456B614fE9FF1C7c0B380330Da29C96d40FB02",
    "contractAddress": null,
    "transactionIndex": 45,
    "gasUsed": "5205879",
    "logsBloom": "0x
    "blockHash": "0x0a02463597f05befb7abb58b66d55b9bb7bc4898a1360e9c349d1923bf88f3e8",
    "transactionHash": "0x8ebf29c426430b73272142d59b5575861d82071d8275820216a7d5405c613986",
    "logs": [],
    "blockNumber": 9585762,
    "cumulativeGasUsed": "18470916",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8001c268595384333a2366f66d705cf4",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stableTokenOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposalCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"D\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ABSTAIN_PROPOSAL_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"stakeAllToProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agreement\",\"type\":\"address\"}],\"name\":\"setAgreement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_STAKED_PROPOSALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stableTokenOracle\",\"type\":\"address\"},{\"name\":\"_stableToken\",\"type\":\"address\"}],\"name\":\"setStableTokenOracleSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hookId\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"onRegisterAsHook\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_link\",\"type\":\"bytes\"},{\"name\":\"_requestedAmount\",\"type\":\"uint256\"},{\"name\":\"_stableRequestAmount\",\"type\":\"bool\"},{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UPDATE_SETTINGS_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"withdrawAllFromProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestedAmount\",\"type\":\"uint256\"}],\"name\":\"calculateThreshold\",\"outputs\":[{\"name\":\"_threshold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stakeToken\",\"type\":\"address\"},{\"name\":\"_requestToken\",\"type\":\"address\"},{\"name\":\"_stableToken\",\"type\":\"address\"},{\"name\":\"_stableTokenOracle\",\"type\":\"address\"},{\"name\":\"_fundsManager\",\"type\":\"address\"},{\"name\":\"_decay\",\"type\":\"uint256\"},{\"name\":\"_maxRatio\",\"type\":\"uint256\"},{\"name\":\"_weight\",\"type\":\"uint256\"},{\"name\":\"_minThresholdStakePercentage\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"canChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getVoterStakedProposals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"canClose\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputableActionId\",\"type\":\"uint256\"}],\"name\":\"onDisputableActionAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputableActionId\",\"type\":\"uint256\"},{\"name\":\"_challengeId\",\"type\":\"uint256\"},{\"name\":\"_challenger\",\"type\":\"address\"}],\"name\":\"onDisputableActionChallenged\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHALLENGE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundsManager\",\"type\":\"address\"}],\"name\":\"setFundsManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFromInactiveProposals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stableToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputableActionId\",\"type\":\"uint256\"}],\"name\":\"onDisputableActionVoided\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAgreement\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hookId\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"onRevokeAsHook\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_decay\",\"type\":\"uint256\"},{\"name\":\"_maxRatio\",\"type\":\"uint256\"},{\"name\":\"_weight\",\"type\":\"uint256\"},{\"name\":\"_minThresholdStakePercentage\",\"type\":\"uint256\"}],\"name\":\"setConvictionCalculationSettings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"name\":\"requestedAmount\",\"type\":\"uint256\"},{\"name\":\"stableRequestAmount\",\"type\":\"bool\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"stakedTokens\",\"type\":\"uint256\"},{\"name\":\"convictionLast\",\"type\":\"uint256\"},{\"name\":\"blockLast\",\"type\":\"uint64\"},{\"name\":\"agreementActionId\",\"type\":\"uint256\"},{\"name\":\"proposalStatus\",\"type\":\"uint8\"},{\"name\":\"submitter\",\"type\":\"address\"},{\"name\":\"threshold\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_link\",\"type\":\"bytes\"}],\"name\":\"addSignalingProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SET_AGREEMENT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timePassed\",\"type\":\"uint64\"},{\"name\":\"_lastConv\",\"type\":\"uint256\"},{\"name\":\"_oldAmount\",\"type\":\"uint256\"}],\"name\":\"calculateConviction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minThresholdStakePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PAUSE_CONTRACT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getTotalVoterStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getProposalVoterStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pauseEnabled\",\"type\":\"bool\"}],\"name\":\"pauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CREATE_PROPOSALS_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CANCEL_PROPOSALS_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputableActionId\",\"type\":\"uint256\"}],\"name\":\"onDisputableActionRejected\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeToProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pauseEnabled\",\"type\":\"bool\"}],\"name\":\"ContractPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stableTokenOracle\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stableToken\",\"type\":\"address\"}],\"name\":\"OracleSettingsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fundsManager\",\"type\":\"address\"}],\"name\":\"FundsManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"decay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minThresholdStakePercentage\",\"type\":\"uint256\"}],\"name\":\"ConvictionSettingsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"link\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stable\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTokensStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"conviction\",\"type\":\"uint256\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTokensStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"conviction\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"conviction\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"ProposalPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"agreement\",\"type\":\"address\"}],\"name\":\"AgreementSet\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"addProposal(string,bytes,uint256,bool,address)\":{\"params\":{\"_beneficiary\":\"Address that will receive payment\",\"_link\":\"IPFS or HTTP link with proposal's description\",\"_requestedAmount\":\"Tokens requested\",\"_stableRequestAmount\":\"Whether the requested amount is in the request token or the stable token, converted to the request token upon execution\",\"_title\":\"Title of the proposal\"}},\"addSignalingProposal(string,bytes)\":{\"params\":{\"_link\":\"IPFS or HTTP link with proposal's description\",\"_title\":\"Title of the proposal\"}},\"allowRecoverability(address)\":{\"details\":\"By default deriving from AragonApp makes it recoverable\",\"params\":{\"token\":\"Token address that would be recovered\"},\"return\":\"bool whether the app allows the recovery\"},\"calculateConviction(uint64,uint256,uint256)\":{\"details\":\"Conviction formula: a^t * y(0) + x * (1 - a^t) / (1 - a) Solidity implementation: y = (2^128 * a^t * y0 + x * D * (2^128 - 2^128 * a^t) / (D - aD) + 2^127) / 2^128\",\"params\":{\"_lastConv\":\"Last conviction record\",\"_oldAmount\":\"Amount of tokens staked until now\",\"_timePassed\":\"Number of blocks since last conviction record\"},\"return\":\"Current conviction\"},\"calculateThreshold(uint256)\":{\"details\":\"Formula: \\u03c1 * totalStaked / (1 - a) / (\\u03b2 - requestedAmount / total)**2 For the Solidity implementation we amplify \\u03c1 and \\u03b2 and simplify the formula: weight = \\u03c1 * D maxRatio = \\u03b2 * D decay = a * D threshold = weight * totalStaked * D ** 2 * funds ** 2 / (D - decay) / (maxRatio * funds - requestedAmount * D) ** 2\",\"params\":{\"_requestedAmount\":\"Requested amount of tokens on certain proposal\"},\"return\":\"Threshold a proposal's conviction should surpass in order to be able to executed it.\"},\"canChallenge(uint256)\":{\"details\":\"IDisputable interface conformance\"},\"canClose(uint256)\":{\"details\":\"IDisputable interface conformance\"},\"canPerform(address,bytes32,uint256[])\":{\"details\":\"Check whether an action can be performed by a sender for a particular role on this app\",\"params\":{\"_params\":\"Permission params for the role\",\"_role\":\"Role on this app\",\"_sender\":\"Sender of the call\"},\"return\":\"Boolean indicating whether the sender has the permissions to perform the action.        Always returns false if the app hasn't been initialized yet.\"},\"cancelProposal(uint256)\":{\"params\":{\"_proposalId\":\"Proposal id\"}},\"executeProposal(uint256)\":{\"details\":\"...by sending `@tokenAmount((self.requestToken(): address), self.getPropoal(_proposalId): ([uint256], address, uint256, uint256, uint64, bool))` to `self.getPropoal(_proposalId): (uint256, [address], uint256, uint256, uint64, bool)`\",\"params\":{\"_proposalId\":\"Proposal id\"}},\"getAgreement()\":{\"details\":\"Tell the linked Agreement\",\"return\":\"Agreement\"},\"getInitializationBlock()\":{\"return\":\"Block number in which the contract was initialized\"},\"getProposal(uint256)\":{\"details\":\"Get proposal details\",\"params\":{\"_proposalId\":\"Proposal id\"},\"return\":\"Requested amountIf requested in stable amountBeneficiary addressCurrent total stake of tokens on this proposalConviction this proposal had last time calculateAndSetConviction was calledBlock when calculateAndSetConviction was calledTrue if proposal has already been executedAgreementActionId assigned by the Agreements appProposalStatus defining the state of the proposalSubmitter of the proposal\"},\"getProposalVoterStake(uint256,address)\":{\"params\":{\"_proposalId\":\"Proposal id\",\"_voter\":\"Voter address\"},\"return\":\"Proposal voter stake\"},\"getRecoveryVault()\":{\"details\":\"Get the recovery vault for the app\",\"return\":\"Recovery vault address for the app\"},\"getTotalVoterStake(address)\":{\"params\":{\"_voter\":\"Voter address\"},\"return\":\"Total voter stake\"},\"getVoterStakedProposals(address)\":{\"params\":{\"_voter\":\"Voter address\"},\"return\":\"Voter proposals\"},\"hasInitialized()\":{\"return\":\"Whether the contract has been initialized by the time of the current block\"},\"onDisputableActionAllowed(uint256)\":{\"details\":\"This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier     is included. Subclasses should implement the internal implementation of the hook.\",\"params\":{\"_disputableActionId\":\"Identifier of the action to be allowed\"}},\"onDisputableActionChallenged(uint256,uint256,address)\":{\"details\":\"This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier     is included. Subclasses should implement the internal implementation of the hook.\",\"params\":{\"_challengeId\":\"Identifier of the challenge in the context of the Agreement\",\"_challenger\":\"Address that submitted the challenge\",\"_disputableActionId\":\"Identifier of the action to be challenged\"}},\"onDisputableActionRejected(uint256)\":{\"details\":\"This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier     is included. Subclasses should implement the internal implementation of the hook.\",\"params\":{\"_disputableActionId\":\"Identifier of the action to be rejected\"}},\"onDisputableActionVoided(uint256)\":{\"details\":\"This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier     is included. Subclasses should implement the internal implementation of the hook.\",\"params\":{\"_disputableActionId\":\"Identifier of the action to be voided\"}},\"pauseContract(bool)\":{\"params\":{\"_pauseEnabled\":\"Whether to enable or disable pause\"}},\"setAgreement(address)\":{\"params\":{\"_agreement\":\"Agreement instance to be set\"}},\"setConvictionCalculationSettings(uint256,uint256,uint256,uint256)\":{\"params\":{\"_decay\":\"The rate at which conviction is accrued or lost from a proposal\",\"_maxRatio\":\"Proposal threshold parameter\",\"_minThresholdStakePercentage\":\"The minimum percent of stake token max supply that is used for calculating conviction\",\"_weight\":\"Proposal threshold parameter\"}},\"setFundsManager(address)\":{\"params\":{\"_fundsManager\":\"The new funds manager\"}},\"setStableTokenOracleSettings(address,address)\":{\"params\":{\"_stableToken\":\"The new stable token\",\"_stableTokenOracle\":\"The new stable token oracle\"}},\"stakeAllToProposal(uint256)\":{\"params\":{\"_proposalId\":\"Proposal id\"}},\"stakeToProposal(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of tokens staked\",\"_proposalId\":\"Proposal id\"}},\"supportsInterface(bytes4)\":{\"details\":\"Query if a contract implements a certain interface\",\"params\":{\"_interfaceId\":\"The interface identifier being queried, as specified in ERC-165\"},\"return\":\"True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\"},\"transferToVault(address)\":{\"params\":{\"_token\":\"Token balance to be sent to recovery vault.\"}},\"withdrawAllFromProposal(uint256)\":{\"params\":{\"_proposalId\":\"Proposal id\"}},\"withdrawFromProposal(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of tokens withdrawn\",\"_proposalId\":\"Proposal id\"}}}},\"userdoc\":{\"methods\":{\"addProposal(string,bytes,uint256,bool,address)\":{\"notice\":\"Create proposal `_title` for `@tokenAmount((self.requestToken(): address), _requestedAmount)` to `_beneficiary`\"},\"addSignalingProposal(string,bytes)\":{\"notice\":\"Create signaling proposal `_title`\"},\"cancelProposal(uint256)\":{\"notice\":\"Cancel proposal #`_proposalId`\"},\"executeProposal(uint256)\":{\"notice\":\"Execute proposal #`_proposalId`\"},\"getProposalVoterStake(uint256,address)\":{\"notice\":\"Get stake of voter `_voter` on proposal #`_proposalId`\"},\"getTotalVoterStake(address)\":{\"notice\":\"Get the total stake of voter `_voter` on all proposals\"},\"getVoterStakedProposals(address)\":{\"notice\":\"Get all proposal ID's voter `_voter` has currently staked to\"},\"onDisputableActionAllowed(uint256)\":{\"notice\":\"Allow disputable action #`_disputableActionId`\"},\"onDisputableActionChallenged(uint256,uint256,address)\":{\"notice\":\"Challenge disputable action #`_disputableActionId`\"},\"onDisputableActionRejected(uint256)\":{\"notice\":\"Reject disputable action #`_disputableActionId`\"},\"onDisputableActionVoided(uint256)\":{\"notice\":\"Void disputable action #`_disputableActionId`\"},\"pauseContract(bool)\":{\"notice\":\"Pause / unpause the contract preventing / allowing general interaction\"},\"setAgreement(address)\":{\"notice\":\"Set Agreement to `_agreement`\"},\"setConvictionCalculationSettings(uint256,uint256,uint256,uint256)\":{\"notice\":\"Update the conviction voting parameters\"},\"setFundsManager(address)\":{\"notice\":\"Update the funds manager\"},\"setStableTokenOracleSettings(address,address)\":{\"notice\":\"Update the stable token oracle settings\"},\"stakeAllToProposal(uint256)\":{\"notice\":\"Stake all my `(self.stakeToken(): address).symbol(): string` tokens on proposal #`_proposalId`\"},\"stakeToProposal(uint256,uint256)\":{\"notice\":\"Stake `@tokenAmount((self.stakeToken(): address), _amount)` on proposal #`_proposalId`\"},\"transferToVault(address)\":{\"notice\":\"Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them.\"},\"withdrawAllFromProposal(uint256)\":{\"notice\":\"Withdraw all `(self.stakeToken(): address).symbol(): string` tokens previously staked on proposal #`_proposalId`\"},\"withdrawFromInactiveProposals()\":{\"notice\":\"Withdraw all callers stake from inactive proposals\"},\"withdrawFromProposal(uint256,uint256)\":{\"notice\":\"Withdraw `@tokenAmount((self.stakeToken(): address), _amount)` previously staked on proposal #`_proposalId`\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/ConvictionVoting.sol\":\"ConvictionVoting\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@1hive/apps-token-manager/contracts/TokenManagerHook.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    GPL-3.0-or-later\\n */\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/common/ReentrancyGuard.sol\\\";\\n\\n/**\\n* @dev When creating a subcontract, we recommend overriding the _internal_ functions that you want to hook.\\n*/\\ncontract TokenManagerHook is ReentrancyGuard {\\n\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant TOKEN_MANAGER_POSITION = keccak256(\\\"hookedTokenManager.tokenManagerHook.tokenManager\\\");\\n    */\\n    bytes32 private constant TOKEN_MANAGER_POSITION = 0x5c513b2347f66d33af9d68f4a0ed7fbb73ce364889b2af7f3ee5764440da6a8a;\\n\\n    modifier onlyTokenManager() {\\n        require (getTokenManager() == msg.sender, \\\"Hooks must be called from Token Manager\\\");\\n        _;\\n    }\\n\\n    function getTokenManager() public returns (address) {\\n        return TOKEN_MANAGER_POSITION.getStorageAddress();\\n    }\\n\\n    /*\\n    * @dev Called when this contract has been included as a Token Manager hook\\n    * @param _hookId The position in which the hook is going to be called\\n    * @param _token The token controlled by the Token Manager\\n    */\\n    function onRegisterAsHook(uint256 _hookId, address _token) external nonReentrant {\\n        require(getTokenManager() == address(0), \\\"Hook already registered by Token Manager\\\");\\n        TOKEN_MANAGER_POSITION.setStorageAddress(msg.sender);\\n        _onRegisterAsHook(msg.sender, _hookId, _token);\\n    }\\n\\n    /*\\n    * @dev Called when this hook is being removed from the Token Manager\\n    * @param _hookId The position in which the hook is going to be called\\n    * @param _token The token controlled by the Token Manager\\n    */\\n    function onRevokeAsHook(uint256 _hookId, address _token) external onlyTokenManager nonReentrant {\\n        _onRevokeAsHook(msg.sender, _hookId, _token);\\n    }\\n\\n    /*\\n    * @dev Notifies the hook about a token transfer allowing the hook to react if desired. It should return\\n    * true if left unimplemented, otherwise it will prevent some functions in the TokenManager from\\n    * executing successfully.\\n    * @param _from The origin of the transfer\\n    * @param _to The destination of the transfer\\n    * @param _amount The amount of the transfer\\n    */\\n    function onTransfer(address _from, address _to, uint256 _amount) external onlyTokenManager nonReentrant returns (bool) {\\n        return _onTransfer(_from, _to, _amount);\\n    }\\n\\n    /*\\n    * @dev Notifies the hook about an approval allowing the hook to react if desired. It should return\\n    * true if left unimplemented, otherwise it will prevent some functions in the TokenManager from\\n    * executing successfully.\\n    * @param _holder The account that is allowing to spend\\n    * @param _spender The account that is allowed to spend\\n    * @param _amount The amount being allowed\\n    */\\n    function onApprove(address _holder, address _spender, uint _amount) external onlyTokenManager nonReentrant returns (bool) {\\n        return _onApprove(_holder, _spender, _amount);\\n    }\\n\\n    // Function to override if necessary:\\n\\n    function _onRegisterAsHook(address _tokenManager, uint256 _hookId, address _token) internal {\\n        return;\\n    }\\n\\n    function _onRevokeAsHook(address _tokenManager, uint256 _hookId, address _token) internal {\\n        return;\\n    }\\n\\n    function _onTransfer(address _from, address _to, uint256 _amount) internal returns (bool) {\\n        return true;\\n    }\\n\\n    function _onApprove(address _holder, address _spender, uint _amount) internal returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x2a802439a83a161526e585b133bc2610a01f17ef2e93baf0b5b28131f58ddb5b\"},\"@1hive/funds-manager/contracts/FundsManager.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\ncontract FundsManager {\\n\\n    address public owner;\\n    mapping(address => bool) public fundsUsers;\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"ERR:NOT_OWNER\\\");\\n        _;\\n    }\\n\\n    modifier onlyFundsUser {\\n        require(fundsUsers[msg.sender] == true, \\\"ERR:NOT_FUNDS_USER\\\");\\n        _;\\n    }\\n\\n    constructor (address _owner) public {\\n        owner = _owner;\\n    }\\n\\n    function setOwner(address _owner) public onlyOwner {\\n        owner = _owner;\\n    }\\n\\n    function addFundsUser(address _fundsUser) public onlyOwner {\\n        fundsUsers[_fundsUser] = true;\\n    }\\n\\n    function revokeFundsUser(address _fundsUser) public onlyOwner {\\n        require(fundsUsers[_fundsUser] == true, \\\"ERR:SHOULD_BE_FUNDS_USER\\\");\\n        fundsUsers[_fundsUser] = false;\\n    }\\n\\n    function fundsOwner() public view returns (address);\\n\\n    function balance(address _token) public view returns (uint256);\\n\\n    // This must revert if the transfer fails or returns false\\n    function transfer(address _token, address _beneficiary, uint256 _amount) public;\\n}\\n\",\"keccak256\":\"0x683f7a640c3acebe05b748d06f5022fc7133d4ca9fff36ea8a8c27c80f8d4252\"},\"@aragon/apps-shared-minime/contracts/ITokenController.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n/// @dev The token controller contract must implement these functions\\n\\n\\ninterface ITokenController {\\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\\n    /// @param _owner The address that sent the ether to create tokens\\n    /// @return True if the ether is accepted, false if it throws\\n    function proxyPayment(address _owner) external payable returns(bool);\\n\\n    /// @notice Notifies the controller about a token transfer allowing the\\n    ///  controller to react if desired\\n    /// @param _from The origin of the transfer\\n    /// @param _to The destination of the transfer\\n    /// @param _amount The amount of the transfer\\n    /// @return False if the controller does not authorize the transfer\\n    function onTransfer(address _from, address _to, uint _amount) external returns(bool);\\n\\n    /// @notice Notifies the controller about an approval allowing the\\n    ///  controller to react if desired\\n    /// @param _owner The address that calls `approve()`\\n    /// @param _spender The spender in the `approve()` call\\n    /// @param _amount The amount in the `approve()` call\\n    /// @return False if the controller does not authorize the approval\\n    function onApprove(address _owner, address _spender, uint _amount) external returns(bool);\\n}\\n\",\"keccak256\":\"0x030d1ea5543fd23d3c962cbf34b1c3b6e15d9bbfb711416e1cf4160c3bcdccaa\"},\"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n/*\\n    Copyright 2016, Jordi Baylina\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title MiniMeToken Contract\\n/// @author Jordi Baylina\\n/// @dev This token contract's goal is to make it easy for anyone to clone this\\n///  token using the token distribution at a given block, this will allow DAO's\\n///  and DApps to upgrade their features in a decentralized manner without\\n///  affecting the original token\\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\\n\\nimport \\\"./ITokenController.sol\\\";\\n\\ncontract Controlled {\\n    /// @notice The address of the controller is the only address that can call\\n    ///  a function with this modifier\\n    modifier onlyController {\\n        require(msg.sender == controller);\\n        _;\\n    }\\n\\n    address public controller;\\n\\n    function Controlled()  public { controller = msg.sender;}\\n\\n    /// @notice Changes the controller of the contract\\n    /// @param _newController The new controller of the contract\\n    function changeController(address _newController) onlyController  public {\\n        controller = _newController;\\n    }\\n}\\n\\ncontract ApproveAndCallFallBack {\\n    function receiveApproval(\\n        address from,\\n        uint256 _amount,\\n        address _token,\\n        bytes _data\\n    ) public;\\n}\\n\\n/// @dev The actual token contract, the default controller is the msg.sender\\n///  that deploys the contract, so usually this token will be deployed by a\\n///  token controller contract, which Giveth will call a \\\"Campaign\\\"\\ncontract MiniMeToken is Controlled {\\n\\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\\n    uint8 public decimals;             //Number of decimals of the smallest unit\\n    string public symbol;              //An identifier: e.g. REP\\n    string public version = \\\"MMT_0.1\\\"; //An arbitrary versioning scheme\\n\\n\\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\\n    ///  given value, the block number attached is the one that last changed the\\n    ///  value\\n    struct Checkpoint {\\n\\n        // `fromBlock` is the block number that the value was generated from\\n        uint128 fromBlock;\\n\\n        // `value` is the amount of tokens at a specific block number\\n        uint128 value;\\n    }\\n\\n    // `parentToken` is the Token address that was cloned to produce this token;\\n    //  it will be 0x0 for a token that was not cloned\\n    MiniMeToken public parentToken;\\n\\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\\n    //  used to determine the initial distribution of the Clone Token\\n    uint public parentSnapShotBlock;\\n\\n    // `creationBlock` is the block number that the Clone Token was created\\n    uint public creationBlock;\\n\\n    // `balances` is the map that tracks the balance of each address, in this\\n    //  contract when the balance changes the block number that the change\\n    //  occurred is also included in the map\\n    mapping (address => Checkpoint[]) balances;\\n\\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\\n    mapping (address => mapping (address => uint256)) allowed;\\n\\n    // Tracks the history of the `totalSupply` of the token\\n    Checkpoint[] totalSupplyHistory;\\n\\n    // Flag that determines if the token is transferable or not.\\n    bool public transfersEnabled;\\n\\n    // The factory used to create new clone tokens\\n    MiniMeTokenFactory public tokenFactory;\\n\\n////////////////\\n// Constructor\\n////////////////\\n\\n    /// @notice Constructor to create a MiniMeToken\\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\\n    ///  will create the Clone token contracts, the token factory needs to be\\n    ///  deployed first\\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\\n    ///  new token\\n    /// @param _parentSnapShotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token, set to 0 if it\\n    ///  is a new token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    function MiniMeToken(\\n        MiniMeTokenFactory _tokenFactory,\\n        MiniMeToken _parentToken,\\n        uint _parentSnapShotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    )  public\\n    {\\n        tokenFactory = _tokenFactory;\\n        name = _tokenName;                                 // Set the name\\n        decimals = _decimalUnits;                          // Set the decimals\\n        symbol = _tokenSymbol;                             // Set the symbol\\n        parentToken = _parentToken;\\n        parentSnapShotBlock = _parentSnapShotBlock;\\n        transfersEnabled = _transfersEnabled;\\n        creationBlock = block.number;\\n    }\\n\\n\\n///////////////////\\n// ERC20 Methods\\n///////////////////\\n\\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n        return doTransfer(msg.sender, _to, _amount);\\n    }\\n\\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\\n    ///  is approved by `_from`\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\\n\\n        // The controller of this contract can move tokens around at will,\\n        //  this is important to recognize! Confirm that you trust the\\n        //  controller of this contract, which in most situations should be\\n        //  another open source smart contract or 0x0\\n        if (msg.sender != controller) {\\n            require(transfersEnabled);\\n\\n            // The standard ERC 20 transferFrom functionality\\n            if (allowed[_from][msg.sender] < _amount)\\n                return false;\\n            allowed[_from][msg.sender] -= _amount;\\n        }\\n        return doTransfer(_from, _to, _amount);\\n    }\\n\\n    /// @dev This is the actual transfer function in the token contract, it can\\n    ///  only be called by other functions in this contract.\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\\n        if (_amount == 0) {\\n            return true;\\n        }\\n        require(parentSnapShotBlock < block.number);\\n        // Do not allow transfer to 0x0 or the token contract itself\\n        require((_to != 0) && (_to != address(this)));\\n        // If the amount being transfered is more than the balance of the\\n        //  account the transfer returns false\\n        var previousBalanceFrom = balanceOfAt(_from, block.number);\\n        if (previousBalanceFrom < _amount) {\\n            return false;\\n        }\\n        // Alerts the token controller of the transfer\\n        if (isContract(controller)) {\\n            // Adding the ` == true` makes the linter shut up so...\\n            require(ITokenController(controller).onTransfer(_from, _to, _amount) == true);\\n        }\\n        // First update the balance array with the new value for the address\\n        //  sending the tokens\\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\\n        // Then update the balance array with the new value for the address\\n        //  receiving the tokens\\n        var previousBalanceTo = balanceOfAt(_to, block.number);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\\n        // An event to make the transfer easy to find on the blockchain\\n        Transfer(_from, _to, _amount);\\n        return true;\\n    }\\n\\n    /// @param _owner The address that's balance is being requested\\n    /// @return The balance of `_owner` at the current block\\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\\n        return balanceOfAt(_owner, block.number);\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\\n    ///  its behalf. This is a modified version of the ERC20 approve function\\n    ///  to be a little bit safer\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the approval was successful\\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\\n\\n        // Alerts the token controller of the approve function call\\n        if (isContract(controller)) {\\n            // Adding the ` == true` makes the linter shut up so...\\n            require(ITokenController(controller).onApprove(msg.sender, _spender, _amount) == true);\\n        }\\n\\n        allowed[msg.sender][_spender] = _amount;\\n        Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to read the `allowed[]` map\\n    /// @param _owner The address of the account that owns the token\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\\n    ///  to spend\\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\\n    ///  its behalf, and then a function is triggered in the contract that is\\n    ///  being approved, `_spender`. This allows users to use their tokens to\\n    ///  interact with contracts in one function call instead of two\\n    /// @param _spender The address of the contract able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the function call was successful\\n    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\\n        require(approve(_spender, _amount));\\n\\n        _spender.receiveApproval(\\n            msg.sender,\\n            _amount,\\n            this,\\n            _extraData\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to get the total number of tokens\\n    /// @return The total number of tokens\\n    function totalSupply() public constant returns (uint) {\\n        return totalSupplyAt(block.number);\\n    }\\n\\n\\n////////////////\\n// Query balance and totalSupply in History\\n////////////////\\n\\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @param _blockNumber The block number when the balance is queried\\n    /// @return The balance at `_blockNumber`\\n    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) {\\n\\n        // These next few lines are used when the balance of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.balanceOfAt` be queried at the\\n        //  genesis block for that token as this contains initial balance of\\n        //  this token\\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                // Has no parent\\n                return 0;\\n            }\\n\\n        // This will return the expected balance during normal situations\\n        } else {\\n            return getValueAt(balances[_owner], _blockNumber);\\n        }\\n    }\\n\\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\\n    /// @param _blockNumber The block number when the totalSupply is queried\\n    /// @return The total amount of tokens at `_blockNumber`\\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\\n\\n        // These next few lines are used when the totalSupply of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\\n        //  genesis block for this token as that contains totalSupply of this\\n        //  token at this block number.\\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                return 0;\\n            }\\n\\n        // This will return the expected totalSupply during normal situations\\n        } else {\\n            return getValueAt(totalSupplyHistory, _blockNumber);\\n        }\\n    }\\n\\n////////////////\\n// Clone Token Method\\n////////////////\\n\\n    /// @notice Creates a new clone token with the initial distribution being\\n    ///  this token at `_snapshotBlock`\\n    /// @param _cloneTokenName Name of the clone token\\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\\n    /// @param _cloneTokenSymbol Symbol of the clone token\\n    /// @param _snapshotBlock Block when the distribution of the parent token is\\n    ///  copied to set the initial distribution of the new clone token;\\n    ///  if the block is zero than the actual block, the current block is used\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    /// @return The address of the new MiniMeToken Contract\\n    function createCloneToken(\\n        string _cloneTokenName,\\n        uint8 _cloneDecimalUnits,\\n        string _cloneTokenSymbol,\\n        uint _snapshotBlock,\\n        bool _transfersEnabled\\n    ) public returns(MiniMeToken)\\n    {\\n        uint256 snapshot = _snapshotBlock == 0 ? block.number - 1 : _snapshotBlock;\\n\\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\\n            this,\\n            snapshot,\\n            _cloneTokenName,\\n            _cloneDecimalUnits,\\n            _cloneTokenSymbol,\\n            _transfersEnabled\\n        );\\n\\n        cloneToken.changeController(msg.sender);\\n\\n        // An event to make the token easy to find on the blockchain\\n        NewCloneToken(address(cloneToken), snapshot);\\n        return cloneToken;\\n    }\\n\\n////////////////\\n// Generate and destroy tokens\\n////////////////\\n\\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\\n    /// @param _owner The address that will be assigned the new tokens\\n    /// @param _amount The quantity of tokens generated\\n    /// @return True if the tokens are generated correctly\\n    function generateTokens(address _owner, uint _amount) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\\n        uint previousBalanceTo = balanceOf(_owner);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\\n        Transfer(0, _owner, _amount);\\n        return true;\\n    }\\n\\n\\n    /// @notice Burns `_amount` tokens from `_owner`\\n    /// @param _owner The address that will lose the tokens\\n    /// @param _amount The quantity of tokens to burn\\n    /// @return True if the tokens are burned correctly\\n    function destroyTokens(address _owner, uint _amount) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply >= _amount);\\n        uint previousBalanceFrom = balanceOf(_owner);\\n        require(previousBalanceFrom >= _amount);\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\\n        Transfer(_owner, 0, _amount);\\n        return true;\\n    }\\n\\n////////////////\\n// Enable tokens transfers\\n////////////////\\n\\n\\n    /// @notice Enables token holders to transfer their tokens freely if true\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    function enableTransfers(bool _transfersEnabled) onlyController public {\\n        transfersEnabled = _transfersEnabled;\\n    }\\n\\n////////////////\\n// Internal helper functions to query and set a value in a snapshot array\\n////////////////\\n\\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\\n    /// @param checkpoints The history of values being queried\\n    /// @param _block The block number to retrieve the value at\\n    /// @return The number of tokens being queried\\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns (uint) {\\n        if (checkpoints.length == 0)\\n            return 0;\\n\\n        // Shortcut for the actual value\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n            return checkpoints[checkpoints.length-1].value;\\n        if (_block < checkpoints[0].fromBlock)\\n            return 0;\\n\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1) / 2;\\n            if (checkpoints[mid].fromBlock<=_block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\\n    ///  `totalSupplyHistory`\\n    /// @param checkpoints The history of data being updated\\n    /// @param _value The new number of tokens\\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\\n            newCheckPoint.fromBlock = uint128(block.number);\\n            newCheckPoint.value = uint128(_value);\\n        } else {\\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\\n            oldCheckPoint.value = uint128(_value);\\n        }\\n    }\\n\\n    /// @dev Internal function to determine if an address is a contract\\n    /// @param _addr The address being queried\\n    /// @return True if `_addr` is a contract\\n    function isContract(address _addr) constant internal returns(bool) {\\n        uint size;\\n        if (_addr == 0)\\n            return false;\\n\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n\\n        return size>0;\\n    }\\n\\n    /// @dev Helper function to return a min betwen the two uints\\n    function min(uint a, uint b) pure internal returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @notice The fallback function: If the contract's controller has not been\\n    ///  set to 0, then the `proxyPayment` method is called which relays the\\n    ///  ether and creates tokens as described in the token controller contract\\n    function () external payable {\\n        require(isContract(controller));\\n        // Adding the ` == true` makes the linter shut up so...\\n        require(ITokenController(controller).proxyPayment.value(msg.value)(msg.sender) == true);\\n    }\\n\\n//////////\\n// Safety Methods\\n//////////\\n\\n    /// @notice This method can be used by the controller to extract mistakenly\\n    ///  sent tokens to this contract.\\n    /// @param _token The address of the token contract that you want to recover\\n    ///  set to 0 in case you want to extract ether.\\n    function claimTokens(address _token) onlyController public {\\n        if (_token == 0x0) {\\n            controller.transfer(this.balance);\\n            return;\\n        }\\n\\n        MiniMeToken token = MiniMeToken(_token);\\n        uint balance = token.balanceOf(this);\\n        token.transfer(controller, balance);\\n        ClaimedTokens(_token, controller, balance);\\n    }\\n\\n////////////////\\n// Events\\n////////////////\\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _amount\\n        );\\n\\n}\\n\\n\\n////////////////\\n// MiniMeTokenFactory\\n////////////////\\n\\n/// @dev This contract is used to generate clone contracts from a contract.\\n///  In solidity this is the way to create a contract from a contract of the\\n///  same class\\ncontract MiniMeTokenFactory {\\n\\n    /// @notice Update the DApp by creating a new token with new functionalities\\n    ///  the msg.sender becomes the controller of this clone token\\n    /// @param _parentToken Address of the token being cloned\\n    /// @param _snapshotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    /// @return The address of the new token contract\\n    function createCloneToken(\\n        MiniMeToken _parentToken,\\n        uint _snapshotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public returns (MiniMeToken)\\n    {\\n        MiniMeToken newToken = new MiniMeToken(\\n            this,\\n            _parentToken,\\n            _snapshotBlock,\\n            _tokenName,\\n            _decimalUnits,\\n            _tokenSymbol,\\n            _transfersEnabled\\n        );\\n\\n        newToken.changeController(msg.sender);\\n        return newToken;\\n    }\\n}\",\"keccak256\":\"0xae8693d9ccee144cfd4949f87d0994d12e7d232b0b39d3f2f72a7b5c1e54800c\"},\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[]) {\\n        return new uint256[](0);\\n    }\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c, _d);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0x672a96975fc17f66905e775645cc93249426ce9601aef597a13d1e449c7f89d0\"},\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0x7e081f42891bbcc8fa9f3a67efb34ecafa8e2c075e37a01d74d221c45ddfdd10\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IAragonApp.sol\\\";\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage is IAragonApp {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_POSITION = keccak256(\\\"aragonOS.appStorage.kernel\\\");\\n    bytes32 internal constant APP_ID_POSITION = keccak256(\\\"aragonOS.appStorage.appId\\\");\\n    */\\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\\n\\n    function kernel() public view returns (IKernel) {\\n        return IKernel(KERNEL_POSITION.getStorageAddress());\\n    }\\n\\n    function appId() public view returns (bytes32) {\\n        return APP_ID_POSITION.getStorageBytes32();\\n    }\\n\\n    function setKernel(IKernel _kernel) internal {\\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\\n    }\\n\\n    function setAppId(bytes32 _appId) internal {\\n        APP_ID_POSITION.setStorageBytes32(_appId);\\n    }\\n}\\n\",\"keccak256\":\"0x57f490644a5acb26fca0b4cb2cc7f52e64b0dbe9ca5d111f7c1b4e5250ed93ad\"},\"@aragon/os/contracts/apps/AragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/Autopetrified.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/ReentrancyGuard.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\nimport \\\"../lib/standards/ERC165.sol\\\";\\n\\n\\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\\n// that they can never be initialized.\\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\\n// are included so that they are automatically usable by subclassing contracts\\ncontract AragonApp is ERC165, AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\\n    string private constant ERROR_AUTH_FAILED = \\\"APP_AUTH_FAILED\\\";\\n\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] _params) {\\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\\n    * @param _sender Sender of the call\\n    * @param _role Role on this app\\n    * @param _params Permission params for the role\\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\\n    *         Always returns false if the app hasn't been initialized yet.\\n    */\\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\\n        if (!hasInitialized()) {\\n            return false;\\n        }\\n\\n        IKernel linkedKernel = kernel();\\n        if (address(linkedKernel) == address(0)) {\\n            return false;\\n        }\\n\\n        return linkedKernel.hasPermission(\\n            _sender,\\n            address(this),\\n            _role,\\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\\n        );\\n    }\\n\\n    /**\\n    * @dev Get the recovery vault for the app\\n    * @return Recovery vault address for the app\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\\n    }\\n\\n    /**\\n    * @dev Query if a contract implements a certain interface\\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\\n    */\\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n        return super.supportsInterface(_interfaceId) || _interfaceId == ARAGON_APP_INTERFACE_ID;\\n    }\\n}\\n\",\"keccak256\":\"0xa6c2ed08d7df92bf791ff85ecc9e400a874acfa6a7d961fa07e9175fb77231f4\"},\"@aragon/os/contracts/apps/IAragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract IAragonApp {\\n    // Includes appId and kernel methods:\\n    bytes4 internal constant ARAGON_APP_INTERFACE_ID = bytes4(0x54053e6c);\\n\\n    function kernel() public view returns (IKernel);\\n    function appId() public view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xdf64e62d609623a151c233b5f473f385117d68172aa2bf1ac4dc5cd8c5a3fc5b\"},\"@aragon/os/contracts/apps/disputable/DisputableAragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IAgreement.sol\\\";\\nimport \\\"./IDisputable.sol\\\";\\nimport \\\"../AragonApp.sol\\\";\\nimport \\\"../../lib/math/SafeMath64.sol\\\";\\nimport \\\"../../lib/token/ERC20.sol\\\";\\n\\n\\ncontract DisputableAragonApp is IDisputable, AragonApp {\\n    /* Validation errors */\\n    string internal constant ERROR_SENDER_NOT_AGREEMENT = \\\"DISPUTABLE_SENDER_NOT_AGREEMENT\\\";\\n    string internal constant ERROR_AGREEMENT_STATE_INVALID = \\\"DISPUTABLE_AGREEMENT_STATE_INVAL\\\";\\n\\n    // This role is used to protect who can challenge actions in derived Disputable apps. However, it is not required\\n    // to be validated in the app itself as the connected Agreement is responsible for performing the check on a challenge.\\n    // bytes32 public constant CHALLENGE_ROLE = keccak256(\\\"CHALLENGE_ROLE\\\");\\n    bytes32 public constant CHALLENGE_ROLE = 0xef025787d7cd1a96d9014b8dc7b44899b8c1350859fb9e1e05f5a546dd65158d;\\n\\n    // bytes32 public constant SET_AGREEMENT_ROLE = keccak256(\\\"SET_AGREEMENT_ROLE\\\");\\n    bytes32 public constant SET_AGREEMENT_ROLE = 0x8dad640ab1b088990c972676ada708447affc660890ec9fc9a5483241c49f036;\\n\\n    // bytes32 internal constant AGREEMENT_POSITION = keccak256(\\\"aragonOS.appStorage.agreement\\\");\\n    bytes32 internal constant AGREEMENT_POSITION = 0x6dbe80ccdeafbf5f3fff5738b224414f85e9370da36f61bf21c65159df7409e9;\\n\\n    modifier onlyAgreement() {\\n        require(address(_getAgreement()) == msg.sender, ERROR_SENDER_NOT_AGREEMENT);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Challenge disputable action #`_disputableActionId`\\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\\n    *      is included. Subclasses should implement the internal implementation of the hook.\\n    * @param _disputableActionId Identifier of the action to be challenged\\n    * @param _challengeId Identifier of the challenge in the context of the Agreement\\n    * @param _challenger Address that submitted the challenge\\n    */\\n    function onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) external onlyAgreement {\\n        _onDisputableActionChallenged(_disputableActionId, _challengeId, _challenger);\\n    }\\n\\n    /**\\n    * @notice Allow disputable action #`_disputableActionId`\\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\\n    *      is included. Subclasses should implement the internal implementation of the hook.\\n    * @param _disputableActionId Identifier of the action to be allowed\\n    */\\n    function onDisputableActionAllowed(uint256 _disputableActionId) external onlyAgreement {\\n        _onDisputableActionAllowed(_disputableActionId);\\n    }\\n\\n    /**\\n    * @notice Reject disputable action #`_disputableActionId`\\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\\n    *      is included. Subclasses should implement the internal implementation of the hook.\\n    * @param _disputableActionId Identifier of the action to be rejected\\n    */\\n    function onDisputableActionRejected(uint256 _disputableActionId) external onlyAgreement {\\n        _onDisputableActionRejected(_disputableActionId);\\n    }\\n\\n    /**\\n    * @notice Void disputable action #`_disputableActionId`\\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\\n    *      is included. Subclasses should implement the internal implementation of the hook.\\n    * @param _disputableActionId Identifier of the action to be voided\\n    */\\n    function onDisputableActionVoided(uint256 _disputableActionId) external onlyAgreement {\\n        _onDisputableActionVoided(_disputableActionId);\\n    }\\n\\n    /**\\n    * @notice Set Agreement to `_agreement`\\n    * @param _agreement Agreement instance to be set\\n    */\\n    function setAgreement(IAgreement _agreement) external auth(SET_AGREEMENT_ROLE) {\\n        IAgreement agreement = _getAgreement();\\n        require(agreement == IAgreement(0) && _agreement != IAgreement(0), ERROR_AGREEMENT_STATE_INVALID);\\n\\n        AGREEMENT_POSITION.setStorageAddress(address(_agreement));\\n        emit AgreementSet(_agreement);\\n    }\\n\\n    /**\\n    * @dev Tell the linked Agreement\\n    * @return Agreement\\n    */\\n    function getAgreement() external view returns (IAgreement) {\\n        return _getAgreement();\\n    }\\n\\n    /**\\n    * @dev Query if a contract implements a certain interface\\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\\n    */\\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n        return super.supportsInterface(_interfaceId) || _interfaceId == DISPUTABLE_INTERFACE_ID;\\n    }\\n\\n    /**\\n    * @dev Internal implementation of the `onDisputableActionChallenged` hook\\n    * @param _disputableActionId Identifier of the action to be challenged\\n    * @param _challengeId Identifier of the challenge in the context of the Agreement\\n    * @param _challenger Address that submitted the challenge\\n    */\\n    function _onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) internal;\\n\\n    /**\\n    * @dev Internal implementation of the `onDisputableActionRejected` hook\\n    * @param _disputableActionId Identifier of the action to be rejected\\n    */\\n    function _onDisputableActionRejected(uint256 _disputableActionId) internal;\\n\\n    /**\\n    * @dev Internal implementation of the `onDisputableActionAllowed` hook\\n    * @param _disputableActionId Identifier of the action to be allowed\\n    */\\n    function _onDisputableActionAllowed(uint256 _disputableActionId) internal;\\n\\n    /**\\n    * @dev Internal implementation of the `onDisputableActionVoided` hook\\n    * @param _disputableActionId Identifier of the action to be voided\\n    */\\n    function _onDisputableActionVoided(uint256 _disputableActionId) internal;\\n\\n    /**\\n    * @dev Register a new disputable action in the Agreement\\n    * @param _disputableActionId Identifier of the action in the context of the Disputable\\n    * @param _context Link to human-readable context for the given action\\n    * @param _submitter Address that submitted the action\\n    * @return Unique identifier for the created action in the context of the Agreement\\n    */\\n    function _registerDisputableAction(uint256 _disputableActionId, bytes _context, address _submitter) internal returns (uint256) {\\n        IAgreement agreement = _ensureAgreement();\\n        return agreement.newAction(_disputableActionId, _context, _submitter);\\n    }\\n\\n    /**\\n    * @dev Close disputable action in the Agreement\\n    * @param _actionId Identifier of the action in the context of the Agreement\\n    */\\n    function _closeDisputableAction(uint256 _actionId) internal {\\n        IAgreement agreement = _ensureAgreement();\\n        agreement.closeAction(_actionId);\\n    }\\n\\n    /**\\n    * @dev Tell the linked Agreement\\n    * @return Agreement\\n    */\\n    function _getAgreement() internal view returns (IAgreement) {\\n        return IAgreement(AGREEMENT_POSITION.getStorageAddress());\\n    }\\n\\n    /**\\n    * @dev Tell the linked Agreement or revert if it has not been set\\n    * @return Agreement\\n    */\\n    function _ensureAgreement() internal view returns (IAgreement) {\\n        IAgreement agreement = _getAgreement();\\n        require(agreement != IAgreement(0), ERROR_AGREEMENT_STATE_INVALID);\\n        return agreement;\\n    }\\n}\\n\",\"keccak256\":\"0x263599fea1510ae4c2b911afd3fb44ef4b0c6e8f75860f1269145482c7400053\"},\"@aragon/os/contracts/apps/disputable/IAgreement.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../../lib/token/ERC20.sol\\\";\\n\\n\\ncontract IAgreement {\\n\\n    event ActionSubmitted(uint256 indexed actionId, address indexed disputable);\\n    event ActionClosed(uint256 indexed actionId);\\n    event ActionChallenged(uint256 indexed actionId, uint256 indexed challengeId);\\n    event ActionSettled(uint256 indexed actionId, uint256 indexed challengeId);\\n    event ActionDisputed(uint256 indexed actionId, uint256 indexed challengeId);\\n    event ActionAccepted(uint256 indexed actionId, uint256 indexed challengeId);\\n    event ActionVoided(uint256 indexed actionId, uint256 indexed challengeId);\\n    event ActionRejected(uint256 indexed actionId, uint256 indexed challengeId);\\n\\n    enum ChallengeState {\\n        Waiting,\\n        Settled,\\n        Disputed,\\n        Rejected,\\n        Accepted,\\n        Voided\\n    }\\n\\n    function newAction(uint256 _disputableActionId, bytes _context, address _submitter) external returns (uint256);\\n\\n    function closeAction(uint256 _actionId) external;\\n\\n    function challengeAction(uint256 _actionId, uint256 _settlementOffer, bool _finishedSubmittingEvidence, bytes _context) external;\\n\\n    function settleAction(uint256 _actionId) external;\\n\\n    function disputeAction(uint256 _actionId, bool _finishedSubmittingEvidence) external;\\n}\\n\",\"keccak256\":\"0xe8fa5edb52014934b90ceda4f7d8e191b5c164ebc5506189b56f0e183567f90f\"},\"@aragon/os/contracts/apps/disputable/IDisputable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IAgreement.sol\\\";\\nimport \\\"../../lib/standards/ERC165.sol\\\";\\nimport \\\"../../lib/token/ERC20.sol\\\";\\n\\n\\ncontract IDisputable is ERC165 {\\n    // Includes setAgreement, onDisputableActionChallenged, onDisputableActionAllowed,\\n    // onDisputableActionRejected, onDisputableActionVoided, getAgreement, canChallenge, and canClose methods:\\n    bytes4 internal constant DISPUTABLE_INTERFACE_ID = bytes4(0xf3d3bb51);\\n\\n    event AgreementSet(IAgreement indexed agreement);\\n\\n    function setAgreement(IAgreement _agreement) external;\\n\\n    function onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) external;\\n\\n    function onDisputableActionAllowed(uint256 _disputableActionId) external;\\n\\n    function onDisputableActionRejected(uint256 _disputableActionId) external;\\n\\n    function onDisputableActionVoided(uint256 _disputableActionId) external;\\n\\n    function getAgreement() external view returns (IAgreement);\\n\\n    function canChallenge(uint256 _disputableActionId) external view returns (bool);\\n\\n    function canClose(uint256 _disputableActionId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xce0da286f2b52dc33c9846b101ff075ac9461881aaf1753058151d51b1d55436\"},\"@aragon/os/contracts/common/Autopetrified.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Petrifiable.sol\\\";\\n\\n\\ncontract Autopetrified is Petrifiable {\\n    constructor() public {\\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\\n        // This renders them uninitializable (and unusable without a proxy).\\n        petrify();\\n    }\\n}\\n\",\"keccak256\":\"0x42f0422744e13674e38bfbef079af7150883aba96ddbe61c5ae50df31d42696e\"},\"@aragon/os/contracts/common/ConversionHelpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary ConversionHelpers {\\n    string private constant ERROR_IMPROPER_LENGTH = \\\"CONVERSION_IMPROPER_LENGTH\\\";\\n\\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\\n        // Force cast the uint256[] into a bytes array, by overwriting its length\\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 byteLength = _input.length * 32;\\n        assembly {\\n            output := _input\\n            mstore(output, byteLength)\\n        }\\n    }\\n\\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\\n        // Force cast the bytes array into a uint256[], by overwriting its length\\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 intsLength = _input.length / 32;\\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\\n\\n        assembly {\\n            output := _input\\n            mstore(output, intsLength)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9872383d458352f5c68fa5afd1fc84ab6b172cbee33359cfa57655b8eda92416\"},\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address internal constant ETH = address(0);\\n}\\n\",\"keccak256\":\"0x6b2fa091968161075154a77fa741a3484c891d73cd3cd14ede502ff56dd08dfc\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IVaultRecoverable {\\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\\n\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) external view returns (bool);\\n    function getRecoveryVault() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa8e004decf086e817a864b485473b687c2c468c82af7b5011d9908586f7cbf36\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./TimeHelpers.sol\\\";\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract Initializable is TimeHelpers {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.initializable.initializationBlock\\\")\\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\\n\\n    string private constant ERROR_ALREADY_INITIALIZED = \\\"INIT_ALREADY_INITIALIZED\\\";\\n    string private constant ERROR_NOT_INITIALIZED = \\\"INIT_NOT_INITIALIZED\\\";\\n\\n    modifier onlyInit {\\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n    * @return Whether the contract has been initialized by the time of the current block\\n    */\\n    function hasInitialized() public view returns (bool) {\\n        uint256 initializationBlock = getInitializationBlock();\\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization to enable the contract\\n    *      at a future block number rather than immediately.\\n    */\\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xc859366d3143499d1458ea55cb5374ae1ca1faf41763cad5e051dea2da373ba1\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract IsContract {\\n    /*\\n    * NOTE: this should NEVER be used for authentication\\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\\n    *\\n    * This is only intended to be used as a sanity check that an address is actually a contract,\\n    * RATHER THAN an address not being a contract.\\n    */\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x9dd99d770a5eed901ba749e1f02e4fae443e71e899f4909f56825dfc378da089\"},\"@aragon/os/contracts/common/Petrifiable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n\\ncontract Petrifiable is Initializable {\\n    // Use block UINT256_MAX (which should be never) as the initializable date\\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\\n\\n    function isPetrified() public view returns (bool) {\\n        return getInitializationBlock() == PETRIFIED_BLOCK;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract to prevent being initialized.\\n    *      Useful for freezing base contracts when they're used behind proxies.\\n    */\\n    function petrify() internal onlyInit {\\n        initializedAt(PETRIFIED_BLOCK);\\n    }\\n}\\n\",\"keccak256\":\"0x797d3a58b782032f6afc51725326c0b51dceb00f3af6b85b25bd91cc10d22504\"},\"@aragon/os/contracts/common/ReentrancyGuard.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\n\\n\\ncontract ReentrancyGuard {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\\\"aragonOS.reentrancyGuard.mutex\\\");\\n    */\\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\\n\\n    string private constant ERROR_REENTRANT = \\\"REENTRANCY_REENTRANT_CALL\\\";\\n\\n    modifier nonReentrant() {\\n        // Ensure mutex is unlocked\\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\\n\\n        // Lock mutex before function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\\n\\n        // Perform function call\\n        _;\\n\\n        // Unlock mutex after function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\\n    }\\n}\\n\",\"keccak256\":\"0xd89653c118bbd8cace423c45daa37986c566672198a415254011c028d1831189\"},\"@aragon/os/contracts/common/SafeERC20.sol\":{\"content\":\"// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\n\\n\\nlibrary SafeERC20 {\\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\\n    // https://github.com/ethereum/solidity/issues/3544\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\n\\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \\\"SAFE_ERC_20_BALANCE_REVERTED\\\";\\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \\\"SAFE_ERC_20_ALLOWANCE_REVERTED\\\";\\n\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\n        private\\n        returns (bool)\\n    {\\n        bool ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            let success := call(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                0,                    // no value\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                // Check number of bytes returned from last function call\\n                switch returndatasize\\n\\n                // No bytes returned: assume success\\n                case 0 {\\n                    ret := 1\\n                }\\n\\n                // 32 bytes returned: check if non-zero\\n                case 0x20 {\\n                    // Only return success if returned data was true\\n                    // Already have output in ptr\\n                    ret := eq(mload(ptr), 1)\\n                }\\n\\n                // Not sure what was returned: don't mark as success\\n                default { }\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    function staticInvoke(address _addr, bytes memory _calldata)\\n        private\\n        view\\n        returns (bool, uint256)\\n    {\\n        bool success;\\n        uint256 ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            success := staticcall(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                ret := mload(ptr)\\n            }\\n        }\\n        return (success, ret);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferCallData = abi.encodeWithSelector(\\n            TRANSFER_SELECTOR,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\n            _token.transferFrom.selector,\\n            _from,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferFromCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\\n        bytes memory approveCallData = abi.encodeWithSelector(\\n            _token.approve.selector,\\n            _spender,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, approveCallData);\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.balanceOf().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\\n            _token.balanceOf.selector,\\n            _owner\\n        );\\n\\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\\n\\n        return tokenBalance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.allowance().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\\n        bytes memory allowanceCallData = abi.encodeWithSelector(\\n            _token.allowance.selector,\\n            _owner,\\n            _spender\\n        );\\n\\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return allowance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.totalSupply().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\\n\\n        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return totalSupply;\\n    }\\n}\\n\",\"keccak256\":\"0xd251a1207e1faa4c41500bf927310bb739b1fbc0bf880f236f8e0a9236d6a03a\"},\"@aragon/os/contracts/common/TimeHelpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Uint256Helpers.sol\\\";\\n\\n\\ncontract TimeHelpers {\\n    using Uint256Helpers for uint256;\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n    * @dev Returns the current block number, converted to uint64.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber64() internal view returns (uint64) {\\n        return getBlockNumber().toUint64();\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp() internal view returns (uint256) {\\n        return block.timestamp; // solium-disable-line security/no-block-members\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp, converted to uint64.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp64() internal view returns (uint64) {\\n        return getTimestamp().toUint64();\\n    }\\n}\\n\",\"keccak256\":\"0xfaba85207f0bb4bb5d7b6685a963c39a3258641bda6e523175640c3f9aeb2045\"},\"@aragon/os/contracts/common/Uint256Helpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary Uint256Helpers {\\n    uint256 private constant MAX_UINT64 = uint64(-1);\\n\\n    string private constant ERROR_NUMBER_TOO_BIG = \\\"UINT64_NUMBER_TOO_BIG\\\";\\n\\n    function toUint64(uint256 a) internal pure returns (uint64) {\\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\\n        return uint64(a);\\n    }\\n}\\n\",\"keccak256\":\"0x83033025a3f4402be3b7bcc9a23ce96ae4fadc7f251da8f139d73a13a3400b0c\"},\"@aragon/os/contracts/common/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n}\\n\",\"keccak256\":\"0xe497dcb85bbbf10224623247f39a4aeed7d3b230de2a811f3b69cb0e7d0a64d4\"},\"@aragon/os/contracts/common/VaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    using SafeERC20 for ERC20;\\n\\n    string private constant ERROR_DISALLOWED = \\\"RECOVER_DISALLOWED\\\";\\n    string private constant ERROR_VAULT_NOT_CONTRACT = \\\"RECOVER_VAULT_NOT_CONTRACT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \\\"RECOVER_TOKEN_TRANSFER_FAILED\\\";\\n\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\\n        address vault = getRecoveryVault();\\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\\n\\n        uint256 balance;\\n        if (_token == ETH) {\\n            balance = address(this).balance;\\n            vault.transfer(balance);\\n        } else {\\n            ERC20 token = ERC20(_token);\\n            balance = token.staticBalanceOf(this);\\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\\n        }\\n\\n        emit RecoverToVault(vault, _token, balance);\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n\\n    // Cast non-implemented interface to be public so we can use it internally\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xea4ded621a63f988b83ac27b4a23cad0a42c3d77bcf6ca7b88681ae4ea650cf4\"},\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \\\"EVMRUN_EXECUTOR_UNAVAILABLE\\\";\\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \\\"EVMRUN_PROTECTED_STATE_MODIFIED\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\";\\n    */\\n\\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\\n\\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\\n    }\\n\\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\\n        internal\\n        isInitialized\\n        protectState\\n        returns (bytes)\\n    {\\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\\n\\n        bytes4 sig = executor.execScript.selector;\\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\\n\\n        bytes memory output;\\n        assembly {\\n            let success := delegatecall(\\n                gas,                // forward all gas\\n                executor,           // address\\n                add(data, 0x20),    // calldata start\\n                mload(data),        // calldata length\\n                0,                  // don't write output (we'll handle this ourselves)\\n                0                   // don't write output\\n            )\\n\\n            output := mload(0x40) // free mem ptr get\\n\\n            switch success\\n            case 0 {\\n                // If the call errored, forward its full error data\\n                returndatacopy(output, 0, returndatasize)\\n                revert(output, returndatasize)\\n            }\\n            default {\\n                switch gt(returndatasize, 0x3f)\\n                case 0 {\\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\\n                    // revert with \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\"\\n                    // See remix: doing a `revert(\\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\")` always results in\\n                    // this memory layout\\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\\n\\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                }\\n                default {\\n                    // Copy result\\n                    //\\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\\n                    //    [ output length (32 bytes) ]\\n                    //    [ output content (N bytes) ]\\n                    //\\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\\n                    let copysize := sub(returndatasize, 0x20)\\n                    returndatacopy(output, 0x20, copysize)\\n\\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\\n                }\\n            }\\n        }\\n\\n        emit ScriptResult(address(executor), _script, _input, output);\\n\\n        return output;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = address(kernel());\\n        bytes32 preAppId = appId();\\n        _; // exec\\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\\n    }\\n}\\n\",\"keccak256\":\"0xf8b4ccf7ee558224c155604a4a0b5cc35715367cda5010fb38e21d63ec5236c9\"},\"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n    function executorType() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x76ad18a278e36e14147f5b58a1157de67ce95f28813f3e1eacfedaaf53dd33b9\"},\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    */\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\\n}\\n\",\"keccak256\":\"0x66b255ac1537765d6e79cc0ed02df004e7bf214863773901e207baafd59dc2ce\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\ninterface IKernelEvents {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\\n}\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IKernelEvents, IVaultRecoverable {\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\\n}\\n\",\"keccak256\":\"0x96e9fd607b156a96905ec0108bb4fbcc5ad85212bb98e03600069bb5727d2daa\"},\"@aragon/os/contracts/kernel/KernelConstants.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract KernelAppIds {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\\\"vault\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\\n}\\n\\n\\ncontract KernelNamespaceConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n}\\n\",\"keccak256\":\"0x817f66cfc7bfafd19a4e6b1344850c5f7b72e39a1073fe862efebe608a07c0d3\"},\"@aragon/os/contracts/lib/math/Math.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n/**\\n * @title Math\\n * @dev Assorted math operations\\n */\\n\\nlibrary Math {\\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\\n    return a >= b ? a : b;\\n  }\\n\\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\\n    return a < b ? a : b;\\n  }\\n\\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a >= b ? a : b;\\n  }\\n\\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n}\\n\",\"keccak256\":\"0x177eb819d0a85eb689fa62b28a7ab8cc5e999478c95ad1434c54de264e19b0ae\"},\"@aragon/os/contracts/lib/math/SafeMath.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = _a * _b;\\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint256 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        uint256 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x2e11c8dcead82c452ef452f4dbced40e20ae105fa4145d920dac6e077b31d846\"},\"@aragon/os/contracts/lib/math/SafeMath64.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\\n// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath64\\n * @dev Math operations for uint64 with safety checks that revert on error\\n */\\nlibrary SafeMath64 {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH64_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH64_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH64_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH64_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint256 c = uint256(_a) * uint256(_b);\\n        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\\n\\n        return uint64(c);\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint64 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint64 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint64 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x34f18573e7b2180645c67faaff60ebc713ab22c697606d3b3ce4fe0e745955f4\"},\"@aragon/os/contracts/lib/standards/ERC165.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ERC165 {\\n    // Includes supportsInterface method:\\n    bytes4 internal constant ERC165_INTERFACE_ID = bytes4(0x01ffc9a7);\\n\\n    /**\\n    * @dev Query if a contract implements a certain interface\\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\\n    */\\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n        return _interfaceId == ERC165_INTERFACE_ID;\\n    }\\n}\\n\",\"keccak256\":\"0x6f67f6ece954fde87dd5e1696b4b759d18280d3e45ee54233744dee11ce1d4b5\"},\"@aragon/os/contracts/lib/token/ERC20.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 {\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender)\\n        public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function approve(address _spender, uint256 _value)\\n        public returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        public returns (bool);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xa2e319fde92f9e70912f09bf6e99bbf8b9b798961d54ffcba59d347d37bde1b7\"},\"contracts/ConvictionVoting.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/disputable/DisputableAragonApp.sol\\\";\\nimport \\\"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath64.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/Math.sol\\\";\\nimport \\\"@1hive/apps-token-manager/contracts/TokenManagerHook.sol\\\";\\nimport \\\"@1hive/funds-manager/contracts/FundsManager.sol\\\";\\nimport \\\"./lib/ArrayUtils.sol\\\";\\nimport \\\"./lib/IPriceOracle.sol\\\";\\n\\ncontract ConvictionVoting is DisputableAragonApp, TokenManagerHook {\\n    using SafeMath for uint256;\\n    using SafeMath64 for uint64;\\n    using ArrayUtils for uint256[];\\n\\n    // bytes32 constant public PAUSE_CONTRACT_ROLE = keccak256(\\\"PAUSE_CONTRACT_ROLE\\\");\\n    bytes32 constant public PAUSE_CONTRACT_ROLE = 0x0e3a87ad3cd0c04dcd1e538226de2b467c72316c162f937f5b6f791361662462;\\n    // bytes32 constant public UPDATE_SETTINGS_ROLE = keccak256(\\\"UPDATE_SETTINGS_ROLE\\\");\\n    bytes32 constant public UPDATE_SETTINGS_ROLE = 0x9d4f140430c9045e12b5a104aa9e641c09b980a26ab8e12a32a2f3d155229ae3;\\n    // bytes32 constant public CREATE_PROPOSALS_ROLE = keccak256(\\\"CREATE_PROPOSALS_ROLE\\\");\\n    bytes32 constant public CREATE_PROPOSALS_ROLE = 0xbf05b9322505d747ab5880dfb677dc4864381e9fc3a25ccfa184a3a53d02f4b2;\\n    // bytes32 constant public CANCEL_PROPOSALS_ROLE = keccak256(\\\"CANCEL_PROPOSALS_ROLE\\\");\\n    bytes32 constant public CANCEL_PROPOSALS_ROLE = 0x82c52f79cad6ac09c16c165c562b50c5e655a09a19bb99b2d182ab3caff020f2;\\n\\n    uint256 public constant D = 10000000;\\n    uint256 public constant ONE_HUNDRED_PERCENT = 1e18;\\n    uint256 private constant TWO_128 = 0x100000000000000000000000000000000; // 2^128\\n    uint256 private constant TWO_127 = 0x80000000000000000000000000000000; // 2^127\\n    uint256 private constant TWO_64 = 0x10000000000000000; // 2^64\\n    uint256 public constant ABSTAIN_PROPOSAL_ID = 1;\\n    uint64 public constant MAX_STAKED_PROPOSALS = 10;\\n\\n    string private constant ERROR_CONTRACT_PAUSED = \\\"CV_CONTRACT_PAUSED\\\";\\n    string private constant ERROR_PROPOSAL_DOES_NOT_EXIST = \\\"CV_PROPOSAL_DOES_NOT_EXIST\\\";\\n    string private constant ERROR_REQUESTED_AMOUNT_ZERO = \\\"CV_REQUESTED_AMOUNT_ZERO\\\";\\n    string private constant ERROR_NO_BENEFICIARY = \\\"CV_NO_BENEFICIARY\\\";\\n    string private constant ERROR_STAKING_ALREADY_STAKED = \\\"CV_STAKING_ALREADY_STAKED\\\";\\n    string private constant ERROR_PROPOSAL_NOT_ACTIVE = \\\"CV_PROPOSAL_NOT_ACTIVE\\\";\\n    string private constant ERROR_CANNOT_EXECUTE_ABSTAIN_PROPOSAL = \\\"CV_CANNOT_EXECUTE_ABSTAIN_PROPOSAL\\\";\\n    string private constant ERROR_CANNOT_EXECUTE_ZERO_VALUE_PROPOSAL = \\\"CV_CANNOT_EXECUTE_ZERO_VALUE_PROPOSAL\\\";\\n    string private constant ERROR_INSUFFICIENT_CONVICION = \\\"CV_INSUFFICIENT_CONVICION\\\";\\n    string private constant ERROR_SENDER_CANNOT_CANCEL = \\\"CV_SENDER_CANNOT_CANCEL\\\";\\n    string private constant ERROR_CANNOT_CANCEL_ABSTAIN_PROPOSAL = \\\"CV_CANNOT_CANCEL_ABSTAIN_PROPOSAL\\\";\\n    string private constant ERROR_AMOUNT_OVER_MAX_RATIO = \\\"CV_AMOUNT_OVER_MAX_RATIO\\\";\\n    string private constant ERROR_INCORRECT_TOKEN_MANAGER_HOOK = \\\"CV_INCORRECT_TOKEN_MANAGER_HOOK\\\";\\n    string private constant ERROR_AMOUNT_CAN_NOT_BE_ZERO = \\\"CV_AMOUNT_CAN_NOT_BE_ZERO\\\";\\n    string private constant ERROR_INCORRECT_PROPOSAL_STATUS = \\\"CV_INCORRECT_PROPOSAL_STATUS\\\";\\n    string private constant ERROR_STAKING_MORE_THAN_AVAILABLE = \\\"CV_STAKING_MORE_THAN_AVAILABLE\\\";\\n    string private constant ERROR_MAX_PROPOSALS_REACHED = \\\"CV_MAX_PROPOSALS_REACHED\\\";\\n    string private constant ERROR_WITHDRAW_MORE_THAN_STAKED = \\\"CV_WITHDRAW_MORE_THAN_STAKED\\\";\\n    string private constant ERROR_NO_TOKEN_MANAGER_SET = \\\"CV_NO_TOKEN_MANAGER_SET\\\";\\n\\n    enum ProposalStatus {\\n        Active,              // A vote that has been reported to Agreements\\n        Paused,              // A vote that is being challenged by Agreements\\n        Cancelled,           // A vote that has been cancelled\\n        Executed             // A vote that has been executed\\n    }\\n\\n    struct Proposal {\\n        uint256 requestedAmount;\\n        bool stableRequestAmount;\\n        address beneficiary;\\n        uint256 stakedTokens;\\n        uint256 convictionLast;\\n        uint64 blockLast;\\n        uint256 agreementActionId;\\n        ProposalStatus proposalStatus;\\n        mapping(address => uint256) voterStake;\\n        address submitter;\\n    }\\n\\n    MiniMeToken public stakeToken;\\n    address public requestToken;\\n    address public stableToken;\\n    IPriceOracle public stableTokenOracle;\\n    FundsManager public fundsManager;\\n    uint256 public decay;\\n    uint256 public maxRatio;\\n    uint256 public weight;\\n    uint256 public minThresholdStakePercentage;\\n    uint256 public proposalCounter;\\n    uint256 public totalStaked;\\n    bool public contractPaused;\\n\\n    mapping(uint256 => Proposal) internal proposals;\\n    mapping(address => uint256) internal totalVoterStake;\\n    mapping(address => uint256[]) internal voterStakedProposals;\\n\\n    event ContractPaused(bool pauseEnabled);\\n    event OracleSettingsChanged(IPriceOracle stableTokenOracle, address stableToken);\\n    event FundsManagerChanged(FundsManager fundsManager);\\n    event ConvictionSettingsChanged(uint256 decay, uint256 maxRatio, uint256 weight, uint256 minThresholdStakePercentage);\\n    event ProposalAdded(address indexed entity, uint256 indexed id, uint256 indexed actionId, string title, bytes link, uint256 amount, bool stable, address beneficiary);\\n    event StakeAdded(address indexed entity, uint256 indexed id, uint256  amount, uint256 tokensStaked, uint256 totalTokensStaked, uint256 conviction);\\n    event StakeWithdrawn(address entity, uint256 indexed id, uint256 amount, uint256 tokensStaked, uint256 totalTokensStaked, uint256 conviction);\\n    event ProposalExecuted(uint256 indexed id, uint256 conviction);\\n    event ProposalPaused(uint256 indexed proposalId, uint256 indexed challengeId);\\n    event ProposalResumed(uint256 indexed proposalId);\\n    event ProposalCancelled(uint256 indexed proposalId);\\n    event ProposalRejected(uint256 indexed proposalId);\\n\\n    modifier proposalExists(uint256 _proposalId) {\\n        require(_proposalId == 1 || proposals[_proposalId].submitter != address(0), ERROR_PROPOSAL_DOES_NOT_EXIST);\\n        _;\\n    }\\n\\n    modifier notPaused() {\\n        require(!contractPaused, ERROR_CONTRACT_PAUSED);\\n        _;\\n    }\\n\\n    function initialize(\\n        MiniMeToken _stakeToken,\\n        address _requestToken,\\n        address _stableToken,\\n        IPriceOracle _stableTokenOracle,\\n        FundsManager _fundsManager,\\n        uint256 _decay,\\n        uint256 _maxRatio,\\n        uint256 _weight,\\n        uint256 _minThresholdStakePercentage\\n    )\\n        external onlyInit\\n    {\\n        proposalCounter = 2; // First proposal should be #2, #1 is reserved for abstain proposal, #0 is not used for better UX.\\n        stakeToken = _stakeToken;\\n        requestToken = _requestToken;\\n        stableToken = _stableToken;\\n        stableTokenOracle = _stableTokenOracle;\\n        fundsManager = _fundsManager;\\n        decay = _decay;\\n        maxRatio = _maxRatio;\\n        weight = _weight;\\n        minThresholdStakePercentage = _minThresholdStakePercentage;\\n\\n        proposals[ABSTAIN_PROPOSAL_ID] = Proposal(\\n            0,\\n            false,\\n            0x0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            ProposalStatus.Active,\\n            0x0\\n        );\\n        emit ProposalAdded(0x0, ABSTAIN_PROPOSAL_ID, 0, \\\"Abstain proposal\\\", \\\"\\\", 0, false, 0x0);\\n\\n        initialized();\\n    }\\n\\n    /**\\n    * @notice Pause / unpause the contract preventing / allowing general interaction\\n    * @param _pauseEnabled Whether to enable or disable pause\\n    */\\n    function pauseContract(bool _pauseEnabled) external auth(PAUSE_CONTRACT_ROLE) {\\n        contractPaused = _pauseEnabled;\\n        emit ContractPaused(contractPaused);\\n    }\\n\\n    /**\\n    * @notice Update the stable token oracle settings\\n    * @param _stableTokenOracle The new stable token oracle\\n    * @param _stableToken The new stable token\\n    */\\n    function setStableTokenOracleSettings(IPriceOracle _stableTokenOracle, address _stableToken)\\n        external auth(UPDATE_SETTINGS_ROLE)\\n    {\\n        stableTokenOracle = _stableTokenOracle;\\n        stableToken = _stableToken;\\n\\n        emit OracleSettingsChanged(_stableTokenOracle, _stableToken);\\n    }\\n\\n    /**\\n    * @notice Update the funds manager\\n    * @param _fundsManager The new funds manager\\n    */\\n    function setFundsManager(FundsManager _fundsManager) external auth(UPDATE_SETTINGS_ROLE) {\\n        fundsManager = _fundsManager;\\n        emit FundsManagerChanged(_fundsManager);\\n    }\\n\\n    /**\\n     * @notice Update the conviction voting parameters\\n     * @param _decay The rate at which conviction is accrued or lost from a proposal\\n     * @param _maxRatio Proposal threshold parameter\\n     * @param _weight Proposal threshold parameter\\n     * @param _minThresholdStakePercentage The minimum percent of stake token max supply that is used for calculating\\n        conviction\\n     */\\n    function setConvictionCalculationSettings(\\n        uint256 _decay,\\n        uint256 _maxRatio,\\n        uint256 _weight,\\n        uint256 _minThresholdStakePercentage\\n    )\\n        external auth(UPDATE_SETTINGS_ROLE)\\n    {\\n        decay = _decay;\\n        maxRatio = _maxRatio;\\n        weight = _weight;\\n        minThresholdStakePercentage = _minThresholdStakePercentage;\\n\\n        emit ConvictionSettingsChanged(_decay, _maxRatio, _weight, _minThresholdStakePercentage);\\n    }\\n\\n    /**\\n     * @notice Create signaling proposal `_title`\\n     * @param _title Title of the proposal\\n     * @param _link IPFS or HTTP link with proposal's description\\n     */\\n    function addSignalingProposal(string _title, bytes _link) external authP(CREATE_PROPOSALS_ROLE, arr(msg.sender)) {\\n        _addProposal(_title, _link, 0, false, address(0));\\n    }\\n\\n    /**\\n     * @notice Create proposal `_title` for `@tokenAmount((self.requestToken(): address), _requestedAmount)` to `_beneficiary`\\n     * @param _title Title of the proposal\\n     * @param _link IPFS or HTTP link with proposal's description\\n     * @param _requestedAmount Tokens requested\\n     * @param _stableRequestAmount Whether the requested amount is in the request token or the stable token, converted to the request token upon execution\\n     * @param _beneficiary Address that will receive payment\\n     */\\n    function addProposal(string _title, bytes _link, uint256 _requestedAmount, bool _stableRequestAmount, address _beneficiary)\\n        external authP(CREATE_PROPOSALS_ROLE, arr(msg.sender))\\n    {\\n        require(_requestedAmount > 0, ERROR_REQUESTED_AMOUNT_ZERO);\\n        require(_beneficiary != address(0), ERROR_NO_BENEFICIARY);\\n\\n        _addProposal(_title, _link, _requestedAmount, _stableRequestAmount, _beneficiary);\\n    }\\n\\n    /**\\n      * @notice Stake `@tokenAmount((self.stakeToken(): address), _amount)` on proposal #`_proposalId`\\n      * @param _proposalId Proposal id\\n      * @param _amount Amount of tokens staked\\n      */\\n    function stakeToProposal(uint256 _proposalId, uint256 _amount) external isInitialized {\\n        _stake(_proposalId, _amount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Stake all my `(self.stakeToken(): address).symbol(): string` tokens on proposal #`_proposalId`\\n     * @param _proposalId Proposal id\\n     */\\n    function stakeAllToProposal(uint256 _proposalId) external isInitialized {\\n        require(totalVoterStake[msg.sender] == 0, ERROR_STAKING_ALREADY_STAKED);\\n        _stake(_proposalId, stakeToken.balanceOf(msg.sender), msg.sender);\\n    }\\n\\n    /**\\n     * @notice Withdraw `@tokenAmount((self.stakeToken(): address), _amount)` previously staked on proposal #`_proposalId`\\n     * @param _proposalId Proposal id\\n     * @param _amount Amount of tokens withdrawn\\n     */\\n    function withdrawFromProposal(uint256 _proposalId, uint256 _amount) external isInitialized proposalExists(_proposalId) {\\n        _withdrawFromProposal(_proposalId, _amount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Withdraw all `(self.stakeToken(): address).symbol(): string` tokens previously staked on proposal #`_proposalId`\\n     * @param _proposalId Proposal id\\n     */\\n    function withdrawAllFromProposal(uint256 _proposalId) external isInitialized proposalExists(_proposalId) {\\n        _withdrawFromProposal(_proposalId, proposals[_proposalId].voterStake[msg.sender], msg.sender);\\n    }\\n\\n    /**\\n     * @notice Withdraw all callers stake from inactive proposals\\n     */\\n    function withdrawFromInactiveProposals() external isInitialized {\\n        _withdrawInactiveStakedTokens(uint256(-1), msg.sender);\\n    }\\n\\n    /**\\n     * @notice Execute proposal #`_proposalId`\\n     * @dev ...by sending `@tokenAmount((self.requestToken(): address), self.getPropoal(_proposalId): ([uint256], address, uint256, uint256, uint64, bool))` to `self.getPropoal(_proposalId): (uint256, [address], uint256, uint256, uint64, bool)`\\n     * @param _proposalId Proposal id\\n     */\\n    function executeProposal(uint256 _proposalId) external notPaused isInitialized proposalExists(_proposalId) {\\n        Proposal storage proposal = proposals[_proposalId];\\n\\n        require(_proposalId != ABSTAIN_PROPOSAL_ID, ERROR_CANNOT_EXECUTE_ABSTAIN_PROPOSAL);\\n        require(proposal.requestedAmount > 0, ERROR_CANNOT_EXECUTE_ZERO_VALUE_PROPOSAL);\\n        require(proposal.proposalStatus == ProposalStatus.Active, ERROR_PROPOSAL_NOT_ACTIVE);\\n\\n        _calculateAndSetConviction(proposal, proposal.stakedTokens);\\n        uint256 requestedAmount = _getRequestAmount(proposal);\\n        require(proposal.convictionLast > calculateThreshold(requestedAmount), ERROR_INSUFFICIENT_CONVICION);\\n\\n        proposal.proposalStatus = ProposalStatus.Executed;\\n        _closeDisputableAction(proposal.agreementActionId);\\n\\n        fundsManager.transfer(requestToken, proposal.beneficiary, requestedAmount);\\n\\n        emit ProposalExecuted(_proposalId, proposal.convictionLast);\\n    }\\n\\n    /**\\n     * @notice Cancel proposal #`_proposalId`\\n     * @param _proposalId Proposal id\\n     */\\n    function cancelProposal(uint256 _proposalId) external notPaused proposalExists(_proposalId) {\\n        Proposal storage proposal = proposals[_proposalId];\\n\\n        bool senderHasPermission = canPerform(msg.sender, CANCEL_PROPOSALS_ROLE, new uint256[](0));\\n        require(proposal.submitter == msg.sender || senderHasPermission, ERROR_SENDER_CANNOT_CANCEL);\\n        require(_proposalId != ABSTAIN_PROPOSAL_ID, ERROR_CANNOT_CANCEL_ABSTAIN_PROPOSAL);\\n        require(proposal.proposalStatus == ProposalStatus.Active, ERROR_PROPOSAL_NOT_ACTIVE);\\n\\n        proposal.proposalStatus = ProposalStatus.Cancelled;\\n        _closeDisputableAction(proposal.agreementActionId);\\n\\n        emit ProposalCancelled(_proposalId);\\n    }\\n\\n    /**\\n     * @dev Get proposal details\\n     * @param _proposalId Proposal id\\n     * @return Requested amount\\n     * @return If requested in stable amount\\n     * @return Beneficiary address\\n     * @return Current total stake of tokens on this proposal\\n     * @return Conviction this proposal had last time calculateAndSetConviction was called\\n     * @return Block when calculateAndSetConviction was called\\n     * @return True if proposal has already been executed\\n     * @return AgreementActionId assigned by the Agreements app\\n     * @return ProposalStatus defining the state of the proposal\\n     * @return Submitter of the proposal\\n     */\\n    function getProposal(uint256 _proposalId) external view returns (\\n        uint256 requestedAmount,\\n        bool stableRequestAmount,\\n        address beneficiary,\\n        uint256 stakedTokens,\\n        uint256 convictionLast,\\n        uint64 blockLast,\\n        uint256 agreementActionId,\\n        ProposalStatus proposalStatus,\\n        address submitter,\\n        uint256 threshold\\n    )\\n    {\\n        Proposal storage proposal = proposals[_proposalId];\\n        threshold = proposal.requestedAmount == 0 ? 0 : calculateThreshold(_getRequestAmount(proposal));\\n        return (\\n            proposal.requestedAmount,\\n            proposal.stableRequestAmount,\\n            proposal.beneficiary,\\n            proposal.stakedTokens,\\n            proposal.convictionLast,\\n            proposal.blockLast,\\n            proposal.agreementActionId,\\n            proposal.proposalStatus,\\n            proposal.submitter,\\n            threshold\\n        );\\n    }\\n\\n    /**\\n     * @notice Get stake of voter `_voter` on proposal #`_proposalId`\\n     * @param _proposalId Proposal id\\n     * @param _voter Voter address\\n     * @return Proposal voter stake\\n     */\\n    function getProposalVoterStake(uint256 _proposalId, address _voter) external view returns (uint256) {\\n        return proposals[_proposalId].voterStake[_voter];\\n    }\\n\\n    /**\\n     * @notice Get the total stake of voter `_voter` on all proposals\\n     * @param _voter Voter address\\n     * @return Total voter stake\\n     */\\n    function getTotalVoterStake(address _voter) external view returns (uint256) {\\n        return totalVoterStake[_voter];\\n    }\\n\\n    /**\\n     * @notice Get all proposal ID's voter `_voter` has currently staked to\\n     * @param _voter Voter address\\n     * @return Voter proposals\\n     */\\n    function getVoterStakedProposals(address _voter) external view returns (uint256[]) {\\n        return voterStakedProposals[_voter];\\n    }\\n\\n    /**\\n    * @dev IDisputable interface conformance\\n    */\\n    function canChallenge(uint256 _proposalId) external view returns (bool) {\\n        return proposals[_proposalId].proposalStatus == ProposalStatus.Active && !contractPaused;\\n    }\\n\\n    /**\\n    * @dev IDisputable interface conformance\\n    */\\n    function canClose(uint256 _proposalId) external view returns (bool) {\\n        Proposal storage proposal = proposals[_proposalId];\\n\\n        return proposal.proposalStatus == ProposalStatus.Executed\\n            || proposal.proposalStatus == ProposalStatus.Cancelled;\\n    }\\n\\n    /**\\n     * @dev Conviction formula: a^t * y(0) + x * (1 - a^t) / (1 - a)\\n     * Solidity implementation: y = (2^128 * a^t * y0 + x * D * (2^128 - 2^128 * a^t) / (D - aD) + 2^127) / 2^128\\n     * @param _timePassed Number of blocks since last conviction record\\n     * @param _lastConv Last conviction record\\n     * @param _oldAmount Amount of tokens staked until now\\n     * @return Current conviction\\n     */\\n    function calculateConviction(uint64 _timePassed, uint256 _lastConv, uint256 _oldAmount) public view returns(uint256) {\\n        uint256 t = uint256(_timePassed);\\n        // atTWO_128 = 2^128 * a^t\\n        uint256 atTWO_128 = _pow((decay << 128).div(D), t);\\n        // solium-disable-previous-line\\n        // conviction = (atTWO_128 * _lastConv + _oldAmount * D * (2^128 - atTWO_128) / (D - aD) + 2^127) / 2^128\\n        return (atTWO_128.mul(_lastConv).add(_oldAmount.mul(D).mul(TWO_128.sub(atTWO_128)).div(D - decay))).add(TWO_127) >> 128;\\n    }\\n\\n    /**\\n     * @dev Formula: \\u03c1 * totalStaked / (1 - a) / (\\u03b2 - requestedAmount / total)**2\\n     * For the Solidity implementation we amplify \\u03c1 and \\u03b2 and simplify the formula:\\n     * weight = \\u03c1 * D\\n     * maxRatio = \\u03b2 * D\\n     * decay = a * D\\n     * threshold = weight * totalStaked * D ** 2 * funds ** 2 / (D - decay) / (maxRatio * funds - requestedAmount * D) ** 2\\n     * @param _requestedAmount Requested amount of tokens on certain proposal\\n     * @return Threshold a proposal's conviction should surpass in order to be able to\\n     * executed it.\\n     */\\n    function calculateThreshold(uint256 _requestedAmount) public view returns (uint256 _threshold) {\\n        uint256 funds = fundsManager.balance(requestToken);\\n        require(maxRatio.mul(funds) > _requestedAmount.mul(D), ERROR_AMOUNT_OVER_MAX_RATIO);\\n        // denom = maxRatio * 2 ** 64 / D  - requestedAmount * 2 ** 64 / funds\\n        uint256 denom = (maxRatio << 64).div(D).sub((_requestedAmount << 64).div(funds));\\n        // _threshold = (weight * 2 ** 128 / D) / (denom ** 2 / 2 ** 64) * totalStaked * D / 2 ** 128\\n        _threshold = ((weight << 128).div(D).div(denom.mul(denom) >> 64)).mul(D).div(D.sub(decay)).mul(_totalStaked()) >> 64;\\n    }\\n\\n    function _totalStaked() internal view returns (uint256) {\\n        uint256 minTotalStake = (stakeToken.totalSupply().mul(minThresholdStakePercentage)).div(ONE_HUNDRED_PERCENT);\\n        return totalStaked < minTotalStake ? minTotalStake : totalStaked;\\n    }\\n\\n    function _getRequestAmount(Proposal storage proposal) internal view returns (uint256) {\\n        return proposal.stableRequestAmount ?\\n            stableTokenOracle.consult(stableToken, proposal.requestedAmount, requestToken) : proposal.requestedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal implementation of the `onDisputableActionChallenged` hook\\n     * @param _proposalId Identification number of the disputable action to be challenged\\n     */\\n    function _onDisputableActionChallenged(uint256 _proposalId, uint256  _challengeId, address /* _challenger */) internal {\\n        Proposal storage proposal = proposals[_proposalId];\\n        proposal.proposalStatus = ProposalStatus.Paused;\\n\\n        emit ProposalPaused(_proposalId, _challengeId);\\n    }\\n\\n    /**\\n    * @dev Internal implementation of the `onDisputableActionRejected` hook\\n    * @param _proposalId Identification number of the disputable action to be rejected\\n    */\\n    function _onDisputableActionRejected(uint256 _proposalId) internal {\\n        Proposal storage proposal = proposals[_proposalId];\\n        proposal.proposalStatus = ProposalStatus.Cancelled;\\n\\n        emit ProposalRejected(_proposalId);\\n    }\\n\\n    /**\\n    * @dev Internal implementation of the `onDisputableActionAllowed` hook\\n    * @param _proposalId Identification number of the disputable action to be allowed\\n    */\\n    function _onDisputableActionAllowed(uint256 _proposalId) internal {\\n        Proposal storage proposal = proposals[_proposalId];\\n        proposal.proposalStatus = ProposalStatus.Active;\\n\\n        emit ProposalResumed(_proposalId);\\n    }\\n\\n    /**\\n    * @dev Internal implementation of the `onDisputableActionVoided` hook\\n    * @param _proposalId Identification number of the disputable action to be voided\\n    */\\n    function _onDisputableActionVoided(uint256 _proposalId) internal {\\n        _onDisputableActionAllowed(_proposalId);\\n    }\\n\\n    /**\\n     * @dev Overrides TokenManagerHook's `_onRegisterAsHook`\\n     */\\n    function _onRegisterAsHook(address _tokenManager, uint256 _hookId, address _token) internal {\\n        require(_token == address(stakeToken), ERROR_INCORRECT_TOKEN_MANAGER_HOOK);\\n    }\\n\\n    /**\\n     * @dev Overrides TokenManagerHook's `_onTransfer`\\n     */\\n    function _onTransfer(address _from, address _to, uint256 _amount) internal returns (bool) {\\n        if (_from == 0x0) {\\n            return true; // Do nothing on token mintings\\n        }\\n\\n        uint256 newBalance = stakeToken.balanceOf(_from).sub(_amount);\\n        if (newBalance < totalVoterStake[_from]) {\\n            _withdrawInactiveStakedTokens(totalVoterStake[_from].sub(newBalance), _from);\\n        }\\n\\n        if (newBalance < totalVoterStake[_from]) {\\n            _withdrawActiveStakedTokens(totalVoterStake[_from].sub(newBalance), _from);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * Multiply _a by _b / 2^128.  Parameter _a should be less than or equal to\\n     * 2^128 and parameter _b should be less than 2^128.\\n     * @param _a left argument\\n     * @param _b right argument\\n     * @return _a * _b / 2^128\\n     */\\n    function _mul(uint256 _a, uint256 _b) internal pure returns (uint256 _result) {\\n        require(_a <= TWO_128, \\\"_a should be less than or equal to 2^128\\\");\\n        require(_b < TWO_128, \\\"_b should be less than 2^128\\\");\\n        return _a.mul(_b).add(TWO_127) >> 128;\\n    }\\n\\n    /**\\n     * Calculate (_a / 2^128)^_b * 2^128.  Parameter _a should be less than 2^128.\\n     *\\n     * @param _a left argument\\n     * @param _b right argument\\n     * @return (_a / 2^128)^_b * 2^128\\n     */\\n    function _pow(uint256 _a, uint256 _b) internal pure returns (uint256 _result) {\\n        require(_a < TWO_128, \\\"_a should be less than 2^128\\\");\\n        uint256 a = _a;\\n        uint256 b = _b;\\n        _result = TWO_128;\\n        while (b > 0) {\\n            if (b & 1 == 0) {\\n                a = _mul(a, a);\\n                b >>= 1;\\n            } else {\\n                _result = _mul(_result, a);\\n                b -= 1;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculate conviction and store it on the proposal\\n     * @param _proposal Proposal\\n     * @param _oldStaked Amount of tokens staked on a proposal until now\\n     */\\n    function _calculateAndSetConviction(Proposal storage _proposal, uint256 _oldStaked) internal {\\n        uint64 blockNumber = getBlockNumber64();\\n        assert(_proposal.blockLast <= blockNumber);\\n        if (_proposal.blockLast == blockNumber) {\\n            return; // Conviction already stored\\n        }\\n        // calculateConviction and store it\\n        uint256 conviction = calculateConviction(\\n            blockNumber - _proposal.blockLast, // we assert it doesn't overflow above\\n            _proposal.convictionLast,\\n            _oldStaked\\n        );\\n        _proposal.blockLast = blockNumber;\\n        _proposal.convictionLast = conviction;\\n    }\\n\\n    function _addProposal(string _title, bytes _link, uint256 _requestedAmount, bool _stableRequestAmount, address _beneficiary)\\n        internal notPaused\\n    {\\n        uint256 agreementActionId = _registerDisputableAction(proposalCounter, _link, msg.sender);\\n        proposals[proposalCounter] = Proposal(\\n            _requestedAmount,\\n            _stableRequestAmount,\\n            _beneficiary,\\n            0,\\n            0,\\n            0,\\n            agreementActionId,\\n            ProposalStatus.Active,\\n            msg.sender\\n        );\\n\\n        emit ProposalAdded(msg.sender, proposalCounter, agreementActionId, _title, _link, _requestedAmount, _stableRequestAmount, _beneficiary);\\n        proposalCounter++;\\n    }\\n\\n    /**\\n     * @dev Stake an amount of tokens on a proposal\\n     * @param _proposalId Proposal id\\n     * @param _amount Amount of staked tokens\\n     * @param _from Account from which we stake\\n     */\\n    function _stake(uint256 _proposalId, uint256 _amount, address _from) internal notPaused proposalExists(_proposalId) {\\n        require(getTokenManager() != address(0), ERROR_NO_TOKEN_MANAGER_SET);\\n\\n        Proposal storage proposal = proposals[_proposalId];\\n        require(_amount > 0, ERROR_AMOUNT_CAN_NOT_BE_ZERO);\\n        require(proposal.proposalStatus == ProposalStatus.Active || proposal.proposalStatus == ProposalStatus.Paused,\\n            ERROR_INCORRECT_PROPOSAL_STATUS);\\n\\n        uint256 unstakedAmount = stakeToken.balanceOf(_from).sub(totalVoterStake[_from]);\\n        if (_amount > unstakedAmount) {\\n            _withdrawInactiveStakedTokens(_amount.sub(unstakedAmount), _from);\\n        }\\n\\n        require(totalVoterStake[_from].add(_amount) <= stakeToken.balanceOf(_from), ERROR_STAKING_MORE_THAN_AVAILABLE);\\n\\n        uint256 previousStake = proposal.stakedTokens;\\n        proposal.stakedTokens = proposal.stakedTokens.add(_amount);\\n        proposal.voterStake[_from] = proposal.voterStake[_from].add(_amount);\\n        totalVoterStake[_from] = totalVoterStake[_from].add(_amount);\\n        totalStaked = totalStaked.add(_amount);\\n\\n        if (proposal.blockLast == 0) {\\n            proposal.blockLast = getBlockNumber64();\\n        } else {\\n            _calculateAndSetConviction(proposal, previousStake);\\n        }\\n\\n        _updateVoterStakedProposals(_proposalId, _from);\\n\\n        emit StakeAdded(_from, _proposalId, _amount, proposal.voterStake[_from], proposal.stakedTokens, proposal.convictionLast);\\n    }\\n\\n    function _updateVoterStakedProposals(uint256 _proposalId, address _submitter) internal {\\n        uint256[] storage voterStakedProposalsArray = voterStakedProposals[_submitter];\\n\\n        if (!voterStakedProposalsArray.contains(_proposalId)) {\\n            require(voterStakedProposalsArray.length < MAX_STAKED_PROPOSALS, ERROR_MAX_PROPOSALS_REACHED);\\n            voterStakedProposalsArray.push(_proposalId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraw staked tokens from executed proposals until a target amount is reached.\\n     * @param _targetAmount Target at which to stop withdrawing tokens\\n     * @param _from Account to withdraw from\\n     */\\n    function _withdrawInactiveStakedTokens(uint256 _targetAmount, address _from) internal {\\n        uint256 i = 0;\\n        uint256 toWithdraw;\\n        uint256 withdrawnAmount = 0;\\n        uint256[] memory voterStakedProposalsCopy = voterStakedProposals[_from];\\n\\n        while (i < voterStakedProposalsCopy.length && withdrawnAmount < _targetAmount) {\\n            uint256 proposalId = voterStakedProposalsCopy[i];\\n            Proposal storage proposal = proposals[proposalId];\\n\\n            if (proposal.proposalStatus == ProposalStatus.Executed || proposal.proposalStatus == ProposalStatus.Cancelled) {\\n                toWithdraw = proposal.voterStake[_from];\\n                if (toWithdraw > 0) {\\n                    _withdrawFromProposal(proposalId, toWithdraw, _from);\\n                    withdrawnAmount = withdrawnAmount.add(toWithdraw);\\n                }\\n            }\\n            i++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraw staked tokens from active proposals until a target amount is reached.\\n     *      Assumes there are no inactive staked proposals, to save gas.\\n     * @param _targetAmount Target at which to stop withdrawing tokens\\n     * @param _from Account to withdraw from\\n     */\\n    function _withdrawActiveStakedTokens(uint256 _targetAmount, address _from) internal {\\n        uint256 i = 0;\\n        uint256 toWithdraw;\\n        uint256 withdrawnAmount = 0;\\n        uint256[] memory voterStakedProposalsCopy = voterStakedProposals[_from];\\n\\n        if (voterStakedProposals[_from].contains(ABSTAIN_PROPOSAL_ID)) {\\n            toWithdraw = Math.min256(_targetAmount, proposals[ABSTAIN_PROPOSAL_ID].voterStake[_from]);\\n            if (toWithdraw > 0) {\\n                _withdrawFromProposal(ABSTAIN_PROPOSAL_ID, toWithdraw, _from);\\n                withdrawnAmount = withdrawnAmount.add(toWithdraw);\\n            }\\n        }\\n\\n        // We reset this variable as _withdrawFromProposal can update voterStakedProposals\\n        voterStakedProposalsCopy = voterStakedProposals[_from];\\n\\n        while (i < voterStakedProposalsCopy.length && withdrawnAmount < _targetAmount) {\\n            uint256 proposalId = voterStakedProposalsCopy[i];\\n            Proposal storage proposal = proposals[proposalId];\\n\\n            // For active proposals, we only subtract the needed amount to reach the target\\n            toWithdraw = Math.min256(_targetAmount.sub(withdrawnAmount), proposal.voterStake[_from]);\\n            if (toWithdraw > 0) {\\n                _withdrawFromProposal(proposalId, toWithdraw, _from);\\n                withdrawnAmount = withdrawnAmount.add(toWithdraw);\\n            }\\n            i++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraw an amount of tokens from a proposal\\n     * @param _proposalId Proposal id\\n     * @param _amount Amount of withdrawn tokens\\n     * @param _from Account to withdraw from\\n     */\\n    function _withdrawFromProposal(uint256 _proposalId, uint256 _amount, address _from) internal {\\n        Proposal storage proposal = proposals[_proposalId];\\n        require(proposal.voterStake[_from] >= _amount, ERROR_WITHDRAW_MORE_THAN_STAKED);\\n        require(_amount > 0, ERROR_AMOUNT_CAN_NOT_BE_ZERO);\\n\\n        uint256 previousStake = proposal.stakedTokens;\\n        proposal.stakedTokens = proposal.stakedTokens.sub(_amount);\\n        proposal.voterStake[_from] = proposal.voterStake[_from].sub(_amount);\\n        totalVoterStake[_from] = totalVoterStake[_from].sub(_amount);\\n        totalStaked = totalStaked.sub(_amount);\\n\\n        if (proposal.voterStake[_from] == 0) {\\n            voterStakedProposals[_from].deleteItem(_proposalId);\\n        }\\n\\n        if (proposal.proposalStatus == ProposalStatus.Active || proposal.proposalStatus == ProposalStatus.Paused) {\\n            _calculateAndSetConviction(proposal, previousStake);\\n        }\\n\\n        emit StakeWithdrawn(_from, _proposalId, _amount, proposal.voterStake[_from], proposal.stakedTokens, proposal.convictionLast);\\n    }\\n}\\n\",\"keccak256\":\"0xff31f67305b2af60c5718df9996ba266ac9ab5cea1bc3bd71c510a401ce329dc\"},\"contracts/lib/ArrayUtils.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary ArrayUtils {\\n    function deleteItem(uint256[] storage self, uint256 item) internal returns (bool) {\\n        uint256 length = self.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (self[i] == item) {\\n                uint256 newLength = self.length - 1;\\n                if (i != newLength) {\\n                    self[i] = self[newLength];\\n                }\\n\\n                delete self[newLength];\\n                self.length = newLength;\\n\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function contains(uint256[] storage self, uint256 item) internal returns (bool) {\\n        for (uint256 i = 0; i < self.length; i++) {\\n            if (self[i] == item) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x21f67456360cf29dcf895639dcec17b3fd06c1cc4296a57f3cf96a2ebf185397\"},\"contracts/lib/IPriceOracle.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\ncontract IPriceOracle {\\n    function consult(address tokenIn, uint amountIn, address tokenOut) external view returns (uint amountOut);\\n}\\n\",\"keccak256\":\"0x3c5e12cfb65eb861d0ee4e42b08e623ed1d8119e7a1dc7ec85bd6c2b3dc621f9\"}},\"version\":1}",
  "bytecode": "0x6080604052620000176401000000006200001d810204565b6200023b565b6200003064010000000062000125810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a45440000000000000000602082015290156200010c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620000d0578181015183820152602001620000b6565b50505050905090810190601f168015620000fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506200012360001964010000000062000154810204565b565b60006200014f60008051602062005ec18339815191526401000000006200421b6200023382021704565b905090565b6200016764010000000062000125810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a454400000000000000006020820152901562000206576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015620000d0578181015183820152602001620000b6565b506200023060008051602062005ec183398151915282640100000000620042176200023782021704565b50565b5490565b9055565b615c76806200024b6000396000f3006080604052600436106102fd5763ffffffff60e060020a60003504166301ffc9a781146103025780630649d6dc146103385780630803fac0146103695780630c0512e91461037e5780630d116652146103a55780630d61b519146103ba5780630f529ba2146103d45780631522eb43146103e95780631df67d2f146103fe5780631e9ae2f4146104165780632914b9bd1461043757806332f0a3b514610490578063406244d8146104a55780634570c175146104d65780634a393149146104fd5780634d4eb6ce146105275780634d7ec6281461054b5780634ef4d13f146105605780634f629fbb146105a05780634fb3cbbc146105b557806351ed6a30146105cd57806354fac919146105e257806359a5db8b146105f75780636322b5131461060f578063649c649c146106555780636ab6802b146106705780636ae1e5411461068857806376365af7146106f957806376740b5b1461070e5780637ad267b6146107265780637e7db6e11461073e5780637f439ce01461075f57806380afdea814610786578063817b1cd21461079b5780638a67456a146107b05780638b3dd749146107c55780638f911dca146107da57806399c7e2e8146107ef5780639d4941d8146108105780639d99856614610831578063a1658fad14610846578063a1aab33f146108ad578063a479e508146108c2578063a9d75b2b146108d7578063ab97d59d146108ec578063b086306314610901578063bca60cf514610919578063c2239b241461092e578063c35ac76d14610952578063c7f758a814610973578063cbdda5e114610a28578063d35424fa14610a54578063d4aae0c414610a69578063da682aeb14610a7e578063dac6126014610aa8578063db2d878c14610acf578063dcdf8e3914610ae4578063dd0081c714610af9578063ddc90e7e14610b0e578063de4796ed14610b2f578063e0a8f6f514610b44578063e0dd2c3814610b5c578063e272b89214610b80578063eeabf67e14610b9a578063f31bbd7f14610baf578063f83a151514610bc4578063fc37005114610bdc575b600080fd5b34801561030e57600080fd5b50610324600160e060020a031960043516610bf7565b604080519115158252519081900360200190f35b34801561034457600080fd5b5061034d610c26565b60408051600160a060020a039092168252519081900360200190f35b34801561037557600080fd5b50610324610c35565b34801561038a57600080fd5b50610393610c5f565b60408051918252519081900360200190f35b3480156103b157600080fd5b5061034d610c65565b3480156103c657600080fd5b506103d2600435610c74565b005b3480156103e057600080fd5b506103936111bd565b3480156103f557600080fd5b506103936111c4565b34801561040a57600080fd5b506103d26004356111c9565b34801561042257600080fd5b506103d2600160a060020a0360043516611367565b34801561044357600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261034d9436949293602493928401919081908401838280828437509497506115039650505050505050565b34801561049c57600080fd5b5061034d6115e9565b3480156104b157600080fd5b506104ba611662565b604080516001604060020a039092168252519081900360200190f35b3480156104e257600080fd5b506103d2600160a060020a0360043581169060243516611667565b34801561050957600080fd5b50610324600160a060020a036004358116906024351660443561177a565b34801561053357600080fd5b506103d2600435600160a060020a03602435166118c1565b34801561055757600080fd5b5061034d611a33565b34801561056c57600080fd5b506103d260246004803582810192908201359181359182019101356044356064351515600160a060020a0360843516611a42565b3480156105ac57600080fd5b50610393611c5e565b3480156105c157600080fd5b506103d2600435611c70565b3480156105d957600080fd5b5061034d611db8565b3480156105ee57600080fd5b50610393611dc7565b34801561060357600080fd5b50610393600435611dcd565b34801561061b57600080fd5b506103d2600160a060020a036004358116906024358116906044358116906064358116906084351660a43560c43560e43561010435611fd3565b34801561066157600080fd5b506103d2600435602435612321565b34801561067c57600080fd5b5061032460043561244c565b34801561069457600080fd5b506106a9600160a060020a0360043516612484565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156106e55781810151838201526020016106cd565b505050509050019250505060405180910390f35b34801561070557600080fd5b506103936124f0565b34801561071a57600080fd5b506103246004356124f6565b34801561073257600080fd5b506103d2600435612540565b34801561074a57600080fd5b50610324600160a060020a03600435166125d3565b34801561076b57600080fd5b506103d2600435602435600160a060020a03604435166125d9565b34801561079257600080fd5b5061039361266e565b3480156107a757600080fd5b5061039361269e565b3480156107bc57600080fd5b506103246126a4565b3480156107d157600080fd5b506103936126ad565b3480156107e657600080fd5b506103936126c6565b3480156107fb57600080fd5b506103d2600160a060020a03600435166126ea565b34801561081c57600080fd5b506103d2600160a060020a03600435166127e2565b34801561083d57600080fd5b506103d2612a69565b34801561085257600080fd5b506040805160206004604435818101358381028086018501909652808552610324958335600160a060020a0316956024803596369695606495939492019291829185019084908082843750949750612af49650505050505050565b3480156108b957600080fd5b50610393612c44565b3480156108ce57600080fd5b5061034d612c4a565b3480156108e357600080fd5b5061034d612ce9565b3480156108f857600080fd5b5061034d612cf8565b34801561090d57600080fd5b506103d2600435612d11565b34801561092557600080fd5b5061034d612da4565b34801561093a57600080fd5b506103d2600435600160a060020a0360243516612dae565b34801561095e57600080fd5b506103d2600435602435604435606435612ecb565b34801561097f57600080fd5b5061098b600435612fd0565b604051808b81526020018a15151515815260200189600160a060020a0316600160a060020a03168152602001888152602001878152602001866001604060020a03166001604060020a031681526020018581526020018460038111156109ed57fe5b60ff16815260200183600160a060020a0316600160a060020a031681526020018281526020019a505050505050505050505060405180910390f35b348015610a3457600080fd5b506103d260246004803582810192908201359181359182019101356130b6565b348015610a6057600080fd5b506103936131c4565b348015610a7557600080fd5b5061034d6131d6565b348015610a8a57600080fd5b50610324600160a060020a0360043581169060243516604435613201565b348015610ab457600080fd5b506103936001604060020a0360043516602435604435613320565b348015610adb57600080fd5b506103936133ca565b348015610af057600080fd5b506103936133d0565b348015610b0557600080fd5b506103936133e2565b348015610b1a57600080fd5b50610393600160a060020a03600435166133ee565b348015610b3b57600080fd5b50610324613409565b348015610b5057600080fd5b506103d260043561341c565b348015610b6857600080fd5b50610393600435600160a060020a036024351661378e565b348015610b8c57600080fd5b506103d260043515156137ba565b348015610ba657600080fd5b506103936138aa565b348015610bbb57600080fd5b506103936138bc565b348015610bd057600080fd5b506103d26004356138ce565b348015610be857600080fd5b506103d2600435602435613961565b6000610c02826139e9565b80610c205750600160e060020a0319821660e060020a63f3d3bb5102145b92915050565b600354600160a060020a031681565b600080610c406126ad565b90508015801590610c58575080610c55613a14565b10155b91505b5090565b60095481565b600454600160a060020a031681565b600b546040805180820190915260128152600080516020615beb833981519152602082015260009182919060ff1615610d2e5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610cf3578181015183820152602001610cdb565b50505050905090810190601f168015610d205780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610d37610c35565b6040805180820190915260148152600080516020615c0b8339815191526020820152901515610dab5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50828060011480610dd557506000818152600c6020526040902060080154600160a060020a031615155b60408051808201909152601a8152600080516020615c2b8339815191526020820152901515610e495760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50600c600085815260200190815260200160002092506001841415606060405190810160405280602281526020017f43565f43414e4e4f545f455845435554455f4142535441494e5f50524f504f53815260200160f260020a61105302815250901515610efb5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50825460408051606081018252602581527f43565f43414e4e4f545f455845435554455f5a45524f5f56414c55455f50524f602082015260da60020a641413d4d053029181019190915290600010610f985760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506000600684015460ff166003811115610fae57fe5b6040805180820190915260168152605060020a7543565f50524f504f53414c5f4e4f545f414354495645026020820152911461102f5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5061103e838460020154613a18565b61104783613aaa565b915061105282611dcd565b60038401546040805180820190915260198152603960020a7821ab2fa4a729aaa32324a1a4a2a72a2fa1a7a72b24a1a4a7a702602082015291106110db5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5060068301805460ff1916600317905560058301546110f990613b29565b6004805460018054908601546040805160e360020a6317d57599028152600160a060020a039384169581019590955261010090910482166024850152604484018690525191169163beabacc891606480830192600092919082900301818387803b15801561116657600080fd5b505af115801561117a573d6000803e3d6000fd5b505050600384015460408051918252518692507ff758fc91e01b00ea6b4a6138756f7f28e021f9bf21db6dbf8c36c88eb737257a9181900360200190a250505050565b6298968081565b600181565b6111d1610c35565b6040805180820190915260148152600080516020615c0b83398151915260208201529015156112455760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50336000908152600d602090815260409182902054825180840190935260198352603a60020a7810d597d4d51052d25391d7d053149150511657d4d51052d1510291830191909152156112dd5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50600080546040805160e060020a6370a082310281523360048201529051611364938593600160a060020a0316926370a082319260248083019360209383900390910190829087803b15801561133257600080fd5b505af1158015611346573d6000803e3d6000fd5b505050506040513d602081101561135c57600080fd5b505133613b92565b50565b604080516000808252602082019092526000805160206159eb833981519152906113979033908390855b50612af4565b60408051808201909152600f8152600080516020615a0b833981519152602082015290151561140b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506114146141fe565b9150600160a060020a0382161580156114355750600160a060020a03831615155b604080519081016040528060208152602001600080516020615b4b8339815191528152509015156114ab5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506114ca600080516020615b8b8339815191528463ffffffff61421716565b604051600160a060020a038416907f64d4a120bf365888d0b3f10e4d7deb8415919eaad62ee6fb5f5619082d6f641890600090a2505050565b600061150d612c4a565b600160a060020a03166304bf2a7f836040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561156b578181015183820152602001611553565b50505050905090810190601f1680156115985780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1580156115b757600080fd5b505af11580156115cb573d6000803e3d6000fd5b505050506040513d60208110156115e157600080fd5b505192915050565b60006115f36131d6565b600160a060020a03166332f0a3b56040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561163057600080fd5b505af1158015611644573d6000803e3d6000fd5b505050506040513d602081101561165a57600080fd5b505190505b90565b600a81565b60408051600080825260208201909252600080516020615b2b83398151915291611695913391849190611391565b60408051808201909152600f8152600080516020615a0b83398151915260208201529015156117095760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5060038054600160a060020a03808616600160a060020a031992831681179093556002805491861691909216811790915560408051928352602083019190915280517f5c6eba356f6aa4b8375538c6b9960ec788c30ef816e3ba1d5c9f7b5aa01c8bd89281900390910190a1505050565b600033611785612cf8565b600160a060020a0316146117e4576040805160e560020a62461bcd0281526020600482015260276024820152600080516020615b6b833981519152604482015260c960020a6626b0b730b3b2b902606482015290519081900360840190fd5b6117fb600080516020615bab83398151915261421b565b6040805180820190915260198152600080516020615aab8339815191526020820152901561186e5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5061188e600080516020615bab833981519152600163ffffffff61421716565b61189984848461421f565b90506118ba600080516020615bab833981519152600063ffffffff61421716565b9392505050565b6118d8600080516020615bab83398151915261421b565b6040805180820190915260198152600080516020615aab8339815191526020820152901561194b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5061196b600080516020615bab833981519152600163ffffffff61421716565b6000611975612cf8565b600160a060020a0316146119e7576040805160e560020a62461bcd02815260206004820152602860248201527f486f6f6b20616c7265616479207265676973746572656420627920546f6b656e604482015260c160020a671026b0b730b3b2b902606482015290519081900360840190fd5b611a05600080516020615a8b8339815191523363ffffffff61421716565b611a10338383614344565b611a2f600080516020615bab833981519152600063ffffffff61421716565b5050565b600154600160a060020a031681565b600080516020615acb833981519152611a5a336143d9565b611a65338383612af4565b60408051808201909152600f8152600080516020615a0b8339815191526020820152901515611ad95760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506040805180820190915260188152604060020a7743565f5245515545535445445f414d4f554e545f5a45524f02602082015260008611611b5f5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506040805180820190915260118152607860020a7043565f4e4f5f42454e4546494349415259026020820152600160a060020a0384161515611be65760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50611c5389898080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8f018190048102820181019092528d815294508d93508c925082915084018382808284378201915050505050508787876143ed565b505050505050505050565b600080516020615b2b83398151915281565b611c78610c35565b6040805180820190915260148152600080516020615c0b8339815191526020820152901515611cec5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50808060011480611d1657506000818152600c6020526040902060080154600160a060020a031615155b60408051808201909152601a8152600080516020615c2b8339815191526020820152901515611d8a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506000828152600c6020908152604080832033808552600790910190925290912054611a2f918491906146e6565b600054600160a060020a031681565b60055481565b600480546001546040805160e060020a63e3d670d7028152600160a060020a03928316948101949094525160009384938493169163e3d670d79160248082019260209290919082900301818787803b158015611e2857600080fd5b505af1158015611e3c573d6000803e3d6000fd5b505050506040513d6020811015611e5257600080fd5b50519150611e69846298968063ffffffff6149bf16565b600654611e7c908463ffffffff6149bf16565b6040805180820190915260188152604060020a7743565f414d4f554e545f4f5645525f4d41585f524154494f0260208201529110611eff5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50611f41611f19604060020a86028463ffffffff614a6d16565b600654611f3590604060020a026298968063ffffffff614a6d16565b9063ffffffff614b0016565b90506040611fc4611f50614b8c565b611fb8611f6b60055462989680614b0090919063ffffffff16565b611fac62989680611fb86040611f878a8063ffffffff6149bf16565b60075460029290920a900490611fac90608060020a026298968063ffffffff614a6d16565b9063ffffffff614a6d16565b9063ffffffff6149bf16565b9060020a900492505050919050565b611fdb6126ad565b6040805180820190915260188152604260020a771253925517d053149150511657d253925512505312569151026020820152901561205e5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506002600981905560008054600160a060020a0319908116600160a060020a038d81169190911783556001805483168d8316178155845483168c8316179094556003805483168b8316178155600480549093168a831617909255600588905560068790556007869055600885905560408051610120810182528481526020808201868152928201868152606083018781526080840188815260a0850189815260c086018a815260e087018b81526101008089018d90529b8d9052600c90965286517fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b5c90815597517fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b5d80549651909a16909b0261010060a860020a03199b151560ff19968716179b909b169a909a1790975590517fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b5e55517fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b5f5593517fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b6080546001604060020a039092166001604060020a031990921691909117905594517fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b615593517fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b6280549596929591949093919091169190849081111561227a57fe5b0217905550610100919091015160089091018054600160a060020a031916600160a060020a03909216919091179055604080516000818301819052606082018190526080820181905260a0808352601090830152608260020a6f10589cdd185a5b881c1c9bdc1bdcd85b0260c083015260e060208301819052820181905291516001918391600080516020615b0b83398151915291610120908290030190a4611c53614c43565b612329610c35565b6040805180820190915260148152600080516020615c0b833981519152602082015290151561239d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b508180600114806123c757506000818152600c6020526040902060080154600160a060020a031615155b60408051808201909152601a8152600080516020615c2b833981519152602082015290151561243b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506124478383336146e6565b505050565b6000806000838152600c602052604090206006015460ff16600381111561246f57fe5b148015610c20575050600b5460ff1615919050565b600160a060020a0381166000908152600e60209081526040918290208054835181840281018401909452808452606093928301828280156124e457602002820191906000526020600020905b8154815260200190600101908083116124d0575b50505050509050919050565b60065481565b6000818152600c602052604081206003600682015460ff16600381111561251957fe5b148061253757506002600682015460ff16600381111561253557fe5b145b91505b50919050565b336125496141fe565b600160a060020a0316146040805190810160405280601f8152602001600080516020615a2b8339815191528152509015156125c95760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5061136481614cf5565b50600190565b336125e26141fe565b600160a060020a0316146040805190810160405280601f8152602001600080516020615a2b8339815191528152509015156126625760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50612447838383614d3e565b60006126997fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b61421b565b905090565b600a5481565b600b5460ff1681565b6000612699600080516020615a4b83398151915261421b565b7fef025787d7cd1a96d9014b8dc7b44899b8c1350859fb9e1e05f5a546dd65158d81565b60408051600080825260208201909252600080516020615b2b83398151915291612718913391849190611391565b60408051808201909152600f8152600080516020615a0b833981519152602082015290151561278c5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5060048054600160a060020a038416600160a060020a0319909116811790915560408051918252517fe73ec16f0f6043487af9cb91eb14c278096f172773ad13f392cd1f9507c9a8ee9181900360200190a15050565b60008060006127f0846125d3565b6040805180820190915260128152607260020a71149150d3d5915497d11254d0531313d5d15102602082015290151561286e5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506128776115e9565b925061288283614d91565b60408051808201909152601a81527f5245434f5645525f5641554c545f4e4f545f434f4e545241435400000000000060208201529015156129085760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50600160a060020a03841615156129595760405130319250600160a060020a0384169083156108fc029084906000818181858888f19350505050158015612953573d6000803e3d6000fd5b50612a18565b5082612974600160a060020a0382163063ffffffff614db716565b9150612990600160a060020a038216848463ffffffff614ea516565b60408051808201909152601d81527f5245434f5645525f544f4b454e5f5452414e534645525f4641494c45440000006020820152901515612a165760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b505b83600160a060020a031683600160a060020a03167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b612a71610c35565b6040805180820190915260148152600080516020615c0b8339815191526020820152901515612ae55760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50612af260001933614f05565b565b600080612aff610c35565b1515612b0e5760009150612c3c565b612b166131d6565b9050600160a060020a0381161515612b315760009150612c3c565b80600160a060020a031663fdef9106863087612b4c88615043565b60405160e060020a63ffffffff8716028152600160a060020a03808616600483019081529085166024830152604482018490526080606483019081528351608484015283519192909160a490910190602085019080838360005b83811015612bbe578181015183820152602001612ba6565b50505050905090810190601f168015612beb5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015612c0d57600080fd5b505af1158015612c21573d6000803e3d6000fd5b505050506040513d6020811015612c3757600080fd5b505191505b509392505050565b60075481565b600080612c556131d6565b6040805160e360020a6317c0177b0281527fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb60048201527fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6160248201529051600160a060020a03929092169163be00bbd8916044808201926020929091908290030181600087803b1580156115b757600080fd5b600254600160a060020a031681565b6000612699600080516020615a8b83398151915261421b565b33612d1a6141fe565b600160a060020a0316146040805190810160405280601f8152602001600080516020615a2b833981519152815250901515612d9a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506113648161504d565b60006126996141fe565b33612db7612cf8565b600160a060020a031614612e16576040805160e560020a62461bcd0281526020600482015260276024820152600080516020615b6b833981519152604482015260c960020a6626b0b730b3b2b902606482015290519081900360840190fd5b612e2d600080516020615bab83398151915261421b565b6040805180820190915260198152600080516020615aab83398151915260208201529015612ea05760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50612ec0600080516020615bab833981519152600163ffffffff61421716565b611a10338383612447565b60408051600080825260208201909252600080516020615b2b83398151915291612ef9913391849190611391565b60408051808201909152600f8152600080516020615a0b8339815191526020820152901515612f6d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50600585905560068490556007839055600882905560408051868152602081018690528082018590526060810184905290517fab0e1d16e026a71973fa1c1862074f152ee6c430f36fce58005928c3bb1588369181900360800190a15050505050565b6000818152600c602052604081208054829182918291829182918291829182918291901561300e5761300961300482613aaa565b611dcd565b613011565b60005b915080600001548160010160009054906101000a900460ff168260010160019054906101000a9004600160a060020a0316836002015484600301548560040160009054906101000a90046001604060020a031686600501548760060160009054906101000a900460ff168860080160009054906101000a9004600160a060020a03168a9a509a509a509a509a509a509a509a509a509a50509193959799509193959799565b600080516020615acb8339815191526130ce336143d9565b6130d9338383612af4565b60408051808201909152600f8152600080516020615a0b833981519152602082015290151561314d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506131bc86868080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8c018190048102820181019092528a815294508a9350899250829150840183828082843782019150505050505060008060006143ed565b505050505050565b6000805160206159eb83398151915281565b60006126997f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b61421b565b60003361320c612cf8565b600160a060020a03161461326b576040805160e560020a62461bcd0281526020600482015260276024820152600080516020615b6b833981519152604482015260c960020a6626b0b730b3b2b902606482015290519081900360840190fd5b613282600080516020615bab83398151915261421b565b6040805180820190915260198152600080516020615aab833981519152602082015290156132f55760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50613315600080516020615bab833981519152600163ffffffff61421716565b611899848484615056565b6005546000906001604060020a0385169082906133569061335090608060020a026298968063ffffffff614a6d16565b8361505f565b905060806133b9607f60020a6133ad61339d6005546298968003611fac61338a88608060020a614b0090919063ffffffff16565b611fb88c6298968063ffffffff6149bf16565b6133ad868b63ffffffff6149bf16565b9063ffffffff61511116565b9060020a9004925050509392505050565b60085481565b600080516020615a6b83398151915281565b670de0b6b3a764000081565b600160a060020a03166000908152600d602052604090205490565b60006000196134166126ad565b14905090565b600b546040805180820190915260128152600080516020615beb833981519152602082015260009182919060ff161561349a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b508280600114806134c457506000818152600c6020526040902060080154600160a060020a031615155b60408051808201909152601a8152600080516020615c2b83398151915260208201529015156135385760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506000848152600c6020908152604080832081518481529283019091529450613572913391600080516020615aeb83398151915291611391565b6008840154909250600160a060020a031633148061358d5750815b6040805180820190915260178152604a60020a7610d597d4d15391115497d0d0539393d517d0d05390d1530260208201529015156136105760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5060408051606081018252602181527f43565f43414e4e4f545f43414e43454c5f4142535441494e5f50524f504f5341602082015260fa60020a6013029181019190915260018514156136a85760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506000600684015460ff1660038111156136be57fe5b6040805180820190915260168152605060020a7543565f50524f504f53414c5f4e4f545f414354495645026020820152911461373f5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5060068301805460ff19166002179055600583015461375d90613b29565b60405184907f416e669c63d9a3a5e36ee7cc7e2104b8db28ccd286aa18966e98fa230c73b08c90600090a250505050565b6000828152600c60209081526040808320600160a060020a038516845260070190915290205492915050565b60408051600080825260208201909252600080516020615a6b833981519152916137e8913391849190611391565b60408051808201909152600f8152600080516020615a0b833981519152602082015290151561385c5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50600b805460ff191683151517908190556040805160ff90921615158252517f752d7e161ff5146f80e3820893176eb40532811e5e20400dfdde57455213706a916020908290030190a15050565b600080516020615acb83398151915281565b600080516020615aeb83398151915281565b336138d76141fe565b600160a060020a0316146040805190810160405280601f8152602001600080516020615a2b8339815191528152509015156139575760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5061136481615196565b613969610c35565b6040805180820190915260148152600080516020615c0b83398151915260208201529015156139dd5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50611a2f828233613b92565b60006139f4826151e2565b80610c20575050600160e060020a03191660e260020a6315014f9b021490565b4390565b600080613a236151fe565b60048501549092506001604060020a0380841691161115613a4057fe5b60048401546001604060020a0383811691161415613a5d57613aa4565b60048401546003850154613a7d916001604060020a031684039085613320565b6004850180546001604060020a0319166001604060020a0385161790556003850181905590505b50505050565b600181015460009060ff16613ac0578154610c20565b60035460025483546001546040805160e260020a632321bc79028152600160a060020a03948516600482015260248101939093529083166044830152519190921691638c86f1e49160648083019260209291908290030181600087803b1580156115b757600080fd5b6000613b33615210565b905080600160a060020a0316633b92da72836040518263ffffffff1660e060020a02815260040180828152602001915050600060405180830381600087803b158015613b7e57600080fd5b505af11580156131bc573d6000803e3d6000fd5b600b546040805180820190915260128152600080516020615beb83398151915260208201526000918291829160ff1615613c115760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50858060011480613c3b57506000818152600c6020526040902060080154600160a060020a031615155b60408051808201909152601a8152600080516020615c2b8339815191526020820152901515613caf5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506000613cba612cf8565b600160a060020a03161415604080519081016040528060178152602001604a60020a7610d597d393d7d513d2d15397d350539051d15497d4d15502815250901515613d4a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506000878152600c60209081526040808320815180830190925260198252600080516020615bcb83398151915292820192909252909550908711613dd35760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506000600685015460ff166003811115613de957fe5b1480613e0757506001600685015460ff166003811115613e0557fe5b145b60408051808201909152601c81527f43565f494e434f52524543545f50524f504f53414c5f535441545553000000006020820152901515613e8d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50600160a060020a038086166000818152600d60209081526040808320548354825160e060020a6370a0823102815260048101969096529151613f2f96919592909116936370a0823193602480850194919392918390030190829087803b158015613ef757600080fd5b505af1158015613f0b573d6000803e3d6000fd5b505050506040513d6020811015613f2157600080fd5b50519063ffffffff614b0016565b925082861115613f5257613f52613f4c878563ffffffff614b0016565b86614f05565b600080546040805160e060020a6370a08231028152600160a060020a038981166004830152915191909216926370a0823192602480820193602093909283900390910190829087803b158015613fa757600080fd5b505af1158015613fbb573d6000803e3d6000fd5b505050506040513d6020811015613fd157600080fd5b5051600160a060020a0386166000908152600d6020526040902054613ffc908863ffffffff61511116565b60408051808201909152601e81527f43565f5354414b494e475f4d4f52455f5448414e5f415641494c41424c45000060208201529110156140825760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506002840154915061409a828763ffffffff61511116565b6002850155600160a060020a03851660009081526007850160205260409020546140ca908763ffffffff61511116565b600160a060020a0386166000908152600786016020908152604080832093909355600d90522054614101908763ffffffff61511116565b600160a060020a0386166000908152600d6020526040902055600a5461412d908763ffffffff61511116565b600a5560048401546001604060020a031615156141735761414c6151fe565b6004850180546001604060020a0319166001604060020a039290921691909117905561417d565b61417d8483613a18565b614187878661529b565b600160a060020a0385166000818152600786016020908152604091829020546002880154600389015484518c81529384019290925282840152606082015290518992917f28d9b583e0c477691a08f6c1e00fedc0895ed4221487c627fa96a7024119f499919081900360800190a350505050505050565b6000612699600080516020615b8b83398151915261421b565b9055565b5490565b600080600160a060020a038516151561423b5760019150612c3c565b600080546040805160e060020a6370a08231028152600160a060020a038981166004830152915161429694889493909316926370a0823192602480820193602093909283900390910190829087803b158015613ef757600080fd5b600160a060020a0386166000908152600d60205260409020549091508110156142e657600160a060020a0385166000908152600d60205260409020546142e690613f4c908363ffffffff614b0016565b600160a060020a0385166000908152600d602052604090205481101561433957600160a060020a0385166000908152600d602052604090205461433990614333908363ffffffff614b0016565b8661536b565b506001949350505050565b60005460408051808201909152601f81527f43565f494e434f52524543545f544f4b454e5f4d414e414745525f484f4f4b00602082015290600160a060020a03838116911614613aa45760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b6060610c2082600160a060020a031661557d565b600b546040805180820190915260128152600080516020615beb833981519152602082015260009160ff16156144685760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5061447660095486336155be565b905061012060405190810160405280858152602001841515815260200183600160a060020a03168152602001600081526020016000815260200160006001604060020a03168152602001828152602001600060038111156144d357fe5b8152336020918201526009546000908152600c825260409081902083518155918301516001808401805493860151600160a060020a03166101000261010060a860020a031993151560ff1995861617939093169290921790915560608401516002840155608084015160038085019190915560a08501516004850180546001604060020a039092166001604060020a031990921691909117905560c0850151600585015560e085015160068501805491949093911691849081111561459457fe5b0217905550610100919091015160089091018054600160a060020a031916600160a060020a03928316179055600954604080519081018790528515156060820152918416608083015260a0808352885190830152875183923391600080516020615b0b833981519152918b918b918b918b918b91819060208083019160c08401918a019080838360005b8381101561463657818101518382015260200161461e565b50505050905090810190601f1680156146635780820380516001836020036101000a031916815260200191505b50838103825287518152875160209182019189019080838360005b8381101561469657818101518382015260200161467e565b50505050905090810190601f1680156146c35780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a4505060098054600101905550505050565b6000838152600c60209081526040808320600160a060020a0385168452600781018352818420548251808401909352601c83527f43565f57495448445241575f4d4f52455f5448414e5f5354414b4544000000009383019390935292918511156147955760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506040805180820190915260198152600080516020615bcb83398151915260208201526000851161480b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50506002810154614822818563ffffffff614b0016565b6002830155600160a060020a0383166000908152600783016020526040902054614852908563ffffffff614b0016565b600160a060020a0384166000908152600784016020908152604080832093909355600d90522054614889908563ffffffff614b0016565b600160a060020a0384166000908152600d6020526040902055600a546148b5908563ffffffff614b0016565b600a55600160a060020a0383166000908152600783016020526040902054151561490357600160a060020a0383166000908152600e60205260409020614901908663ffffffff61569816565b505b6000600683015460ff16600381111561491857fe5b148061493657506001600683015460ff16600381111561493457fe5b145b15614945576149458282613a18565b600160a060020a03831660008181526007840160209081526040918290205460028601546003870154845195865292850189905284840191909152606084015260808301525186917f16f23283da3097bc9027dcdf31f24863b1520556f04818d406f0e6ecd08580f5919081900360a00190a25050505050565b6000808315156149d25760009150614a66565b508282028284828115156149e257fe5b6040805180820190915260118152607860020a704d4154485f4d554c5f4f564552464c4f570260208201529291900414614a615760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b508091505b5092915050565b60408051808201909152600d8152609860020a6c4d4154485f4449565f5a45524f0260208201526000908190818411614aeb5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b508284811515614af757fe5b04949350505050565b6040805180820190915260128152607060020a714d4154485f5355425f554e444552464c4f57026020820152600090819084841115614b845760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b505050900390565b600080614c2b670de0b6b3a7640000611fac6008546000809054906101000a9004600160a060020a0316600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015614bf357600080fd5b505af1158015614c07573d6000803e3d6000fd5b505050506040513d6020811015614c1d57600080fd5b50519063ffffffff6149bf16565b905080600a5410614c3e57600a54610c58565b919050565b614c4b6126ad565b6040805180820190915260188152604260020a771253925517d053149150511657d2539255125053125691510260208201529015614cce5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50612af2614cda613a14565b600080516020615a4b8339815191529063ffffffff61421716565b6000818152600c602052604080822060068101805460ff191690559051909183917f2e907829e43966b15ceb2d58ec9829a85c08155366371c443daeecd523ab1b349190a25050565b6000838152600c602052604080822060068101805460ff1916600117905590519091849186917faa41cc9a8de6a0731d1898a2eca5cbfc00c88dd0c91cd5e007b8f4fef6262cee91a350505050565b5490565b600080600160a060020a0383161515614dad576000915061253a565b50506000903b1190565b60408051600160a060020a038316602480830191909152825180830390910181526044909101909152602081018051600160e060020a031660e060020a6370a08231021790526000908180614e0c8684615753565b60408051808201909152601c81527f534146455f4552435f32305f42414c414e43455f52455645525445440000000060208201529193509150821515614e975760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b508093505b50505092915050565b60408051600160a060020a03841660248201526044808201849052825180830390910181526064909101909152602081018051600160e060020a031660e060020a63a9059cbb02179052600090614efc8582615784565b95945050505050565b600160a060020a0381166000908152600e6020908152604080832080548251818502810185019093528083528493849360609385938493830182828015614f6b57602002820191906000526020600020905b815481526020019060010190808311614f57575b505050505092505b825186108015614f8257508784105b15615039578286815181101515614f9557fe5b60209081029091018101516000818152600c909252604090912090925090506003600682015460ff166003811115614fc957fe5b1480614fe757506002600682015460ff166003811115614fe557fe5b145b1561502e57600160a060020a0387166000908152600782016020526040812054955085111561502e5761501b8286896146e6565b61502b848663ffffffff61511116565b93505b600190950194614f73565b5050505050505050565b8051602002815290565b61136481614cf5565b60019392505050565b60008080608060020a85106150be576040805160e560020a62461bcd02815260206004820152601c60248201527f5f612073686f756c64206265206c657373207468616e20325e31323800000000604482015290519081900360640190fd5b50608060020a9150839050825b6000811115615109576001811615156150f3576150e882836157d2565b915060029004615104565b6150fd83836157d2565b9250600019015b6150cb565b505092915050565b6040805180820190915260118152607860020a704d4154485f4144445f4f564552464c4f570260208201526000908383019084821015614a615760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b6000818152600c602052604080822060068101805460ff191660021790559051909183917fd92fba445edb3153b571e6df782d7a66fd0ce668519273670820ee3a86da0ef49190a25050565b600160e060020a0319811660e060020a6301ffc9a70214919050565b600061269961520b613a14565b6158c7565b60008061521b6141fe565b604080518082019091526020808252600080516020615b4b83398151915290820152909150600160a060020a038216151561253a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b600160a060020a0381166000908152600e602052604090206152c3818463ffffffff61595a16565b15156124475780546040805180820190915260188152604260020a7710d597d3505617d41493d413d4d05314d7d4915050d2115102602082015290600a116153505760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50805460018101825560008281526020902001839055505050565b600160a060020a0381166000908152600e60209081526040808320805482518185028101850190935280835284938493606093859384938301828280156153d157602002820191906000526020600020905b8154815260200190600101908083116153bd575b50505050600160a060020a0389166000908152600e602052604090209194506153fd919050600161595a565b1561546f57600160a060020a03871660009081527fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b6360205260409020546154459089906159a2565b9450600085111561546f5761545c600186896146e6565b61546c848663ffffffff61511116565b93505b600160a060020a0387166000908152600e6020908152604091829020805483518184028101840190945280845290918301828280156154cd57602002820191906000526020600020905b8154815260200190600101908083116154b9575b505050505092505b8251861080156154e457508784105b156150395782868151811015156154f757fe5b60209081029091018101516000818152600c90925260409091209092509050615549615529898663ffffffff614b0016565b600160a060020a03891660009081526007840160205260409020546159a2565b945060008511156155725761555f8286896146e6565b61556f848663ffffffff61511116565b93505b6001909501946154d5565b60408051600180825281830190925260609160208083019080388339019050509050818160008151811015156155af57fe5b60209081029091010152919050565b6000806155c9615210565b905080600160a060020a031663e95fdd1d8686866040518463ffffffff1660e060020a028152600401808481526020018060200183600160a060020a0316600160a060020a03168152602001828103825284818151815260200191508051906020019080838360005b8381101561564a578181015183820152602001615632565b50505050905090810190601f1680156156775780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015612c0d57600080fd5b815460009081805b82821015615743578486838154811015156156b757fe5b90600052602060002001541415615738575084546000190181811461570a5785818154811015156156e457fe5b906000526020600020015486838154811015156156fd57fe5b6000918252602090912001555b858181548110151561571857fe5b60009182526020822001558061572e87826159b1565b5060019350614e9c565b6001909101906156a0565b50600095945050505050565b9055565b6000806000806040516020818751602089018a5afa9250600083111561577857805191505b50909590945092505050565b6000806040516020818551602087016000895af160008111156157c8573d80156157b557602081146157be576157c6565b600193506157c6565b600183511493505b505b5090949350505050565b6000608060020a831115615844576040805160e560020a62461bcd02815260206004820152602860248201527f5f612073686f756c64206265206c657373207468616e206f7220657175616c20604482015260c360020a670e8de4064bc6264702606482015290519081900360840190fd5b608060020a821061589f576040805160e560020a62461bcd02815260206004820152601c60248201527f5f622073686f756c64206265206c657373207468616e20325e31323800000000604482015290519081900360640190fd5b60806158b9607f60020a6133ad868663ffffffff6149bf16565b9060020a9004905092915050565b6040805180820190915260158152605860020a7455494e5436345f4e554d4245525f544f4f5f4249470260208201526000906001604060020a038311156159535760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5090919050565b6000805b83548110156159985782848281548110151561597657fe5b906000526020600020015414156159905760019150614a66565b60010161595e565b5060009392505050565b600081831061595357816118ba565b8154818355818111156124475760008381526020902061244791810190830161165f91905b80821115610c5b57600081556001016159d656008dad640ab1b088990c972676ada708447affc660890ec9fc9a5483241c49f0364150505f415554485f4641494c4544000000000000000000000000000000000044495350555441424c455f53454e4445525f4e4f545f41475245454d454e5400ebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e0e3a87ad3cd0c04dcd1e538226de2b467c72316c162f937f5b6f7913616624625c513b2347f66d33af9d68f4a0ed7fbb73ce364889b2af7f3ee5764440da6a8a5245454e5452414e43595f5245454e5452414e545f43414c4c00000000000000bf05b9322505d747ab5880dfb677dc4864381e9fc3a25ccfa184a3a53d02f4b282c52f79cad6ac09c16c165c562b50c5e655a09a19bb99b2d182ab3caff020f2e180363919da754b2737a8f10869b7d2df0be7ef0e81339d3b5dabba166060ed9d4f140430c9045e12b5a104aa9e641c09b980a26ab8e12a32a2f3d155229ae344495350555441424c455f41475245454d454e545f53544154455f494e56414c486f6f6b73206d7573742062652063616c6c65642066726f6d20546f6b656e206dbe80ccdeafbf5f3fff5738b224414f85e9370da36f61bf21c65159df7409e9e855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb43565f414d4f554e545f43414e5f4e4f545f42455f5a45524f0000000000000043565f434f4e54524143545f5041555345440000000000000000000000000000494e49545f4e4f545f494e495449414c495a454400000000000000000000000043565f50524f504f53414c5f444f45535f4e4f545f4558495354000000000000a165627a7a723058206775e3ba531c946c844dea73c5e5ae852700f43fddd1572d4b56bcddf01792fd0029ebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e",
  "deployedBytecode": "0x6080604052600436106102fd5763ffffffff60e060020a60003504166301ffc9a781146103025780630649d6dc146103385780630803fac0146103695780630c0512e91461037e5780630d116652146103a55780630d61b519146103ba5780630f529ba2146103d45780631522eb43146103e95780631df67d2f146103fe5780631e9ae2f4146104165780632914b9bd1461043757806332f0a3b514610490578063406244d8146104a55780634570c175146104d65780634a393149146104fd5780634d4eb6ce146105275780634d7ec6281461054b5780634ef4d13f146105605780634f629fbb146105a05780634fb3cbbc146105b557806351ed6a30146105cd57806354fac919146105e257806359a5db8b146105f75780636322b5131461060f578063649c649c146106555780636ab6802b146106705780636ae1e5411461068857806376365af7146106f957806376740b5b1461070e5780637ad267b6146107265780637e7db6e11461073e5780637f439ce01461075f57806380afdea814610786578063817b1cd21461079b5780638a67456a146107b05780638b3dd749146107c55780638f911dca146107da57806399c7e2e8146107ef5780639d4941d8146108105780639d99856614610831578063a1658fad14610846578063a1aab33f146108ad578063a479e508146108c2578063a9d75b2b146108d7578063ab97d59d146108ec578063b086306314610901578063bca60cf514610919578063c2239b241461092e578063c35ac76d14610952578063c7f758a814610973578063cbdda5e114610a28578063d35424fa14610a54578063d4aae0c414610a69578063da682aeb14610a7e578063dac6126014610aa8578063db2d878c14610acf578063dcdf8e3914610ae4578063dd0081c714610af9578063ddc90e7e14610b0e578063de4796ed14610b2f578063e0a8f6f514610b44578063e0dd2c3814610b5c578063e272b89214610b80578063eeabf67e14610b9a578063f31bbd7f14610baf578063f83a151514610bc4578063fc37005114610bdc575b600080fd5b34801561030e57600080fd5b50610324600160e060020a031960043516610bf7565b604080519115158252519081900360200190f35b34801561034457600080fd5b5061034d610c26565b60408051600160a060020a039092168252519081900360200190f35b34801561037557600080fd5b50610324610c35565b34801561038a57600080fd5b50610393610c5f565b60408051918252519081900360200190f35b3480156103b157600080fd5b5061034d610c65565b3480156103c657600080fd5b506103d2600435610c74565b005b3480156103e057600080fd5b506103936111bd565b3480156103f557600080fd5b506103936111c4565b34801561040a57600080fd5b506103d26004356111c9565b34801561042257600080fd5b506103d2600160a060020a0360043516611367565b34801561044357600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261034d9436949293602493928401919081908401838280828437509497506115039650505050505050565b34801561049c57600080fd5b5061034d6115e9565b3480156104b157600080fd5b506104ba611662565b604080516001604060020a039092168252519081900360200190f35b3480156104e257600080fd5b506103d2600160a060020a0360043581169060243516611667565b34801561050957600080fd5b50610324600160a060020a036004358116906024351660443561177a565b34801561053357600080fd5b506103d2600435600160a060020a03602435166118c1565b34801561055757600080fd5b5061034d611a33565b34801561056c57600080fd5b506103d260246004803582810192908201359181359182019101356044356064351515600160a060020a0360843516611a42565b3480156105ac57600080fd5b50610393611c5e565b3480156105c157600080fd5b506103d2600435611c70565b3480156105d957600080fd5b5061034d611db8565b3480156105ee57600080fd5b50610393611dc7565b34801561060357600080fd5b50610393600435611dcd565b34801561061b57600080fd5b506103d2600160a060020a036004358116906024358116906044358116906064358116906084351660a43560c43560e43561010435611fd3565b34801561066157600080fd5b506103d2600435602435612321565b34801561067c57600080fd5b5061032460043561244c565b34801561069457600080fd5b506106a9600160a060020a0360043516612484565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156106e55781810151838201526020016106cd565b505050509050019250505060405180910390f35b34801561070557600080fd5b506103936124f0565b34801561071a57600080fd5b506103246004356124f6565b34801561073257600080fd5b506103d2600435612540565b34801561074a57600080fd5b50610324600160a060020a03600435166125d3565b34801561076b57600080fd5b506103d2600435602435600160a060020a03604435166125d9565b34801561079257600080fd5b5061039361266e565b3480156107a757600080fd5b5061039361269e565b3480156107bc57600080fd5b506103246126a4565b3480156107d157600080fd5b506103936126ad565b3480156107e657600080fd5b506103936126c6565b3480156107fb57600080fd5b506103d2600160a060020a03600435166126ea565b34801561081c57600080fd5b506103d2600160a060020a03600435166127e2565b34801561083d57600080fd5b506103d2612a69565b34801561085257600080fd5b506040805160206004604435818101358381028086018501909652808552610324958335600160a060020a0316956024803596369695606495939492019291829185019084908082843750949750612af49650505050505050565b3480156108b957600080fd5b50610393612c44565b3480156108ce57600080fd5b5061034d612c4a565b3480156108e357600080fd5b5061034d612ce9565b3480156108f857600080fd5b5061034d612cf8565b34801561090d57600080fd5b506103d2600435612d11565b34801561092557600080fd5b5061034d612da4565b34801561093a57600080fd5b506103d2600435600160a060020a0360243516612dae565b34801561095e57600080fd5b506103d2600435602435604435606435612ecb565b34801561097f57600080fd5b5061098b600435612fd0565b604051808b81526020018a15151515815260200189600160a060020a0316600160a060020a03168152602001888152602001878152602001866001604060020a03166001604060020a031681526020018581526020018460038111156109ed57fe5b60ff16815260200183600160a060020a0316600160a060020a031681526020018281526020019a505050505050505050505060405180910390f35b348015610a3457600080fd5b506103d260246004803582810192908201359181359182019101356130b6565b348015610a6057600080fd5b506103936131c4565b348015610a7557600080fd5b5061034d6131d6565b348015610a8a57600080fd5b50610324600160a060020a0360043581169060243516604435613201565b348015610ab457600080fd5b506103936001604060020a0360043516602435604435613320565b348015610adb57600080fd5b506103936133ca565b348015610af057600080fd5b506103936133d0565b348015610b0557600080fd5b506103936133e2565b348015610b1a57600080fd5b50610393600160a060020a03600435166133ee565b348015610b3b57600080fd5b50610324613409565b348015610b5057600080fd5b506103d260043561341c565b348015610b6857600080fd5b50610393600435600160a060020a036024351661378e565b348015610b8c57600080fd5b506103d260043515156137ba565b348015610ba657600080fd5b506103936138aa565b348015610bbb57600080fd5b506103936138bc565b348015610bd057600080fd5b506103d26004356138ce565b348015610be857600080fd5b506103d2600435602435613961565b6000610c02826139e9565b80610c205750600160e060020a0319821660e060020a63f3d3bb5102145b92915050565b600354600160a060020a031681565b600080610c406126ad565b90508015801590610c58575080610c55613a14565b10155b91505b5090565b60095481565b600454600160a060020a031681565b600b546040805180820190915260128152600080516020615beb833981519152602082015260009182919060ff1615610d2e5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610cf3578181015183820152602001610cdb565b50505050905090810190601f168015610d205780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610d37610c35565b6040805180820190915260148152600080516020615c0b8339815191526020820152901515610dab5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50828060011480610dd557506000818152600c6020526040902060080154600160a060020a031615155b60408051808201909152601a8152600080516020615c2b8339815191526020820152901515610e495760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50600c600085815260200190815260200160002092506001841415606060405190810160405280602281526020017f43565f43414e4e4f545f455845435554455f4142535441494e5f50524f504f53815260200160f260020a61105302815250901515610efb5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50825460408051606081018252602581527f43565f43414e4e4f545f455845435554455f5a45524f5f56414c55455f50524f602082015260da60020a641413d4d053029181019190915290600010610f985760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506000600684015460ff166003811115610fae57fe5b6040805180820190915260168152605060020a7543565f50524f504f53414c5f4e4f545f414354495645026020820152911461102f5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5061103e838460020154613a18565b61104783613aaa565b915061105282611dcd565b60038401546040805180820190915260198152603960020a7821ab2fa4a729aaa32324a1a4a2a72a2fa1a7a72b24a1a4a7a702602082015291106110db5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5060068301805460ff1916600317905560058301546110f990613b29565b6004805460018054908601546040805160e360020a6317d57599028152600160a060020a039384169581019590955261010090910482166024850152604484018690525191169163beabacc891606480830192600092919082900301818387803b15801561116657600080fd5b505af115801561117a573d6000803e3d6000fd5b505050600384015460408051918252518692507ff758fc91e01b00ea6b4a6138756f7f28e021f9bf21db6dbf8c36c88eb737257a9181900360200190a250505050565b6298968081565b600181565b6111d1610c35565b6040805180820190915260148152600080516020615c0b83398151915260208201529015156112455760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50336000908152600d602090815260409182902054825180840190935260198352603a60020a7810d597d4d51052d25391d7d053149150511657d4d51052d1510291830191909152156112dd5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50600080546040805160e060020a6370a082310281523360048201529051611364938593600160a060020a0316926370a082319260248083019360209383900390910190829087803b15801561133257600080fd5b505af1158015611346573d6000803e3d6000fd5b505050506040513d602081101561135c57600080fd5b505133613b92565b50565b604080516000808252602082019092526000805160206159eb833981519152906113979033908390855b50612af4565b60408051808201909152600f8152600080516020615a0b833981519152602082015290151561140b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506114146141fe565b9150600160a060020a0382161580156114355750600160a060020a03831615155b604080519081016040528060208152602001600080516020615b4b8339815191528152509015156114ab5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506114ca600080516020615b8b8339815191528463ffffffff61421716565b604051600160a060020a038416907f64d4a120bf365888d0b3f10e4d7deb8415919eaad62ee6fb5f5619082d6f641890600090a2505050565b600061150d612c4a565b600160a060020a03166304bf2a7f836040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561156b578181015183820152602001611553565b50505050905090810190601f1680156115985780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1580156115b757600080fd5b505af11580156115cb573d6000803e3d6000fd5b505050506040513d60208110156115e157600080fd5b505192915050565b60006115f36131d6565b600160a060020a03166332f0a3b56040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561163057600080fd5b505af1158015611644573d6000803e3d6000fd5b505050506040513d602081101561165a57600080fd5b505190505b90565b600a81565b60408051600080825260208201909252600080516020615b2b83398151915291611695913391849190611391565b60408051808201909152600f8152600080516020615a0b83398151915260208201529015156117095760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5060038054600160a060020a03808616600160a060020a031992831681179093556002805491861691909216811790915560408051928352602083019190915280517f5c6eba356f6aa4b8375538c6b9960ec788c30ef816e3ba1d5c9f7b5aa01c8bd89281900390910190a1505050565b600033611785612cf8565b600160a060020a0316146117e4576040805160e560020a62461bcd0281526020600482015260276024820152600080516020615b6b833981519152604482015260c960020a6626b0b730b3b2b902606482015290519081900360840190fd5b6117fb600080516020615bab83398151915261421b565b6040805180820190915260198152600080516020615aab8339815191526020820152901561186e5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5061188e600080516020615bab833981519152600163ffffffff61421716565b61189984848461421f565b90506118ba600080516020615bab833981519152600063ffffffff61421716565b9392505050565b6118d8600080516020615bab83398151915261421b565b6040805180820190915260198152600080516020615aab8339815191526020820152901561194b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5061196b600080516020615bab833981519152600163ffffffff61421716565b6000611975612cf8565b600160a060020a0316146119e7576040805160e560020a62461bcd02815260206004820152602860248201527f486f6f6b20616c7265616479207265676973746572656420627920546f6b656e604482015260c160020a671026b0b730b3b2b902606482015290519081900360840190fd5b611a05600080516020615a8b8339815191523363ffffffff61421716565b611a10338383614344565b611a2f600080516020615bab833981519152600063ffffffff61421716565b5050565b600154600160a060020a031681565b600080516020615acb833981519152611a5a336143d9565b611a65338383612af4565b60408051808201909152600f8152600080516020615a0b8339815191526020820152901515611ad95760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506040805180820190915260188152604060020a7743565f5245515545535445445f414d4f554e545f5a45524f02602082015260008611611b5f5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506040805180820190915260118152607860020a7043565f4e4f5f42454e4546494349415259026020820152600160a060020a0384161515611be65760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50611c5389898080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8f018190048102820181019092528d815294508d93508c925082915084018382808284378201915050505050508787876143ed565b505050505050505050565b600080516020615b2b83398151915281565b611c78610c35565b6040805180820190915260148152600080516020615c0b8339815191526020820152901515611cec5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50808060011480611d1657506000818152600c6020526040902060080154600160a060020a031615155b60408051808201909152601a8152600080516020615c2b8339815191526020820152901515611d8a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506000828152600c6020908152604080832033808552600790910190925290912054611a2f918491906146e6565b600054600160a060020a031681565b60055481565b600480546001546040805160e060020a63e3d670d7028152600160a060020a03928316948101949094525160009384938493169163e3d670d79160248082019260209290919082900301818787803b158015611e2857600080fd5b505af1158015611e3c573d6000803e3d6000fd5b505050506040513d6020811015611e5257600080fd5b50519150611e69846298968063ffffffff6149bf16565b600654611e7c908463ffffffff6149bf16565b6040805180820190915260188152604060020a7743565f414d4f554e545f4f5645525f4d41585f524154494f0260208201529110611eff5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50611f41611f19604060020a86028463ffffffff614a6d16565b600654611f3590604060020a026298968063ffffffff614a6d16565b9063ffffffff614b0016565b90506040611fc4611f50614b8c565b611fb8611f6b60055462989680614b0090919063ffffffff16565b611fac62989680611fb86040611f878a8063ffffffff6149bf16565b60075460029290920a900490611fac90608060020a026298968063ffffffff614a6d16565b9063ffffffff614a6d16565b9063ffffffff6149bf16565b9060020a900492505050919050565b611fdb6126ad565b6040805180820190915260188152604260020a771253925517d053149150511657d253925512505312569151026020820152901561205e5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506002600981905560008054600160a060020a0319908116600160a060020a038d81169190911783556001805483168d8316178155845483168c8316179094556003805483168b8316178155600480549093168a831617909255600588905560068790556007869055600885905560408051610120810182528481526020808201868152928201868152606083018781526080840188815260a0850189815260c086018a815260e087018b81526101008089018d90529b8d9052600c90965286517fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b5c90815597517fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b5d80549651909a16909b0261010060a860020a03199b151560ff19968716179b909b169a909a1790975590517fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b5e55517fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b5f5593517fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b6080546001604060020a039092166001604060020a031990921691909117905594517fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b615593517fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b6280549596929591949093919091169190849081111561227a57fe5b0217905550610100919091015160089091018054600160a060020a031916600160a060020a03909216919091179055604080516000818301819052606082018190526080820181905260a0808352601090830152608260020a6f10589cdd185a5b881c1c9bdc1bdcd85b0260c083015260e060208301819052820181905291516001918391600080516020615b0b83398151915291610120908290030190a4611c53614c43565b612329610c35565b6040805180820190915260148152600080516020615c0b833981519152602082015290151561239d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b508180600114806123c757506000818152600c6020526040902060080154600160a060020a031615155b60408051808201909152601a8152600080516020615c2b833981519152602082015290151561243b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506124478383336146e6565b505050565b6000806000838152600c602052604090206006015460ff16600381111561246f57fe5b148015610c20575050600b5460ff1615919050565b600160a060020a0381166000908152600e60209081526040918290208054835181840281018401909452808452606093928301828280156124e457602002820191906000526020600020905b8154815260200190600101908083116124d0575b50505050509050919050565b60065481565b6000818152600c602052604081206003600682015460ff16600381111561251957fe5b148061253757506002600682015460ff16600381111561253557fe5b145b91505b50919050565b336125496141fe565b600160a060020a0316146040805190810160405280601f8152602001600080516020615a2b8339815191528152509015156125c95760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5061136481614cf5565b50600190565b336125e26141fe565b600160a060020a0316146040805190810160405280601f8152602001600080516020615a2b8339815191528152509015156126625760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50612447838383614d3e565b60006126997fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b61421b565b905090565b600a5481565b600b5460ff1681565b6000612699600080516020615a4b83398151915261421b565b7fef025787d7cd1a96d9014b8dc7b44899b8c1350859fb9e1e05f5a546dd65158d81565b60408051600080825260208201909252600080516020615b2b83398151915291612718913391849190611391565b60408051808201909152600f8152600080516020615a0b833981519152602082015290151561278c5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5060048054600160a060020a038416600160a060020a0319909116811790915560408051918252517fe73ec16f0f6043487af9cb91eb14c278096f172773ad13f392cd1f9507c9a8ee9181900360200190a15050565b60008060006127f0846125d3565b6040805180820190915260128152607260020a71149150d3d5915497d11254d0531313d5d15102602082015290151561286e5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506128776115e9565b925061288283614d91565b60408051808201909152601a81527f5245434f5645525f5641554c545f4e4f545f434f4e545241435400000000000060208201529015156129085760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50600160a060020a03841615156129595760405130319250600160a060020a0384169083156108fc029084906000818181858888f19350505050158015612953573d6000803e3d6000fd5b50612a18565b5082612974600160a060020a0382163063ffffffff614db716565b9150612990600160a060020a038216848463ffffffff614ea516565b60408051808201909152601d81527f5245434f5645525f544f4b454e5f5452414e534645525f4641494c45440000006020820152901515612a165760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b505b83600160a060020a031683600160a060020a03167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b612a71610c35565b6040805180820190915260148152600080516020615c0b8339815191526020820152901515612ae55760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50612af260001933614f05565b565b600080612aff610c35565b1515612b0e5760009150612c3c565b612b166131d6565b9050600160a060020a0381161515612b315760009150612c3c565b80600160a060020a031663fdef9106863087612b4c88615043565b60405160e060020a63ffffffff8716028152600160a060020a03808616600483019081529085166024830152604482018490526080606483019081528351608484015283519192909160a490910190602085019080838360005b83811015612bbe578181015183820152602001612ba6565b50505050905090810190601f168015612beb5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015612c0d57600080fd5b505af1158015612c21573d6000803e3d6000fd5b505050506040513d6020811015612c3757600080fd5b505191505b509392505050565b60075481565b600080612c556131d6565b6040805160e360020a6317c0177b0281527fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb60048201527fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6160248201529051600160a060020a03929092169163be00bbd8916044808201926020929091908290030181600087803b1580156115b757600080fd5b600254600160a060020a031681565b6000612699600080516020615a8b83398151915261421b565b33612d1a6141fe565b600160a060020a0316146040805190810160405280601f8152602001600080516020615a2b833981519152815250901515612d9a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506113648161504d565b60006126996141fe565b33612db7612cf8565b600160a060020a031614612e16576040805160e560020a62461bcd0281526020600482015260276024820152600080516020615b6b833981519152604482015260c960020a6626b0b730b3b2b902606482015290519081900360840190fd5b612e2d600080516020615bab83398151915261421b565b6040805180820190915260198152600080516020615aab83398151915260208201529015612ea05760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50612ec0600080516020615bab833981519152600163ffffffff61421716565b611a10338383612447565b60408051600080825260208201909252600080516020615b2b83398151915291612ef9913391849190611391565b60408051808201909152600f8152600080516020615a0b8339815191526020820152901515612f6d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50600585905560068490556007839055600882905560408051868152602081018690528082018590526060810184905290517fab0e1d16e026a71973fa1c1862074f152ee6c430f36fce58005928c3bb1588369181900360800190a15050505050565b6000818152600c602052604081208054829182918291829182918291829182918291901561300e5761300961300482613aaa565b611dcd565b613011565b60005b915080600001548160010160009054906101000a900460ff168260010160019054906101000a9004600160a060020a0316836002015484600301548560040160009054906101000a90046001604060020a031686600501548760060160009054906101000a900460ff168860080160009054906101000a9004600160a060020a03168a9a509a509a509a509a509a509a509a509a509a50509193959799509193959799565b600080516020615acb8339815191526130ce336143d9565b6130d9338383612af4565b60408051808201909152600f8152600080516020615a0b833981519152602082015290151561314d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506131bc86868080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8c018190048102820181019092528a815294508a9350899250829150840183828082843782019150505050505060008060006143ed565b505050505050565b6000805160206159eb83398151915281565b60006126997f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b61421b565b60003361320c612cf8565b600160a060020a03161461326b576040805160e560020a62461bcd0281526020600482015260276024820152600080516020615b6b833981519152604482015260c960020a6626b0b730b3b2b902606482015290519081900360840190fd5b613282600080516020615bab83398151915261421b565b6040805180820190915260198152600080516020615aab833981519152602082015290156132f55760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50613315600080516020615bab833981519152600163ffffffff61421716565b611899848484615056565b6005546000906001604060020a0385169082906133569061335090608060020a026298968063ffffffff614a6d16565b8361505f565b905060806133b9607f60020a6133ad61339d6005546298968003611fac61338a88608060020a614b0090919063ffffffff16565b611fb88c6298968063ffffffff6149bf16565b6133ad868b63ffffffff6149bf16565b9063ffffffff61511116565b9060020a9004925050509392505050565b60085481565b600080516020615a6b83398151915281565b670de0b6b3a764000081565b600160a060020a03166000908152600d602052604090205490565b60006000196134166126ad565b14905090565b600b546040805180820190915260128152600080516020615beb833981519152602082015260009182919060ff161561349a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b508280600114806134c457506000818152600c6020526040902060080154600160a060020a031615155b60408051808201909152601a8152600080516020615c2b83398151915260208201529015156135385760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506000848152600c6020908152604080832081518481529283019091529450613572913391600080516020615aeb83398151915291611391565b6008840154909250600160a060020a031633148061358d5750815b6040805180820190915260178152604a60020a7610d597d4d15391115497d0d0539393d517d0d05390d1530260208201529015156136105760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5060408051606081018252602181527f43565f43414e4e4f545f43414e43454c5f4142535441494e5f50524f504f5341602082015260fa60020a6013029181019190915260018514156136a85760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506000600684015460ff1660038111156136be57fe5b6040805180820190915260168152605060020a7543565f50524f504f53414c5f4e4f545f414354495645026020820152911461373f5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5060068301805460ff19166002179055600583015461375d90613b29565b60405184907f416e669c63d9a3a5e36ee7cc7e2104b8db28ccd286aa18966e98fa230c73b08c90600090a250505050565b6000828152600c60209081526040808320600160a060020a038516845260070190915290205492915050565b60408051600080825260208201909252600080516020615a6b833981519152916137e8913391849190611391565b60408051808201909152600f8152600080516020615a0b833981519152602082015290151561385c5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50600b805460ff191683151517908190556040805160ff90921615158252517f752d7e161ff5146f80e3820893176eb40532811e5e20400dfdde57455213706a916020908290030190a15050565b600080516020615acb83398151915281565b600080516020615aeb83398151915281565b336138d76141fe565b600160a060020a0316146040805190810160405280601f8152602001600080516020615a2b8339815191528152509015156139575760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5061136481615196565b613969610c35565b6040805180820190915260148152600080516020615c0b83398151915260208201529015156139dd5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50611a2f828233613b92565b60006139f4826151e2565b80610c20575050600160e060020a03191660e260020a6315014f9b021490565b4390565b600080613a236151fe565b60048501549092506001604060020a0380841691161115613a4057fe5b60048401546001604060020a0383811691161415613a5d57613aa4565b60048401546003850154613a7d916001604060020a031684039085613320565b6004850180546001604060020a0319166001604060020a0385161790556003850181905590505b50505050565b600181015460009060ff16613ac0578154610c20565b60035460025483546001546040805160e260020a632321bc79028152600160a060020a03948516600482015260248101939093529083166044830152519190921691638c86f1e49160648083019260209291908290030181600087803b1580156115b757600080fd5b6000613b33615210565b905080600160a060020a0316633b92da72836040518263ffffffff1660e060020a02815260040180828152602001915050600060405180830381600087803b158015613b7e57600080fd5b505af11580156131bc573d6000803e3d6000fd5b600b546040805180820190915260128152600080516020615beb83398151915260208201526000918291829160ff1615613c115760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50858060011480613c3b57506000818152600c6020526040902060080154600160a060020a031615155b60408051808201909152601a8152600080516020615c2b8339815191526020820152901515613caf5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506000613cba612cf8565b600160a060020a03161415604080519081016040528060178152602001604a60020a7610d597d393d7d513d2d15397d350539051d15497d4d15502815250901515613d4a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506000878152600c60209081526040808320815180830190925260198252600080516020615bcb83398151915292820192909252909550908711613dd35760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506000600685015460ff166003811115613de957fe5b1480613e0757506001600685015460ff166003811115613e0557fe5b145b60408051808201909152601c81527f43565f494e434f52524543545f50524f504f53414c5f535441545553000000006020820152901515613e8d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50600160a060020a038086166000818152600d60209081526040808320548354825160e060020a6370a0823102815260048101969096529151613f2f96919592909116936370a0823193602480850194919392918390030190829087803b158015613ef757600080fd5b505af1158015613f0b573d6000803e3d6000fd5b505050506040513d6020811015613f2157600080fd5b50519063ffffffff614b0016565b925082861115613f5257613f52613f4c878563ffffffff614b0016565b86614f05565b600080546040805160e060020a6370a08231028152600160a060020a038981166004830152915191909216926370a0823192602480820193602093909283900390910190829087803b158015613fa757600080fd5b505af1158015613fbb573d6000803e3d6000fd5b505050506040513d6020811015613fd157600080fd5b5051600160a060020a0386166000908152600d6020526040902054613ffc908863ffffffff61511116565b60408051808201909152601e81527f43565f5354414b494e475f4d4f52455f5448414e5f415641494c41424c45000060208201529110156140825760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506002840154915061409a828763ffffffff61511116565b6002850155600160a060020a03851660009081526007850160205260409020546140ca908763ffffffff61511116565b600160a060020a0386166000908152600786016020908152604080832093909355600d90522054614101908763ffffffff61511116565b600160a060020a0386166000908152600d6020526040902055600a5461412d908763ffffffff61511116565b600a5560048401546001604060020a031615156141735761414c6151fe565b6004850180546001604060020a0319166001604060020a039290921691909117905561417d565b61417d8483613a18565b614187878661529b565b600160a060020a0385166000818152600786016020908152604091829020546002880154600389015484518c81529384019290925282840152606082015290518992917f28d9b583e0c477691a08f6c1e00fedc0895ed4221487c627fa96a7024119f499919081900360800190a350505050505050565b6000612699600080516020615b8b83398151915261421b565b9055565b5490565b600080600160a060020a038516151561423b5760019150612c3c565b600080546040805160e060020a6370a08231028152600160a060020a038981166004830152915161429694889493909316926370a0823192602480820193602093909283900390910190829087803b158015613ef757600080fd5b600160a060020a0386166000908152600d60205260409020549091508110156142e657600160a060020a0385166000908152600d60205260409020546142e690613f4c908363ffffffff614b0016565b600160a060020a0385166000908152600d602052604090205481101561433957600160a060020a0385166000908152600d602052604090205461433990614333908363ffffffff614b0016565b8661536b565b506001949350505050565b60005460408051808201909152601f81527f43565f494e434f52524543545f544f4b454e5f4d414e414745525f484f4f4b00602082015290600160a060020a03838116911614613aa45760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b6060610c2082600160a060020a031661557d565b600b546040805180820190915260128152600080516020615beb833981519152602082015260009160ff16156144685760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5061447660095486336155be565b905061012060405190810160405280858152602001841515815260200183600160a060020a03168152602001600081526020016000815260200160006001604060020a03168152602001828152602001600060038111156144d357fe5b8152336020918201526009546000908152600c825260409081902083518155918301516001808401805493860151600160a060020a03166101000261010060a860020a031993151560ff1995861617939093169290921790915560608401516002840155608084015160038085019190915560a08501516004850180546001604060020a039092166001604060020a031990921691909117905560c0850151600585015560e085015160068501805491949093911691849081111561459457fe5b0217905550610100919091015160089091018054600160a060020a031916600160a060020a03928316179055600954604080519081018790528515156060820152918416608083015260a0808352885190830152875183923391600080516020615b0b833981519152918b918b918b918b918b91819060208083019160c08401918a019080838360005b8381101561463657818101518382015260200161461e565b50505050905090810190601f1680156146635780820380516001836020036101000a031916815260200191505b50838103825287518152875160209182019189019080838360005b8381101561469657818101518382015260200161467e565b50505050905090810190601f1680156146c35780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a4505060098054600101905550505050565b6000838152600c60209081526040808320600160a060020a0385168452600781018352818420548251808401909352601c83527f43565f57495448445241575f4d4f52455f5448414e5f5354414b4544000000009383019390935292918511156147955760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b506040805180820190915260198152600080516020615bcb83398151915260208201526000851161480b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50506002810154614822818563ffffffff614b0016565b6002830155600160a060020a0383166000908152600783016020526040902054614852908563ffffffff614b0016565b600160a060020a0384166000908152600784016020908152604080832093909355600d90522054614889908563ffffffff614b0016565b600160a060020a0384166000908152600d6020526040902055600a546148b5908563ffffffff614b0016565b600a55600160a060020a0383166000908152600783016020526040902054151561490357600160a060020a0383166000908152600e60205260409020614901908663ffffffff61569816565b505b6000600683015460ff16600381111561491857fe5b148061493657506001600683015460ff16600381111561493457fe5b145b15614945576149458282613a18565b600160a060020a03831660008181526007840160209081526040918290205460028601546003870154845195865292850189905284840191909152606084015260808301525186917f16f23283da3097bc9027dcdf31f24863b1520556f04818d406f0e6ecd08580f5919081900360a00190a25050505050565b6000808315156149d25760009150614a66565b508282028284828115156149e257fe5b6040805180820190915260118152607860020a704d4154485f4d554c5f4f564552464c4f570260208201529291900414614a615760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b508091505b5092915050565b60408051808201909152600d8152609860020a6c4d4154485f4449565f5a45524f0260208201526000908190818411614aeb5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b508284811515614af757fe5b04949350505050565b6040805180820190915260128152607060020a714d4154485f5355425f554e444552464c4f57026020820152600090819084841115614b845760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b505050900390565b600080614c2b670de0b6b3a7640000611fac6008546000809054906101000a9004600160a060020a0316600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015614bf357600080fd5b505af1158015614c07573d6000803e3d6000fd5b505050506040513d6020811015614c1d57600080fd5b50519063ffffffff6149bf16565b905080600a5410614c3e57600a54610c58565b919050565b614c4b6126ad565b6040805180820190915260188152604260020a771253925517d053149150511657d2539255125053125691510260208201529015614cce5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50612af2614cda613a14565b600080516020615a4b8339815191529063ffffffff61421716565b6000818152600c602052604080822060068101805460ff191690559051909183917f2e907829e43966b15ceb2d58ec9829a85c08155366371c443daeecd523ab1b349190a25050565b6000838152600c602052604080822060068101805460ff1916600117905590519091849186917faa41cc9a8de6a0731d1898a2eca5cbfc00c88dd0c91cd5e007b8f4fef6262cee91a350505050565b5490565b600080600160a060020a0383161515614dad576000915061253a565b50506000903b1190565b60408051600160a060020a038316602480830191909152825180830390910181526044909101909152602081018051600160e060020a031660e060020a6370a08231021790526000908180614e0c8684615753565b60408051808201909152601c81527f534146455f4552435f32305f42414c414e43455f52455645525445440000000060208201529193509150821515614e975760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b508093505b50505092915050565b60408051600160a060020a03841660248201526044808201849052825180830390910181526064909101909152602081018051600160e060020a031660e060020a63a9059cbb02179052600090614efc8582615784565b95945050505050565b600160a060020a0381166000908152600e6020908152604080832080548251818502810185019093528083528493849360609385938493830182828015614f6b57602002820191906000526020600020905b815481526020019060010190808311614f57575b505050505092505b825186108015614f8257508784105b15615039578286815181101515614f9557fe5b60209081029091018101516000818152600c909252604090912090925090506003600682015460ff166003811115614fc957fe5b1480614fe757506002600682015460ff166003811115614fe557fe5b145b1561502e57600160a060020a0387166000908152600782016020526040812054955085111561502e5761501b8286896146e6565b61502b848663ffffffff61511116565b93505b600190950194614f73565b5050505050505050565b8051602002815290565b61136481614cf5565b60019392505050565b60008080608060020a85106150be576040805160e560020a62461bcd02815260206004820152601c60248201527f5f612073686f756c64206265206c657373207468616e20325e31323800000000604482015290519081900360640190fd5b50608060020a9150839050825b6000811115615109576001811615156150f3576150e882836157d2565b915060029004615104565b6150fd83836157d2565b9250600019015b6150cb565b505092915050565b6040805180820190915260118152607860020a704d4154485f4144445f4f564552464c4f570260208201526000908383019084821015614a615760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b6000818152600c602052604080822060068101805460ff191660021790559051909183917fd92fba445edb3153b571e6df782d7a66fd0ce668519273670820ee3a86da0ef49190a25050565b600160e060020a0319811660e060020a6301ffc9a70214919050565b600061269961520b613a14565b6158c7565b60008061521b6141fe565b604080518082019091526020808252600080516020615b4b83398151915290820152909150600160a060020a038216151561253a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b600160a060020a0381166000908152600e602052604090206152c3818463ffffffff61595a16565b15156124475780546040805180820190915260188152604260020a7710d597d3505617d41493d413d4d05314d7d4915050d2115102602082015290600a116153505760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b50805460018101825560008281526020902001839055505050565b600160a060020a0381166000908152600e60209081526040808320805482518185028101850190935280835284938493606093859384938301828280156153d157602002820191906000526020600020905b8154815260200190600101908083116153bd575b50505050600160a060020a0389166000908152600e602052604090209194506153fd919050600161595a565b1561546f57600160a060020a03871660009081527fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b6360205260409020546154459089906159a2565b9450600085111561546f5761545c600186896146e6565b61546c848663ffffffff61511116565b93505b600160a060020a0387166000908152600e6020908152604091829020805483518184028101840190945280845290918301828280156154cd57602002820191906000526020600020905b8154815260200190600101908083116154b9575b505050505092505b8251861080156154e457508784105b156150395782868151811015156154f757fe5b60209081029091018101516000818152600c90925260409091209092509050615549615529898663ffffffff614b0016565b600160a060020a03891660009081526007840160205260409020546159a2565b945060008511156155725761555f8286896146e6565b61556f848663ffffffff61511116565b93505b6001909501946154d5565b60408051600180825281830190925260609160208083019080388339019050509050818160008151811015156155af57fe5b60209081029091010152919050565b6000806155c9615210565b905080600160a060020a031663e95fdd1d8686866040518463ffffffff1660e060020a028152600401808481526020018060200183600160a060020a0316600160a060020a03168152602001828103825284818151815260200191508051906020019080838360005b8381101561564a578181015183820152602001615632565b50505050905090810190601f1680156156775780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015612c0d57600080fd5b815460009081805b82821015615743578486838154811015156156b757fe5b90600052602060002001541415615738575084546000190181811461570a5785818154811015156156e457fe5b906000526020600020015486838154811015156156fd57fe5b6000918252602090912001555b858181548110151561571857fe5b60009182526020822001558061572e87826159b1565b5060019350614e9c565b6001909101906156a0565b50600095945050505050565b9055565b6000806000806040516020818751602089018a5afa9250600083111561577857805191505b50909590945092505050565b6000806040516020818551602087016000895af160008111156157c8573d80156157b557602081146157be576157c6565b600193506157c6565b600183511493505b505b5090949350505050565b6000608060020a831115615844576040805160e560020a62461bcd02815260206004820152602860248201527f5f612073686f756c64206265206c657373207468616e206f7220657175616c20604482015260c360020a670e8de4064bc6264702606482015290519081900360840190fd5b608060020a821061589f576040805160e560020a62461bcd02815260206004820152601c60248201527f5f622073686f756c64206265206c657373207468616e20325e31323800000000604482015290519081900360640190fd5b60806158b9607f60020a6133ad868663ffffffff6149bf16565b9060020a9004905092915050565b6040805180820190915260158152605860020a7455494e5436345f4e554d4245525f544f4f5f4249470260208201526000906001604060020a038311156159535760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610cf3578181015183820152602001610cdb565b5090919050565b6000805b83548110156159985782848281548110151561597657fe5b906000526020600020015414156159905760019150614a66565b60010161595e565b5060009392505050565b600081831061595357816118ba565b8154818355818111156124475760008381526020902061244791810190830161165f91905b80821115610c5b57600081556001016159d656008dad640ab1b088990c972676ada708447affc660890ec9fc9a5483241c49f0364150505f415554485f4641494c4544000000000000000000000000000000000044495350555441424c455f53454e4445525f4e4f545f41475245454d454e5400ebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e0e3a87ad3cd0c04dcd1e538226de2b467c72316c162f937f5b6f7913616624625c513b2347f66d33af9d68f4a0ed7fbb73ce364889b2af7f3ee5764440da6a8a5245454e5452414e43595f5245454e5452414e545f43414c4c00000000000000bf05b9322505d747ab5880dfb677dc4864381e9fc3a25ccfa184a3a53d02f4b282c52f79cad6ac09c16c165c562b50c5e655a09a19bb99b2d182ab3caff020f2e180363919da754b2737a8f10869b7d2df0be7ef0e81339d3b5dabba166060ed9d4f140430c9045e12b5a104aa9e641c09b980a26ab8e12a32a2f3d155229ae344495350555441424c455f41475245454d454e545f53544154455f494e56414c486f6f6b73206d7573742062652063616c6c65642066726f6d20546f6b656e206dbe80ccdeafbf5f3fff5738b224414f85e9370da36f61bf21c65159df7409e9e855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb43565f414d4f554e545f43414e5f4e4f545f42455f5a45524f0000000000000043565f434f4e54524143545f5041555345440000000000000000000000000000494e49545f4e4f545f494e495449414c495a454400000000000000000000000043565f50524f504f53414c5f444f45535f4e4f545f4558495354000000000000a165627a7a723058206775e3ba531c946c844dea73c5e5ae852700f43fddd1572d4b56bcddf01792fd0029",
  "devdoc": {
    "methods": {
      "addProposal(string,bytes,uint256,bool,address)": {
        "params": {
          "_beneficiary": "Address that will receive payment",
          "_link": "IPFS or HTTP link with proposal's description",
          "_requestedAmount": "Tokens requested",
          "_stableRequestAmount": "Whether the requested amount is in the request token or the stable token, converted to the request token upon execution",
          "_title": "Title of the proposal"
        }
      },
      "addSignalingProposal(string,bytes)": {
        "params": {
          "_link": "IPFS or HTTP link with proposal's description",
          "_title": "Title of the proposal"
        }
      },
      "allowRecoverability(address)": {
        "details": "By default deriving from AragonApp makes it recoverable",
        "params": {
          "token": "Token address that would be recovered"
        },
        "return": "bool whether the app allows the recovery"
      },
      "calculateConviction(uint64,uint256,uint256)": {
        "details": "Conviction formula: a^t * y(0) + x * (1 - a^t) / (1 - a) Solidity implementation: y = (2^128 * a^t * y0 + x * D * (2^128 - 2^128 * a^t) / (D - aD) + 2^127) / 2^128",
        "params": {
          "_lastConv": "Last conviction record",
          "_oldAmount": "Amount of tokens staked until now",
          "_timePassed": "Number of blocks since last conviction record"
        },
        "return": "Current conviction"
      },
      "calculateThreshold(uint256)": {
        "details": "Formula: ρ * totalStaked / (1 - a) / (β - requestedAmount / total)**2 For the Solidity implementation we amplify ρ and β and simplify the formula: weight = ρ * D maxRatio = β * D decay = a * D threshold = weight * totalStaked * D ** 2 * funds ** 2 / (D - decay) / (maxRatio * funds - requestedAmount * D) ** 2",
        "params": {
          "_requestedAmount": "Requested amount of tokens on certain proposal"
        },
        "return": "Threshold a proposal's conviction should surpass in order to be able to executed it."
      },
      "canChallenge(uint256)": {
        "details": "IDisputable interface conformance"
      },
      "canClose(uint256)": {
        "details": "IDisputable interface conformance"
      },
      "canPerform(address,bytes32,uint256[])": {
        "details": "Check whether an action can be performed by a sender for a particular role on this app",
        "params": {
          "_params": "Permission params for the role",
          "_role": "Role on this app",
          "_sender": "Sender of the call"
        },
        "return": "Boolean indicating whether the sender has the permissions to perform the action.        Always returns false if the app hasn't been initialized yet."
      },
      "cancelProposal(uint256)": {
        "params": {
          "_proposalId": "Proposal id"
        }
      },
      "executeProposal(uint256)": {
        "details": "...by sending `@tokenAmount((self.requestToken(): address), self.getPropoal(_proposalId): ([uint256], address, uint256, uint256, uint64, bool))` to `self.getPropoal(_proposalId): (uint256, [address], uint256, uint256, uint64, bool)`",
        "params": {
          "_proposalId": "Proposal id"
        }
      },
      "getAgreement()": {
        "details": "Tell the linked Agreement",
        "return": "Agreement"
      },
      "getInitializationBlock()": {
        "return": "Block number in which the contract was initialized"
      },
      "getProposal(uint256)": {
        "details": "Get proposal details",
        "params": {
          "_proposalId": "Proposal id"
        },
        "return": "Requested amountIf requested in stable amountBeneficiary addressCurrent total stake of tokens on this proposalConviction this proposal had last time calculateAndSetConviction was calledBlock when calculateAndSetConviction was calledTrue if proposal has already been executedAgreementActionId assigned by the Agreements appProposalStatus defining the state of the proposalSubmitter of the proposal"
      },
      "getProposalVoterStake(uint256,address)": {
        "params": {
          "_proposalId": "Proposal id",
          "_voter": "Voter address"
        },
        "return": "Proposal voter stake"
      },
      "getRecoveryVault()": {
        "details": "Get the recovery vault for the app",
        "return": "Recovery vault address for the app"
      },
      "getTotalVoterStake(address)": {
        "params": {
          "_voter": "Voter address"
        },
        "return": "Total voter stake"
      },
      "getVoterStakedProposals(address)": {
        "params": {
          "_voter": "Voter address"
        },
        "return": "Voter proposals"
      },
      "hasInitialized()": {
        "return": "Whether the contract has been initialized by the time of the current block"
      },
      "onDisputableActionAllowed(uint256)": {
        "details": "This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier     is included. Subclasses should implement the internal implementation of the hook.",
        "params": {
          "_disputableActionId": "Identifier of the action to be allowed"
        }
      },
      "onDisputableActionChallenged(uint256,uint256,address)": {
        "details": "This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier     is included. Subclasses should implement the internal implementation of the hook.",
        "params": {
          "_challengeId": "Identifier of the challenge in the context of the Agreement",
          "_challenger": "Address that submitted the challenge",
          "_disputableActionId": "Identifier of the action to be challenged"
        }
      },
      "onDisputableActionRejected(uint256)": {
        "details": "This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier     is included. Subclasses should implement the internal implementation of the hook.",
        "params": {
          "_disputableActionId": "Identifier of the action to be rejected"
        }
      },
      "onDisputableActionVoided(uint256)": {
        "details": "This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier     is included. Subclasses should implement the internal implementation of the hook.",
        "params": {
          "_disputableActionId": "Identifier of the action to be voided"
        }
      },
      "pauseContract(bool)": {
        "params": {
          "_pauseEnabled": "Whether to enable or disable pause"
        }
      },
      "setAgreement(address)": {
        "params": {
          "_agreement": "Agreement instance to be set"
        }
      },
      "setConvictionCalculationSettings(uint256,uint256,uint256,uint256)": {
        "params": {
          "_decay": "The rate at which conviction is accrued or lost from a proposal",
          "_maxRatio": "Proposal threshold parameter",
          "_minThresholdStakePercentage": "The minimum percent of stake token max supply that is used for calculating conviction",
          "_weight": "Proposal threshold parameter"
        }
      },
      "setFundsManager(address)": {
        "params": {
          "_fundsManager": "The new funds manager"
        }
      },
      "setStableTokenOracleSettings(address,address)": {
        "params": {
          "_stableToken": "The new stable token",
          "_stableTokenOracle": "The new stable token oracle"
        }
      },
      "stakeAllToProposal(uint256)": {
        "params": {
          "_proposalId": "Proposal id"
        }
      },
      "stakeToProposal(uint256,uint256)": {
        "params": {
          "_amount": "Amount of tokens staked",
          "_proposalId": "Proposal id"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Query if a contract implements a certain interface",
        "params": {
          "_interfaceId": "The interface identifier being queried, as specified in ERC-165"
        },
        "return": "True if the contract implements the requested interface and if its not 0xffffffff, false otherwise"
      },
      "transferToVault(address)": {
        "params": {
          "_token": "Token balance to be sent to recovery vault."
        }
      },
      "withdrawAllFromProposal(uint256)": {
        "params": {
          "_proposalId": "Proposal id"
        }
      },
      "withdrawFromProposal(uint256,uint256)": {
        "params": {
          "_amount": "Amount of tokens withdrawn",
          "_proposalId": "Proposal id"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "addProposal(string,bytes,uint256,bool,address)": {
        "notice": "Create proposal `_title` for `@tokenAmount((self.requestToken(): address), _requestedAmount)` to `_beneficiary`"
      },
      "addSignalingProposal(string,bytes)": {
        "notice": "Create signaling proposal `_title`"
      },
      "cancelProposal(uint256)": {
        "notice": "Cancel proposal #`_proposalId`"
      },
      "executeProposal(uint256)": {
        "notice": "Execute proposal #`_proposalId`"
      },
      "getProposalVoterStake(uint256,address)": {
        "notice": "Get stake of voter `_voter` on proposal #`_proposalId`"
      },
      "getTotalVoterStake(address)": {
        "notice": "Get the total stake of voter `_voter` on all proposals"
      },
      "getVoterStakedProposals(address)": {
        "notice": "Get all proposal ID's voter `_voter` has currently staked to"
      },
      "onDisputableActionAllowed(uint256)": {
        "notice": "Allow disputable action #`_disputableActionId`"
      },
      "onDisputableActionChallenged(uint256,uint256,address)": {
        "notice": "Challenge disputable action #`_disputableActionId`"
      },
      "onDisputableActionRejected(uint256)": {
        "notice": "Reject disputable action #`_disputableActionId`"
      },
      "onDisputableActionVoided(uint256)": {
        "notice": "Void disputable action #`_disputableActionId`"
      },
      "pauseContract(bool)": {
        "notice": "Pause / unpause the contract preventing / allowing general interaction"
      },
      "setAgreement(address)": {
        "notice": "Set Agreement to `_agreement`"
      },
      "setConvictionCalculationSettings(uint256,uint256,uint256,uint256)": {
        "notice": "Update the conviction voting parameters"
      },
      "setFundsManager(address)": {
        "notice": "Update the funds manager"
      },
      "setStableTokenOracleSettings(address,address)": {
        "notice": "Update the stable token oracle settings"
      },
      "stakeAllToProposal(uint256)": {
        "notice": "Stake all my `(self.stakeToken(): address).symbol(): string` tokens on proposal #`_proposalId`"
      },
      "stakeToProposal(uint256,uint256)": {
        "notice": "Stake `@tokenAmount((self.stakeToken(): address), _amount)` on proposal #`_proposalId`"
      },
      "transferToVault(address)": {
        "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
      },
      "withdrawAllFromProposal(uint256)": {
        "notice": "Withdraw all `(self.stakeToken(): address).symbol(): string` tokens previously staked on proposal #`_proposalId`"
      },
      "withdrawFromInactiveProposals()": {
        "notice": "Withdraw all callers stake from inactive proposals"
      },
      "withdrawFromProposal(uint256,uint256)": {
        "notice": "Withdraw `@tokenAmount((self.stakeToken(): address), _amount)` previously staked on proposal #`_proposalId`"
      }
    }
  }
}