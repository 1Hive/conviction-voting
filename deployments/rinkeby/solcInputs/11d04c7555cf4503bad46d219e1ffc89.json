{
  "language": "Solidity",
  "sources": {
    "contracts/ConvictionVoting.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"@aragon/os/contracts/apps/disputable/DisputableAragonApp.sol\";\nimport \"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\";\nimport \"@aragon/os/contracts/lib/math/SafeMath.sol\";\nimport \"@aragon/os/contracts/lib/math/SafeMath64.sol\";\nimport \"@aragon/os/contracts/lib/math/Math.sol\";\nimport \"@1hive/apps-token-manager/contracts/TokenManagerHook.sol\";\nimport \"@1hive/funds-manager/contracts/FundsManager.sol\";\nimport \"./lib/ArrayUtils.sol\";\nimport \"./lib/IPriceOracle.sol\";\n\ncontract ConvictionVoting is DisputableAragonApp, TokenManagerHook {\n    using SafeMath for uint256;\n    using SafeMath64 for uint64;\n    using ArrayUtils for uint256[];\n\n    // bytes32 constant public PAUSE_CONTRACT_ROLE = keccak256(\"PAUSE_CONTRACT_ROLE\");\n    bytes32 constant public PAUSE_CONTRACT_ROLE = 0x0e3a87ad3cd0c04dcd1e538226de2b467c72316c162f937f5b6f791361662462;\n    // bytes32 constant public UPDATE_SETTINGS_ROLE = keccak256(\"UPDATE_SETTINGS_ROLE\");\n    bytes32 constant public UPDATE_SETTINGS_ROLE = 0x9d4f140430c9045e12b5a104aa9e641c09b980a26ab8e12a32a2f3d155229ae3;\n    // bytes32 constant public CREATE_PROPOSALS_ROLE = keccak256(\"CREATE_PROPOSALS_ROLE\");\n    bytes32 constant public CREATE_PROPOSALS_ROLE = 0xbf05b9322505d747ab5880dfb677dc4864381e9fc3a25ccfa184a3a53d02f4b2;\n    // bytes32 constant public CANCEL_PROPOSALS_ROLE = keccak256(\"CANCEL_PROPOSALS_ROLE\");\n    bytes32 constant public CANCEL_PROPOSALS_ROLE = 0x82c52f79cad6ac09c16c165c562b50c5e655a09a19bb99b2d182ab3caff020f2;\n\n    uint256 public constant D = 10000000;\n    uint256 public constant ONE_HUNDRED_PERCENT = 1e18;\n    uint256 private constant TWO_128 = 0x100000000000000000000000000000000; // 2^128\n    uint256 private constant TWO_127 = 0x80000000000000000000000000000000; // 2^127\n    uint256 private constant TWO_64 = 0x10000000000000000; // 2^64\n    uint256 public constant ABSTAIN_PROPOSAL_ID = 1;\n    uint64 public constant MAX_STAKED_PROPOSALS = 10;\n\n    string private constant ERROR_CONTRACT_PAUSED = \"CV_CONTRACT_PAUSED\";\n    string private constant ERROR_PROPOSAL_DOES_NOT_EXIST = \"CV_PROPOSAL_DOES_NOT_EXIST\";\n    string private constant ERROR_REQUESTED_AMOUNT_ZERO = \"CV_REQUESTED_AMOUNT_ZERO\";\n    string private constant ERROR_NO_BENEFICIARY = \"CV_NO_BENEFICIARY\";\n    string private constant ERROR_STAKING_ALREADY_STAKED = \"CV_STAKING_ALREADY_STAKED\";\n    string private constant ERROR_PROPOSAL_NOT_ACTIVE = \"CV_PROPOSAL_NOT_ACTIVE\";\n    string private constant ERROR_CANNOT_EXECUTE_ABSTAIN_PROPOSAL = \"CV_CANNOT_EXECUTE_ABSTAIN_PROPOSAL\";\n    string private constant ERROR_CANNOT_EXECUTE_ZERO_VALUE_PROPOSAL = \"CV_CANNOT_EXECUTE_ZERO_VALUE_PROPOSAL\";\n    string private constant ERROR_INSUFFICIENT_CONVICION = \"CV_INSUFFICIENT_CONVICION\";\n    string private constant ERROR_SENDER_CANNOT_CANCEL = \"CV_SENDER_CANNOT_CANCEL\";\n    string private constant ERROR_CANNOT_CANCEL_ABSTAIN_PROPOSAL = \"CV_CANNOT_CANCEL_ABSTAIN_PROPOSAL\";\n    string private constant ERROR_AMOUNT_OVER_MAX_RATIO = \"CV_AMOUNT_OVER_MAX_RATIO\";\n    string private constant ERROR_INCORRECT_TOKEN_MANAGER_HOOK = \"CV_INCORRECT_TOKEN_MANAGER_HOOK\";\n    string private constant ERROR_AMOUNT_CAN_NOT_BE_ZERO = \"CV_AMOUNT_CAN_NOT_BE_ZERO\";\n    string private constant ERROR_INCORRECT_PROPOSAL_STATUS = \"CV_INCORRECT_PROPOSAL_STATUS\";\n    string private constant ERROR_STAKING_MORE_THAN_AVAILABLE = \"CV_STAKING_MORE_THAN_AVAILABLE\";\n    string private constant ERROR_MAX_PROPOSALS_REACHED = \"CV_MAX_PROPOSALS_REACHED\";\n    string private constant ERROR_WITHDRAW_MORE_THAN_STAKED = \"CV_WITHDRAW_MORE_THAN_STAKED\";\n    string private constant ERROR_NO_TOKEN_MANAGER_SET = \"CV_NO_TOKEN_MANAGER_SET\";\n\n    enum ProposalStatus {\n        Active,              // A vote that has been reported to Agreements\n        Paused,              // A vote that is being challenged by Agreements\n        Cancelled,           // A vote that has been cancelled\n        Executed             // A vote that has been executed\n    }\n\n    struct Proposal {\n        uint256 requestedAmount;\n        bool stableRequestAmount;\n        address beneficiary;\n        uint256 stakedTokens;\n        uint256 convictionLast;\n        uint64 blockLast;\n        uint256 agreementActionId;\n        ProposalStatus proposalStatus;\n        mapping(address => uint256) voterStake;\n        address submitter;\n    }\n\n    MiniMeToken public stakeToken;\n    address public requestToken;\n    address public stableToken;\n    IPriceOracle public stableTokenOracle;\n    FundsManager public fundsManager;\n    uint256 public decay;\n    uint256 public maxRatio;\n    uint256 public weight;\n    uint256 public minThresholdStakePercentage;\n    uint256 public proposalCounter;\n    uint256 public totalStaked;\n    bool public contractPaused;\n\n    mapping(uint256 => Proposal) internal proposals;\n    mapping(address => uint256) internal totalVoterStake;\n    mapping(address => uint256[]) internal voterStakedProposals;\n\n    event ContractPaused(bool pauseEnabled);\n    event OracleSettingsChanged(IPriceOracle stableTokenOracle, address stableToken);\n    event FundsManagerChanged(FundsManager fundsManager);\n    event ConvictionSettingsChanged(uint256 decay, uint256 maxRatio, uint256 weight, uint256 minThresholdStakePercentage);\n    event ProposalAdded(address indexed entity, uint256 indexed id, uint256 indexed actionId, string title, bytes link, uint256 amount, bool stable, address beneficiary);\n    event StakeAdded(address indexed entity, uint256 indexed id, uint256  amount, uint256 tokensStaked, uint256 totalTokensStaked, uint256 conviction);\n    event StakeWithdrawn(address entity, uint256 indexed id, uint256 amount, uint256 tokensStaked, uint256 totalTokensStaked, uint256 conviction);\n    event ProposalExecuted(uint256 indexed id, uint256 conviction);\n    event ProposalPaused(uint256 indexed proposalId, uint256 indexed challengeId);\n    event ProposalResumed(uint256 indexed proposalId);\n    event ProposalCancelled(uint256 indexed proposalId);\n    event ProposalRejected(uint256 indexed proposalId);\n\n    modifier proposalExists(uint256 _proposalId) {\n        require(_proposalId == 1 || proposals[_proposalId].submitter != address(0), ERROR_PROPOSAL_DOES_NOT_EXIST);\n        _;\n    }\n\n    modifier notPaused() {\n        require(!contractPaused, ERROR_CONTRACT_PAUSED);\n        _;\n    }\n\n    function initialize(\n        MiniMeToken _stakeToken,\n        address _requestToken,\n        address _stableToken,\n        IPriceOracle _stableTokenOracle,\n        FundsManager _fundsManager,\n        uint256 _decay,\n        uint256 _maxRatio,\n        uint256 _weight,\n        uint256 _minThresholdStakePercentage\n    )\n        external onlyInit\n    {\n        proposalCounter = 2; // First proposal should be #2, #1 is reserved for abstain proposal, #0 is not used for better UX.\n        stakeToken = _stakeToken;\n        requestToken = _requestToken;\n        stableToken = _stableToken;\n        stableTokenOracle = _stableTokenOracle;\n        fundsManager = _fundsManager;\n        decay = _decay;\n        maxRatio = _maxRatio;\n        weight = _weight;\n        minThresholdStakePercentage = _minThresholdStakePercentage;\n\n        proposals[ABSTAIN_PROPOSAL_ID] = Proposal(\n            0,\n            false,\n            0x0,\n            0,\n            0,\n            0,\n            0,\n            ProposalStatus.Active,\n            0x0\n        );\n        emit ProposalAdded(0x0, ABSTAIN_PROPOSAL_ID, 0, \"Abstain proposal\", \"\", 0, false, 0x0);\n\n        initialized();\n    }\n\n    /**\n    * @notice Pause / unpause the contract preventing / allowing general interaction\n    * @param _pauseEnabled Whether to enable or disable pause\n    */\n    function pauseContract(bool _pauseEnabled) external auth(PAUSE_CONTRACT_ROLE) {\n        contractPaused = _pauseEnabled;\n        emit ContractPaused(contractPaused);\n    }\n\n    /**\n    * @notice Update the stable token oracle settings\n    * @param _stableTokenOracle The new stable token oracle\n    * @param _stableToken The new stable token\n    */\n    function setStableTokenOracleSettings(IPriceOracle _stableTokenOracle, address _stableToken)\n        external auth(UPDATE_SETTINGS_ROLE)\n    {\n        stableTokenOracle = _stableTokenOracle;\n        stableToken = _stableToken;\n\n        emit OracleSettingsChanged(_stableTokenOracle, _stableToken);\n    }\n\n    /**\n    * @notice Update the funds manager\n    * @param _fundsManager The new funds manager\n    */\n    function setFundsManager(FundsManager _fundsManager) external auth(UPDATE_SETTINGS_ROLE) {\n        fundsManager = _fundsManager;\n        emit FundsManagerChanged(_fundsManager);\n    }\n\n    /**\n     * @notice Update the conviction voting parameters\n     * @param _decay The rate at which conviction is accrued or lost from a proposal\n     * @param _maxRatio Proposal threshold parameter\n     * @param _weight Proposal threshold parameter\n     * @param _minThresholdStakePercentage The minimum percent of stake token max supply that is used for calculating\n        conviction\n     */\n    function setConvictionCalculationSettings(\n        uint256 _decay,\n        uint256 _maxRatio,\n        uint256 _weight,\n        uint256 _minThresholdStakePercentage\n    )\n        external auth(UPDATE_SETTINGS_ROLE)\n    {\n        decay = _decay;\n        maxRatio = _maxRatio;\n        weight = _weight;\n        minThresholdStakePercentage = _minThresholdStakePercentage;\n\n        emit ConvictionSettingsChanged(_decay, _maxRatio, _weight, _minThresholdStakePercentage);\n    }\n\n    /**\n     * @notice Create signaling proposal `_title`\n     * @param _title Title of the proposal\n     * @param _link IPFS or HTTP link with proposal's description\n     */\n    function addSignalingProposal(string _title, bytes _link) external isInitialized auth(CREATE_PROPOSALS_ROLE) {\n        _addProposal(_title, _link, 0, false, address(0));\n    }\n\n    /**\n     * @notice Create proposal `_title` for `@tokenAmount((self.requestToken(): address), _requestedAmount)` to `_beneficiary`\n     * @param _title Title of the proposal\n     * @param _link IPFS or HTTP link with proposal's description\n     * @param _requestedAmount Tokens requested\n     * @param _stableRequestAmount Whether the requested amount is in the request token or the stable token, converted to the request token upon execution\n     * @param _beneficiary Address that will receive payment\n     */\n    function addProposal(string _title, bytes _link, uint256 _requestedAmount, bool _stableRequestAmount, address _beneficiary)\n        external isInitialized auth(CREATE_PROPOSALS_ROLE)\n    {\n        require(_requestedAmount > 0, ERROR_REQUESTED_AMOUNT_ZERO);\n        require(_beneficiary != address(0), ERROR_NO_BENEFICIARY);\n\n        _addProposal(_title, _link, _requestedAmount, _stableRequestAmount, _beneficiary);\n    }\n\n    /**\n      * @notice Stake `@tokenAmount((self.stakeToken(): address), _amount)` on proposal #`_proposalId`\n      * @param _proposalId Proposal id\n      * @param _amount Amount of tokens staked\n      */\n    function stakeToProposal(uint256 _proposalId, uint256 _amount) external isInitialized {\n        _stake(_proposalId, _amount, msg.sender);\n    }\n\n    /**\n     * @notice Stake all my `(self.stakeToken(): address).symbol(): string` tokens on proposal #`_proposalId`\n     * @param _proposalId Proposal id\n     */\n    function stakeAllToProposal(uint256 _proposalId) external isInitialized {\n        require(totalVoterStake[msg.sender] == 0, ERROR_STAKING_ALREADY_STAKED);\n        _stake(_proposalId, stakeToken.balanceOf(msg.sender), msg.sender);\n    }\n\n    /**\n     * @notice Withdraw `@tokenAmount((self.stakeToken(): address), _amount)` previously staked on proposal #`_proposalId`\n     * @param _proposalId Proposal id\n     * @param _amount Amount of tokens withdrawn\n     */\n    function withdrawFromProposal(uint256 _proposalId, uint256 _amount) external isInitialized proposalExists(_proposalId) {\n        _withdrawFromProposal(_proposalId, _amount, msg.sender);\n    }\n\n    /**\n     * @notice Withdraw all `(self.stakeToken(): address).symbol(): string` tokens previously staked on proposal #`_proposalId`\n     * @param _proposalId Proposal id\n     */\n    function withdrawAllFromProposal(uint256 _proposalId) external isInitialized proposalExists(_proposalId) {\n        _withdrawFromProposal(_proposalId, proposals[_proposalId].voterStake[msg.sender], msg.sender);\n    }\n\n    /**\n     * @notice Withdraw all callers stake from inactive proposals\n     */\n    function withdrawFromInactiveProposals() external isInitialized {\n        _withdrawInactiveStakedTokens(uint256(-1), msg.sender);\n    }\n\n    /**\n     * @notice Execute proposal #`_proposalId`\n     * @dev ...by sending `@tokenAmount((self.requestToken(): address), self.getPropoal(_proposalId): ([uint256], address, uint256, uint256, uint64, bool))` to `self.getPropoal(_proposalId): (uint256, [address], uint256, uint256, uint64, bool)`\n     * @param _proposalId Proposal id\n     */\n    function executeProposal(uint256 _proposalId) external notPaused isInitialized proposalExists(_proposalId) {\n        Proposal storage proposal = proposals[_proposalId];\n\n        require(_proposalId != ABSTAIN_PROPOSAL_ID, ERROR_CANNOT_EXECUTE_ABSTAIN_PROPOSAL);\n        require(proposal.requestedAmount > 0, ERROR_CANNOT_EXECUTE_ZERO_VALUE_PROPOSAL);\n        require(proposal.proposalStatus == ProposalStatus.Active, ERROR_PROPOSAL_NOT_ACTIVE);\n\n        _calculateAndSetConviction(proposal, proposal.stakedTokens);\n        uint256 requestedAmount = _getRequestAmount(proposal);\n        require(proposal.convictionLast > calculateThreshold(requestedAmount), ERROR_INSUFFICIENT_CONVICION);\n\n        proposal.proposalStatus = ProposalStatus.Executed;\n        _closeDisputableAction(proposal.agreementActionId);\n\n        fundsManager.transfer(requestToken, proposal.beneficiary, requestedAmount);\n\n        emit ProposalExecuted(_proposalId, proposal.convictionLast);\n    }\n\n    /**\n     * @notice Cancel proposal #`_proposalId`\n     * @param _proposalId Proposal id\n     */\n    function cancelProposal(uint256 _proposalId) external notPaused proposalExists(_proposalId) {\n        Proposal storage proposal = proposals[_proposalId];\n\n        bool senderHasPermission = canPerform(msg.sender, CANCEL_PROPOSALS_ROLE, new uint256[](0));\n        require(proposal.submitter == msg.sender || senderHasPermission, ERROR_SENDER_CANNOT_CANCEL);\n        require(_proposalId != ABSTAIN_PROPOSAL_ID, ERROR_CANNOT_CANCEL_ABSTAIN_PROPOSAL);\n        require(proposal.proposalStatus == ProposalStatus.Active, ERROR_PROPOSAL_NOT_ACTIVE);\n\n        proposal.proposalStatus = ProposalStatus.Cancelled;\n        _closeDisputableAction(proposal.agreementActionId);\n\n        emit ProposalCancelled(_proposalId);\n    }\n\n    /**\n     * @dev Get proposal details\n     * @param _proposalId Proposal id\n     * @return Requested amount\n     * @return If requested in stable amount\n     * @return Beneficiary address\n     * @return Current total stake of tokens on this proposal\n     * @return Conviction this proposal had last time calculateAndSetConviction was called\n     * @return Block when calculateAndSetConviction was called\n     * @return True if proposal has already been executed\n     * @return AgreementActionId assigned by the Agreements app\n     * @return ProposalStatus defining the state of the proposal\n     * @return Submitter of the proposal\n     */\n    function getProposal(uint256 _proposalId) external view returns (\n        uint256 requestedAmount,\n        bool stableRequestAmount,\n        address beneficiary,\n        uint256 stakedTokens,\n        uint256 convictionLast,\n        uint64 blockLast,\n        uint256 agreementActionId,\n        ProposalStatus proposalStatus,\n        address submitter,\n        uint256 threshold\n    )\n    {\n        Proposal storage proposal = proposals[_proposalId];\n        threshold = proposal.requestedAmount == 0 ? 0 : calculateThreshold(_getRequestAmount(proposal));\n        return (\n            proposal.requestedAmount,\n            proposal.stableRequestAmount,\n            proposal.beneficiary,\n            proposal.stakedTokens,\n            proposal.convictionLast,\n            proposal.blockLast,\n            proposal.agreementActionId,\n            proposal.proposalStatus,\n            proposal.submitter,\n            threshold\n        );\n    }\n\n    /**\n     * @notice Get stake of voter `_voter` on proposal #`_proposalId`\n     * @param _proposalId Proposal id\n     * @param _voter Voter address\n     * @return Proposal voter stake\n     */\n    function getProposalVoterStake(uint256 _proposalId, address _voter) external view returns (uint256) {\n        return proposals[_proposalId].voterStake[_voter];\n    }\n\n    /**\n     * @notice Get the total stake of voter `_voter` on all proposals\n     * @param _voter Voter address\n     * @return Total voter stake\n     */\n    function getTotalVoterStake(address _voter) external view returns (uint256) {\n        return totalVoterStake[_voter];\n    }\n\n    /**\n     * @notice Get all proposal ID's voter `_voter` has currently staked to\n     * @param _voter Voter address\n     * @return Voter proposals\n     */\n    function getVoterStakedProposals(address _voter) external view returns (uint256[]) {\n        return voterStakedProposals[_voter];\n    }\n\n    /**\n    * @dev IDisputable interface conformance\n    */\n    function canChallenge(uint256 _proposalId) external view returns (bool) {\n        return proposals[_proposalId].proposalStatus == ProposalStatus.Active && !contractPaused;\n    }\n\n    /**\n    * @dev IDisputable interface conformance\n    */\n    function canClose(uint256 _proposalId) external view returns (bool) {\n        Proposal storage proposal = proposals[_proposalId];\n\n        return proposal.proposalStatus == ProposalStatus.Executed\n            || proposal.proposalStatus == ProposalStatus.Cancelled;\n    }\n\n    /**\n     * @dev Conviction formula: a^t * y(0) + x * (1 - a^t) / (1 - a)\n     * Solidity implementation: y = (2^128 * a^t * y0 + x * D * (2^128 - 2^128 * a^t) / (D - aD) + 2^127) / 2^128\n     * @param _timePassed Number of blocks since last conviction record\n     * @param _lastConv Last conviction record\n     * @param _oldAmount Amount of tokens staked until now\n     * @return Current conviction\n     */\n    function calculateConviction(uint64 _timePassed, uint256 _lastConv, uint256 _oldAmount) public view returns(uint256) {\n        uint256 t = uint256(_timePassed);\n        // atTWO_128 = 2^128 * a^t\n        uint256 atTWO_128 = _pow((decay << 128).div(D), t);\n        // solium-disable-previous-line\n        // conviction = (atTWO_128 * _lastConv + _oldAmount * D * (2^128 - atTWO_128) / (D - aD) + 2^127) / 2^128\n        return (atTWO_128.mul(_lastConv).add(_oldAmount.mul(D).mul(TWO_128.sub(atTWO_128)).div(D - decay))).add(TWO_127) >> 128;\n    }\n\n    /**\n     * @dev Formula: ρ * totalStaked / (1 - a) / (β - requestedAmount / total)**2\n     * For the Solidity implementation we amplify ρ and β and simplify the formula:\n     * weight = ρ * D\n     * maxRatio = β * D\n     * decay = a * D\n     * threshold = weight * totalStaked * D ** 2 * funds ** 2 / (D - decay) / (maxRatio * funds - requestedAmount * D) ** 2\n     * @param _requestedAmount Requested amount of tokens on certain proposal\n     * @return Threshold a proposal's conviction should surpass in order to be able to\n     * executed it.\n     */\n    function calculateThreshold(uint256 _requestedAmount) public view returns (uint256 _threshold) {\n        uint256 funds = fundsManager.balance(requestToken);\n        require(maxRatio.mul(funds) > _requestedAmount.mul(D), ERROR_AMOUNT_OVER_MAX_RATIO);\n        // denom = maxRatio * 2 ** 64 / D  - requestedAmount * 2 ** 64 / funds\n        uint256 denom = (maxRatio << 64).div(D).sub((_requestedAmount << 64).div(funds));\n        // _threshold = (weight * 2 ** 128 / D) / (denom ** 2 / 2 ** 64) * totalStaked * D / 2 ** 128\n        _threshold = ((weight << 128).div(D).div(denom.mul(denom) >> 64)).mul(D).div(D.sub(decay)).mul(_totalStaked()) >> 64;\n    }\n\n    function _totalStaked() internal view returns (uint256) {\n        uint256 minTotalStake = (stakeToken.totalSupply().mul(minThresholdStakePercentage)).div(ONE_HUNDRED_PERCENT);\n        return totalStaked < minTotalStake ? minTotalStake : totalStaked;\n    }\n\n    function _getRequestAmount(Proposal storage proposal) internal view returns (uint256) {\n        return proposal.stableRequestAmount ?\n            stableTokenOracle.consult(stableToken, proposal.requestedAmount, requestToken) : proposal.requestedAmount;\n    }\n\n    /**\n     * @dev Internal implementation of the `onDisputableActionChallenged` hook\n     * @param _proposalId Identification number of the disputable action to be challenged\n     */\n    function _onDisputableActionChallenged(uint256 _proposalId, uint256  _challengeId, address /* _challenger */) internal {\n        Proposal storage proposal = proposals[_proposalId];\n        proposal.proposalStatus = ProposalStatus.Paused;\n\n        emit ProposalPaused(_proposalId, _challengeId);\n    }\n\n    /**\n    * @dev Internal implementation of the `onDisputableActionRejected` hook\n    * @param _proposalId Identification number of the disputable action to be rejected\n    */\n    function _onDisputableActionRejected(uint256 _proposalId) internal {\n        Proposal storage proposal = proposals[_proposalId];\n        proposal.proposalStatus = ProposalStatus.Cancelled;\n\n        emit ProposalRejected(_proposalId);\n    }\n\n    /**\n    * @dev Internal implementation of the `onDisputableActionAllowed` hook\n    * @param _proposalId Identification number of the disputable action to be allowed\n    */\n    function _onDisputableActionAllowed(uint256 _proposalId) internal {\n        Proposal storage proposal = proposals[_proposalId];\n        proposal.proposalStatus = ProposalStatus.Active;\n\n        emit ProposalResumed(_proposalId);\n    }\n\n    /**\n    * @dev Internal implementation of the `onDisputableActionVoided` hook\n    * @param _proposalId Identification number of the disputable action to be voided\n    */\n    function _onDisputableActionVoided(uint256 _proposalId) internal {\n        _onDisputableActionAllowed(_proposalId);\n    }\n\n    /**\n     * @dev Overrides TokenManagerHook's `_onRegisterAsHook`\n     */\n    function _onRegisterAsHook(address _tokenManager, uint256 _hookId, address _token) internal {\n        require(_token == address(stakeToken), ERROR_INCORRECT_TOKEN_MANAGER_HOOK);\n    }\n\n    /**\n     * @dev Overrides TokenManagerHook's `_onTransfer`\n     */\n    function _onTransfer(address _from, address _to, uint256 _amount) internal returns (bool) {\n        if (_from == 0x0) {\n            return true; // Do nothing on token mintings\n        }\n\n        uint256 newBalance = stakeToken.balanceOf(_from).sub(_amount);\n        if (newBalance < totalVoterStake[_from]) {\n            _withdrawInactiveStakedTokens(totalVoterStake[_from].sub(newBalance), _from);\n        }\n\n        if (newBalance < totalVoterStake[_from]) {\n            _withdrawActiveStakedTokens(totalVoterStake[_from].sub(newBalance), _from);\n        }\n\n        return true;\n    }\n\n    /**\n     * Multiply _a by _b / 2^128.  Parameter _a should be less than or equal to\n     * 2^128 and parameter _b should be less than 2^128.\n     * @param _a left argument\n     * @param _b right argument\n     * @return _a * _b / 2^128\n     */\n    function _mul(uint256 _a, uint256 _b) internal pure returns (uint256 _result) {\n        require(_a <= TWO_128, \"_a should be less than or equal to 2^128\");\n        require(_b < TWO_128, \"_b should be less than 2^128\");\n        return _a.mul(_b).add(TWO_127) >> 128;\n    }\n\n    /**\n     * Calculate (_a / 2^128)^_b * 2^128.  Parameter _a should be less than 2^128.\n     *\n     * @param _a left argument\n     * @param _b right argument\n     * @return (_a / 2^128)^_b * 2^128\n     */\n    function _pow(uint256 _a, uint256 _b) internal pure returns (uint256 _result) {\n        require(_a < TWO_128, \"_a should be less than 2^128\");\n        uint256 a = _a;\n        uint256 b = _b;\n        _result = TWO_128;\n        while (b > 0) {\n            if (b & 1 == 0) {\n                a = _mul(a, a);\n                b >>= 1;\n            } else {\n                _result = _mul(_result, a);\n                b -= 1;\n            }\n        }\n    }\n\n    /**\n     * @dev Calculate conviction and store it on the proposal\n     * @param _proposal Proposal\n     * @param _oldStaked Amount of tokens staked on a proposal until now\n     */\n    function _calculateAndSetConviction(Proposal storage _proposal, uint256 _oldStaked) internal {\n        uint64 blockNumber = getBlockNumber64();\n        assert(_proposal.blockLast <= blockNumber);\n        if (_proposal.blockLast == blockNumber) {\n            return; // Conviction already stored\n        }\n        // calculateConviction and store it\n        uint256 conviction = calculateConviction(\n            blockNumber - _proposal.blockLast, // we assert it doesn't overflow above\n            _proposal.convictionLast,\n            _oldStaked\n        );\n        _proposal.blockLast = blockNumber;\n        _proposal.convictionLast = conviction;\n    }\n\n    function _addProposal(string _title, bytes _link, uint256 _requestedAmount, bool _stableRequestAmount, address _beneficiary)\n        internal notPaused\n    {\n        uint256 agreementActionId = _registerDisputableAction(proposalCounter, _link, msg.sender);\n        proposals[proposalCounter] = Proposal(\n            _requestedAmount,\n            _stableRequestAmount,\n            _beneficiary,\n            0,\n            0,\n            0,\n            agreementActionId,\n            ProposalStatus.Active,\n            msg.sender\n        );\n\n        emit ProposalAdded(msg.sender, proposalCounter, agreementActionId, _title, _link, _requestedAmount, _stableRequestAmount, _beneficiary);\n        proposalCounter++;\n    }\n\n    /**\n     * @dev Stake an amount of tokens on a proposal\n     * @param _proposalId Proposal id\n     * @param _amount Amount of staked tokens\n     * @param _from Account from which we stake\n     */\n    function _stake(uint256 _proposalId, uint256 _amount, address _from) internal notPaused proposalExists(_proposalId) {\n        require(getTokenManager() != address(0), ERROR_NO_TOKEN_MANAGER_SET);\n\n        Proposal storage proposal = proposals[_proposalId];\n        require(_amount > 0, ERROR_AMOUNT_CAN_NOT_BE_ZERO);\n        require(proposal.proposalStatus == ProposalStatus.Active || proposal.proposalStatus == ProposalStatus.Paused,\n            ERROR_INCORRECT_PROPOSAL_STATUS);\n\n        uint256 unstakedAmount = stakeToken.balanceOf(_from).sub(totalVoterStake[_from]);\n        if (_amount > unstakedAmount) {\n            _withdrawInactiveStakedTokens(_amount.sub(unstakedAmount), _from);\n        }\n\n        require(totalVoterStake[_from].add(_amount) <= stakeToken.balanceOf(_from), ERROR_STAKING_MORE_THAN_AVAILABLE);\n\n        uint256 previousStake = proposal.stakedTokens;\n        proposal.stakedTokens = proposal.stakedTokens.add(_amount);\n        proposal.voterStake[_from] = proposal.voterStake[_from].add(_amount);\n        totalVoterStake[_from] = totalVoterStake[_from].add(_amount);\n        totalStaked = totalStaked.add(_amount);\n\n        if (proposal.blockLast == 0) {\n            proposal.blockLast = getBlockNumber64();\n        } else {\n            _calculateAndSetConviction(proposal, previousStake);\n        }\n\n        _updateVoterStakedProposals(_proposalId, _from);\n\n        emit StakeAdded(_from, _proposalId, _amount, proposal.voterStake[_from], proposal.stakedTokens, proposal.convictionLast);\n    }\n\n    function _updateVoterStakedProposals(uint256 _proposalId, address _submitter) internal {\n        uint256[] storage voterStakedProposalsArray = voterStakedProposals[_submitter];\n\n        if (!voterStakedProposalsArray.contains(_proposalId)) {\n            require(voterStakedProposalsArray.length < MAX_STAKED_PROPOSALS, ERROR_MAX_PROPOSALS_REACHED);\n            voterStakedProposalsArray.push(_proposalId);\n        }\n    }\n\n    /**\n     * @dev Withdraw staked tokens from executed proposals until a target amount is reached.\n     * @param _targetAmount Target at which to stop withdrawing tokens\n     * @param _from Account to withdraw from\n     */\n    function _withdrawInactiveStakedTokens(uint256 _targetAmount, address _from) internal {\n        uint256 i = 0;\n        uint256 toWithdraw;\n        uint256 withdrawnAmount = 0;\n        uint256[] memory voterStakedProposalsCopy = voterStakedProposals[_from];\n\n        while (i < voterStakedProposalsCopy.length && withdrawnAmount < _targetAmount) {\n            uint256 proposalId = voterStakedProposalsCopy[i];\n            Proposal storage proposal = proposals[proposalId];\n\n            if (proposal.proposalStatus == ProposalStatus.Executed || proposal.proposalStatus == ProposalStatus.Cancelled) {\n                toWithdraw = proposal.voterStake[_from];\n                if (toWithdraw > 0) {\n                    _withdrawFromProposal(proposalId, toWithdraw, _from);\n                    withdrawnAmount = withdrawnAmount.add(toWithdraw);\n                }\n            }\n            i++;\n        }\n    }\n\n    /**\n     * @dev Withdraw staked tokens from active proposals until a target amount is reached.\n     *      Assumes there are no inactive staked proposals, to save gas.\n     * @param _targetAmount Target at which to stop withdrawing tokens\n     * @param _from Account to withdraw from\n     */\n    function _withdrawActiveStakedTokens(uint256 _targetAmount, address _from) internal {\n        uint256 i = 0;\n        uint256 toWithdraw;\n        uint256 withdrawnAmount = 0;\n        uint256[] memory voterStakedProposalsCopy = voterStakedProposals[_from];\n\n        if (voterStakedProposals[_from].contains(ABSTAIN_PROPOSAL_ID)) {\n            toWithdraw = Math.min256(_targetAmount, proposals[ABSTAIN_PROPOSAL_ID].voterStake[_from]);\n            if (toWithdraw > 0) {\n                _withdrawFromProposal(ABSTAIN_PROPOSAL_ID, toWithdraw, _from);\n                withdrawnAmount = withdrawnAmount.add(toWithdraw);\n            }\n        }\n\n        // We reset this variable as _withdrawFromProposal can update voterStakedProposals\n        voterStakedProposalsCopy = voterStakedProposals[_from];\n\n        while (i < voterStakedProposalsCopy.length && withdrawnAmount < _targetAmount) {\n            uint256 proposalId = voterStakedProposalsCopy[i];\n            Proposal storage proposal = proposals[proposalId];\n\n            // For active proposals, we only subtract the needed amount to reach the target\n            toWithdraw = Math.min256(_targetAmount.sub(withdrawnAmount), proposal.voterStake[_from]);\n            if (toWithdraw > 0) {\n                _withdrawFromProposal(proposalId, toWithdraw, _from);\n                withdrawnAmount = withdrawnAmount.add(toWithdraw);\n            }\n            i++;\n        }\n    }\n\n    /**\n     * @dev Withdraw an amount of tokens from a proposal\n     * @param _proposalId Proposal id\n     * @param _amount Amount of withdrawn tokens\n     * @param _from Account to withdraw from\n     */\n    function _withdrawFromProposal(uint256 _proposalId, uint256 _amount, address _from) internal {\n        Proposal storage proposal = proposals[_proposalId];\n        require(proposal.voterStake[_from] >= _amount, ERROR_WITHDRAW_MORE_THAN_STAKED);\n        require(_amount > 0, ERROR_AMOUNT_CAN_NOT_BE_ZERO);\n\n        uint256 previousStake = proposal.stakedTokens;\n        proposal.stakedTokens = proposal.stakedTokens.sub(_amount);\n        proposal.voterStake[_from] = proposal.voterStake[_from].sub(_amount);\n        totalVoterStake[_from] = totalVoterStake[_from].sub(_amount);\n        totalStaked = totalStaked.sub(_amount);\n\n        if (proposal.voterStake[_from] == 0) {\n            voterStakedProposals[_from].deleteItem(_proposalId);\n        }\n\n        if (proposal.proposalStatus == ProposalStatus.Active || proposal.proposalStatus == ProposalStatus.Paused) {\n            _calculateAndSetConviction(proposal, previousStake);\n        }\n\n        emit StakeWithdrawn(_from, _proposalId, _amount, proposal.voterStake[_from], proposal.stakedTokens, proposal.convictionLast);\n    }\n}\n"
    },
    "@aragon/os/contracts/apps/disputable/DisputableAragonApp.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./IAgreement.sol\";\nimport \"./IDisputable.sol\";\nimport \"../AragonApp.sol\";\nimport \"../../lib/math/SafeMath64.sol\";\nimport \"../../lib/token/ERC20.sol\";\n\n\ncontract DisputableAragonApp is IDisputable, AragonApp {\n    /* Validation errors */\n    string internal constant ERROR_SENDER_NOT_AGREEMENT = \"DISPUTABLE_SENDER_NOT_AGREEMENT\";\n    string internal constant ERROR_AGREEMENT_STATE_INVALID = \"DISPUTABLE_AGREEMENT_STATE_INVAL\";\n\n    // This role is used to protect who can challenge actions in derived Disputable apps. However, it is not required\n    // to be validated in the app itself as the connected Agreement is responsible for performing the check on a challenge.\n    // bytes32 public constant CHALLENGE_ROLE = keccak256(\"CHALLENGE_ROLE\");\n    bytes32 public constant CHALLENGE_ROLE = 0xef025787d7cd1a96d9014b8dc7b44899b8c1350859fb9e1e05f5a546dd65158d;\n\n    // bytes32 public constant SET_AGREEMENT_ROLE = keccak256(\"SET_AGREEMENT_ROLE\");\n    bytes32 public constant SET_AGREEMENT_ROLE = 0x8dad640ab1b088990c972676ada708447affc660890ec9fc9a5483241c49f036;\n\n    // bytes32 internal constant AGREEMENT_POSITION = keccak256(\"aragonOS.appStorage.agreement\");\n    bytes32 internal constant AGREEMENT_POSITION = 0x6dbe80ccdeafbf5f3fff5738b224414f85e9370da36f61bf21c65159df7409e9;\n\n    modifier onlyAgreement() {\n        require(address(_getAgreement()) == msg.sender, ERROR_SENDER_NOT_AGREEMENT);\n        _;\n    }\n\n    /**\n    * @notice Challenge disputable action #`_disputableActionId`\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\n    *      is included. Subclasses should implement the internal implementation of the hook.\n    * @param _disputableActionId Identifier of the action to be challenged\n    * @param _challengeId Identifier of the challenge in the context of the Agreement\n    * @param _challenger Address that submitted the challenge\n    */\n    function onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) external onlyAgreement {\n        _onDisputableActionChallenged(_disputableActionId, _challengeId, _challenger);\n    }\n\n    /**\n    * @notice Allow disputable action #`_disputableActionId`\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\n    *      is included. Subclasses should implement the internal implementation of the hook.\n    * @param _disputableActionId Identifier of the action to be allowed\n    */\n    function onDisputableActionAllowed(uint256 _disputableActionId) external onlyAgreement {\n        _onDisputableActionAllowed(_disputableActionId);\n    }\n\n    /**\n    * @notice Reject disputable action #`_disputableActionId`\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\n    *      is included. Subclasses should implement the internal implementation of the hook.\n    * @param _disputableActionId Identifier of the action to be rejected\n    */\n    function onDisputableActionRejected(uint256 _disputableActionId) external onlyAgreement {\n        _onDisputableActionRejected(_disputableActionId);\n    }\n\n    /**\n    * @notice Void disputable action #`_disputableActionId`\n    * @dev This hook must be implemented by Disputable apps. We provide a base implementation to ensure that the `onlyAgreement` modifier\n    *      is included. Subclasses should implement the internal implementation of the hook.\n    * @param _disputableActionId Identifier of the action to be voided\n    */\n    function onDisputableActionVoided(uint256 _disputableActionId) external onlyAgreement {\n        _onDisputableActionVoided(_disputableActionId);\n    }\n\n    /**\n    * @notice Set Agreement to `_agreement`\n    * @param _agreement Agreement instance to be set\n    */\n    function setAgreement(IAgreement _agreement) external auth(SET_AGREEMENT_ROLE) {\n        IAgreement agreement = _getAgreement();\n        require(agreement == IAgreement(0) && _agreement != IAgreement(0), ERROR_AGREEMENT_STATE_INVALID);\n\n        AGREEMENT_POSITION.setStorageAddress(address(_agreement));\n        emit AgreementSet(_agreement);\n    }\n\n    /**\n    * @dev Tell the linked Agreement\n    * @return Agreement\n    */\n    function getAgreement() external view returns (IAgreement) {\n        return _getAgreement();\n    }\n\n    /**\n    * @dev Query if a contract implements a certain interface\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\n    */\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\n        return super.supportsInterface(_interfaceId) || _interfaceId == DISPUTABLE_INTERFACE_ID;\n    }\n\n    /**\n    * @dev Internal implementation of the `onDisputableActionChallenged` hook\n    * @param _disputableActionId Identifier of the action to be challenged\n    * @param _challengeId Identifier of the challenge in the context of the Agreement\n    * @param _challenger Address that submitted the challenge\n    */\n    function _onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) internal;\n\n    /**\n    * @dev Internal implementation of the `onDisputableActionRejected` hook\n    * @param _disputableActionId Identifier of the action to be rejected\n    */\n    function _onDisputableActionRejected(uint256 _disputableActionId) internal;\n\n    /**\n    * @dev Internal implementation of the `onDisputableActionAllowed` hook\n    * @param _disputableActionId Identifier of the action to be allowed\n    */\n    function _onDisputableActionAllowed(uint256 _disputableActionId) internal;\n\n    /**\n    * @dev Internal implementation of the `onDisputableActionVoided` hook\n    * @param _disputableActionId Identifier of the action to be voided\n    */\n    function _onDisputableActionVoided(uint256 _disputableActionId) internal;\n\n    /**\n    * @dev Register a new disputable action in the Agreement\n    * @param _disputableActionId Identifier of the action in the context of the Disputable\n    * @param _context Link to human-readable context for the given action\n    * @param _submitter Address that submitted the action\n    * @return Unique identifier for the created action in the context of the Agreement\n    */\n    function _registerDisputableAction(uint256 _disputableActionId, bytes _context, address _submitter) internal returns (uint256) {\n        IAgreement agreement = _ensureAgreement();\n        return agreement.newAction(_disputableActionId, _context, _submitter);\n    }\n\n    /**\n    * @dev Close disputable action in the Agreement\n    * @param _actionId Identifier of the action in the context of the Agreement\n    */\n    function _closeDisputableAction(uint256 _actionId) internal {\n        IAgreement agreement = _ensureAgreement();\n        agreement.closeAction(_actionId);\n    }\n\n    /**\n    * @dev Tell the linked Agreement\n    * @return Agreement\n    */\n    function _getAgreement() internal view returns (IAgreement) {\n        return IAgreement(AGREEMENT_POSITION.getStorageAddress());\n    }\n\n    /**\n    * @dev Tell the linked Agreement or revert if it has not been set\n    * @return Agreement\n    */\n    function _ensureAgreement() internal view returns (IAgreement) {\n        IAgreement agreement = _getAgreement();\n        require(agreement != IAgreement(0), ERROR_AGREEMENT_STATE_INVALID);\n        return agreement;\n    }\n}\n"
    },
    "@aragon/apps-shared-minime/contracts/MiniMeToken.sol": {
      "content": "pragma solidity ^0.4.24;\n\n/*\n    Copyright 2016, Jordi Baylina\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/// @title MiniMeToken Contract\n/// @author Jordi Baylina\n/// @dev This token contract's goal is to make it easy for anyone to clone this\n///  token using the token distribution at a given block, this will allow DAO's\n///  and DApps to upgrade their features in a decentralized manner without\n///  affecting the original token\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\n\nimport \"./ITokenController.sol\";\n\ncontract Controlled {\n    /// @notice The address of the controller is the only address that can call\n    ///  a function with this modifier\n    modifier onlyController {\n        require(msg.sender == controller);\n        _;\n    }\n\n    address public controller;\n\n    function Controlled()  public { controller = msg.sender;}\n\n    /// @notice Changes the controller of the contract\n    /// @param _newController The new controller of the contract\n    function changeController(address _newController) onlyController  public {\n        controller = _newController;\n    }\n}\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(\n        address from,\n        uint256 _amount,\n        address _token,\n        bytes _data\n    ) public;\n}\n\n/// @dev The actual token contract, the default controller is the msg.sender\n///  that deploys the contract, so usually this token will be deployed by a\n///  token controller contract, which Giveth will call a \"Campaign\"\ncontract MiniMeToken is Controlled {\n\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\n    uint8 public decimals;             //Number of decimals of the smallest unit\n    string public symbol;              //An identifier: e.g. REP\n    string public version = \"MMT_0.1\"; //An arbitrary versioning scheme\n\n\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\n    ///  given value, the block number attached is the one that last changed the\n    ///  value\n    struct Checkpoint {\n\n        // `fromBlock` is the block number that the value was generated from\n        uint128 fromBlock;\n\n        // `value` is the amount of tokens at a specific block number\n        uint128 value;\n    }\n\n    // `parentToken` is the Token address that was cloned to produce this token;\n    //  it will be 0x0 for a token that was not cloned\n    MiniMeToken public parentToken;\n\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\n    //  used to determine the initial distribution of the Clone Token\n    uint public parentSnapShotBlock;\n\n    // `creationBlock` is the block number that the Clone Token was created\n    uint public creationBlock;\n\n    // `balances` is the map that tracks the balance of each address, in this\n    //  contract when the balance changes the block number that the change\n    //  occurred is also included in the map\n    mapping (address => Checkpoint[]) balances;\n\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // Tracks the history of the `totalSupply` of the token\n    Checkpoint[] totalSupplyHistory;\n\n    // Flag that determines if the token is transferable or not.\n    bool public transfersEnabled;\n\n    // The factory used to create new clone tokens\n    MiniMeTokenFactory public tokenFactory;\n\n////////////////\n// Constructor\n////////////////\n\n    /// @notice Constructor to create a MiniMeToken\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n    ///  will create the Clone token contracts, the token factory needs to be\n    ///  deployed first\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n    ///  new token\n    /// @param _parentSnapShotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token, set to 0 if it\n    ///  is a new token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    function MiniMeToken(\n        MiniMeTokenFactory _tokenFactory,\n        MiniMeToken _parentToken,\n        uint _parentSnapShotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    )  public\n    {\n        tokenFactory = _tokenFactory;\n        name = _tokenName;                                 // Set the name\n        decimals = _decimalUnits;                          // Set the decimals\n        symbol = _tokenSymbol;                             // Set the symbol\n        parentToken = _parentToken;\n        parentSnapShotBlock = _parentSnapShotBlock;\n        transfersEnabled = _transfersEnabled;\n        creationBlock = block.number;\n    }\n\n\n///////////////////\n// ERC20 Methods\n///////////////////\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n        return doTransfer(msg.sender, _to, _amount);\n    }\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///  is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n\n        // The controller of this contract can move tokens around at will,\n        //  this is important to recognize! Confirm that you trust the\n        //  controller of this contract, which in most situations should be\n        //  another open source smart contract or 0x0\n        if (msg.sender != controller) {\n            require(transfersEnabled);\n\n            // The standard ERC 20 transferFrom functionality\n            if (allowed[_from][msg.sender] < _amount)\n                return false;\n            allowed[_from][msg.sender] -= _amount;\n        }\n        return doTransfer(_from, _to, _amount);\n    }\n\n    /// @dev This is the actual transfer function in the token contract, it can\n    ///  only be called by other functions in this contract.\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\n        if (_amount == 0) {\n            return true;\n        }\n        require(parentSnapShotBlock < block.number);\n        // Do not allow transfer to 0x0 or the token contract itself\n        require((_to != 0) && (_to != address(this)));\n        // If the amount being transfered is more than the balance of the\n        //  account the transfer returns false\n        var previousBalanceFrom = balanceOfAt(_from, block.number);\n        if (previousBalanceFrom < _amount) {\n            return false;\n        }\n        // Alerts the token controller of the transfer\n        if (isContract(controller)) {\n            // Adding the ` == true` makes the linter shut up so...\n            require(ITokenController(controller).onTransfer(_from, _to, _amount) == true);\n        }\n        // First update the balance array with the new value for the address\n        //  sending the tokens\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n        // Then update the balance array with the new value for the address\n        //  receiving the tokens\n        var previousBalanceTo = balanceOfAt(_to, block.number);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n        // An event to make the transfer easy to find on the blockchain\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    /// @param _owner The address that's balance is being requested\n    /// @return The balance of `_owner` at the current block\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///  its behalf. This is a modified version of the ERC20 approve function\n    ///  to be a little bit safer\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n        require(transfersEnabled);\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n        // Alerts the token controller of the approve function call\n        if (isContract(controller)) {\n            // Adding the ` == true` makes the linter shut up so...\n            require(ITokenController(controller).onApprove(msg.sender, _spender, _amount) == true);\n        }\n\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /// @dev This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n    ///  its behalf, and then a function is triggered in the contract that is\n    ///  being approved, `_spender`. This allows users to use their tokens to\n    ///  interact with contracts in one function call instead of two\n    /// @param _spender The address of the contract able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the function call was successful\n    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\n        require(approve(_spender, _amount));\n\n        _spender.receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        );\n\n        return true;\n    }\n\n    /// @dev This function makes it easy to get the total number of tokens\n    /// @return The total number of tokens\n    function totalSupply() public constant returns (uint) {\n        return totalSupplyAt(block.number);\n    }\n\n\n////////////////\n// Query balance and totalSupply in History\n////////////////\n\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n    /// @param _owner The address from which the balance will be retrieved\n    /// @param _blockNumber The block number when the balance is queried\n    /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) {\n\n        // These next few lines are used when the balance of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.balanceOfAt` be queried at the\n        //  genesis block for that token as this contains initial balance of\n        //  this token\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n            } else {\n                // Has no parent\n                return 0;\n            }\n\n        // This will return the expected balance during normal situations\n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\n    /// @param _blockNumber The block number when the totalSupply is queried\n    /// @return The total amount of tokens at `_blockNumber`\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\n\n        // These next few lines are used when the totalSupply of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\n        //  genesis block for this token as that contains totalSupply of this\n        //  token at this block number.\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n            } else {\n                return 0;\n            }\n\n        // This will return the expected totalSupply during normal situations\n        } else {\n            return getValueAt(totalSupplyHistory, _blockNumber);\n        }\n    }\n\n////////////////\n// Clone Token Method\n////////////////\n\n    /// @notice Creates a new clone token with the initial distribution being\n    ///  this token at `_snapshotBlock`\n    /// @param _cloneTokenName Name of the clone token\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n    /// @param _cloneTokenSymbol Symbol of the clone token\n    /// @param _snapshotBlock Block when the distribution of the parent token is\n    ///  copied to set the initial distribution of the new clone token;\n    ///  if the block is zero than the actual block, the current block is used\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    /// @return The address of the new MiniMeToken Contract\n    function createCloneToken(\n        string _cloneTokenName,\n        uint8 _cloneDecimalUnits,\n        string _cloneTokenSymbol,\n        uint _snapshotBlock,\n        bool _transfersEnabled\n    ) public returns(MiniMeToken)\n    {\n        uint256 snapshot = _snapshotBlock == 0 ? block.number - 1 : _snapshotBlock;\n\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n            this,\n            snapshot,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n        );\n\n        cloneToken.changeController(msg.sender);\n\n        // An event to make the token easy to find on the blockchain\n        NewCloneToken(address(cloneToken), snapshot);\n        return cloneToken;\n    }\n\n////////////////\n// Generate and destroy tokens\n////////////////\n\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n    /// @param _owner The address that will be assigned the new tokens\n    /// @param _amount The quantity of tokens generated\n    /// @return True if the tokens are generated correctly\n    function generateTokens(address _owner, uint _amount) onlyController public returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n        uint previousBalanceTo = balanceOf(_owner);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n        Transfer(0, _owner, _amount);\n        return true;\n    }\n\n\n    /// @notice Burns `_amount` tokens from `_owner`\n    /// @param _owner The address that will lose the tokens\n    /// @param _amount The quantity of tokens to burn\n    /// @return True if the tokens are burned correctly\n    function destroyTokens(address _owner, uint _amount) onlyController public returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply >= _amount);\n        uint previousBalanceFrom = balanceOf(_owner);\n        require(previousBalanceFrom >= _amount);\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n        Transfer(_owner, 0, _amount);\n        return true;\n    }\n\n////////////////\n// Enable tokens transfers\n////////////////\n\n\n    /// @notice Enables token holders to transfer their tokens freely if true\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    function enableTransfers(bool _transfersEnabled) onlyController public {\n        transfersEnabled = _transfersEnabled;\n    }\n\n////////////////\n// Internal helper functions to query and set a value in a snapshot array\n////////////////\n\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n    /// @param checkpoints The history of values being queried\n    /// @param _block The block number to retrieve the value at\n    /// @return The number of tokens being queried\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns (uint) {\n        if (checkpoints.length == 0)\n            return 0;\n\n        // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n            return checkpoints[checkpoints.length-1].value;\n        if (_block < checkpoints[0].fromBlock)\n            return 0;\n\n        // Binary search of the value in the array\n        uint min = 0;\n        uint max = checkpoints.length-1;\n        while (max > min) {\n            uint mid = (max + min + 1) / 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\n    ///  `totalSupplyHistory`\n    /// @param checkpoints The history of data being updated\n    /// @param _value The new number of tokens\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\n            newCheckPoint.fromBlock = uint128(block.number);\n            newCheckPoint.value = uint128(_value);\n        } else {\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\n            oldCheckPoint.value = uint128(_value);\n        }\n    }\n\n    /// @dev Internal function to determine if an address is a contract\n    /// @param _addr The address being queried\n    /// @return True if `_addr` is a contract\n    function isContract(address _addr) constant internal returns(bool) {\n        uint size;\n        if (_addr == 0)\n            return false;\n\n        assembly {\n            size := extcodesize(_addr)\n        }\n\n        return size>0;\n    }\n\n    /// @dev Helper function to return a min betwen the two uints\n    function min(uint a, uint b) pure internal returns (uint) {\n        return a < b ? a : b;\n    }\n\n    /// @notice The fallback function: If the contract's controller has not been\n    ///  set to 0, then the `proxyPayment` method is called which relays the\n    ///  ether and creates tokens as described in the token controller contract\n    function () external payable {\n        require(isContract(controller));\n        // Adding the ` == true` makes the linter shut up so...\n        require(ITokenController(controller).proxyPayment.value(msg.value)(msg.sender) == true);\n    }\n\n//////////\n// Safety Methods\n//////////\n\n    /// @notice This method can be used by the controller to extract mistakenly\n    ///  sent tokens to this contract.\n    /// @param _token The address of the token contract that you want to recover\n    ///  set to 0 in case you want to extract ether.\n    function claimTokens(address _token) onlyController public {\n        if (_token == 0x0) {\n            controller.transfer(this.balance);\n            return;\n        }\n\n        MiniMeToken token = MiniMeToken(_token);\n        uint balance = token.balanceOf(this);\n        token.transfer(controller, balance);\n        ClaimedTokens(_token, controller, balance);\n    }\n\n////////////////\n// Events\n////////////////\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _amount\n        );\n\n}\n\n\n////////////////\n// MiniMeTokenFactory\n////////////////\n\n/// @dev This contract is used to generate clone contracts from a contract.\n///  In solidity this is the way to create a contract from a contract of the\n///  same class\ncontract MiniMeTokenFactory {\n\n    /// @notice Update the DApp by creating a new token with new functionalities\n    ///  the msg.sender becomes the controller of this clone token\n    /// @param _parentToken Address of the token being cloned\n    /// @param _snapshotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    /// @return The address of the new token contract\n    function createCloneToken(\n        MiniMeToken _parentToken,\n        uint _snapshotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) public returns (MiniMeToken)\n    {\n        MiniMeToken newToken = new MiniMeToken(\n            this,\n            _parentToken,\n            _snapshotBlock,\n            _tokenName,\n            _decimalUnits,\n            _tokenSymbol,\n            _transfersEnabled\n        );\n\n        newToken.changeController(msg.sender);\n        return newToken;\n    }\n}"
    },
    "@aragon/os/contracts/lib/math/SafeMath.sol": {
      "content": "// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    string private constant ERROR_ADD_OVERFLOW = \"MATH_ADD_OVERFLOW\";\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH_SUB_UNDERFLOW\";\n    string private constant ERROR_MUL_OVERFLOW = \"MATH_MUL_OVERFLOW\";\n    string private constant ERROR_DIV_ZERO = \"MATH_DIV_ZERO\";\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\n        uint256 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\n        uint256 c = _a - _b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a, ERROR_ADD_OVERFLOW);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, ERROR_DIV_ZERO);\n        return a % b;\n    }\n}\n"
    },
    "@aragon/os/contracts/lib/math/SafeMath64.sol": {
      "content": "// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\n// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\n// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath64\n * @dev Math operations for uint64 with safety checks that revert on error\n */\nlibrary SafeMath64 {\n    string private constant ERROR_ADD_OVERFLOW = \"MATH64_ADD_OVERFLOW\";\n    string private constant ERROR_SUB_UNDERFLOW = \"MATH64_SUB_UNDERFLOW\";\n    string private constant ERROR_MUL_OVERFLOW = \"MATH64_MUL_OVERFLOW\";\n    string private constant ERROR_DIV_ZERO = \"MATH64_DIV_ZERO\";\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\n        uint256 c = uint256(_a) * uint256(_b);\n        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\n\n        return uint64(c);\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\n        uint64 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\n        uint64 c = _a - _b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\n        uint64 c = _a + _b;\n        require(c >= _a, ERROR_ADD_OVERFLOW);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\n        require(b != 0, ERROR_DIV_ZERO);\n        return a % b;\n    }\n}\n"
    },
    "@aragon/os/contracts/lib/math/Math.sol": {
      "content": "pragma solidity ^0.4.24;\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\n\nlibrary Math {\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n"
    },
    "@1hive/apps-token-manager/contracts/TokenManagerHook.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    GPL-3.0-or-later\n */\n\npragma solidity 0.4.24;\n\nimport \"@aragon/os/contracts/common/ReentrancyGuard.sol\";\n\n/**\n* @dev When creating a subcontract, we recommend overriding the _internal_ functions that you want to hook.\n*/\ncontract TokenManagerHook is ReentrancyGuard {\n\n    using UnstructuredStorage for bytes32;\n\n    /* Hardcoded constants to save gas\n    bytes32 public constant TOKEN_MANAGER_POSITION = keccak256(\"hookedTokenManager.tokenManagerHook.tokenManager\");\n    */\n    bytes32 private constant TOKEN_MANAGER_POSITION = 0x5c513b2347f66d33af9d68f4a0ed7fbb73ce364889b2af7f3ee5764440da6a8a;\n\n    modifier onlyTokenManager() {\n        require (getTokenManager() == msg.sender, \"Hooks must be called from Token Manager\");\n        _;\n    }\n\n    function getTokenManager() public returns (address) {\n        return TOKEN_MANAGER_POSITION.getStorageAddress();\n    }\n\n    /*\n    * @dev Called when this contract has been included as a Token Manager hook\n    * @param _hookId The position in which the hook is going to be called\n    * @param _token The token controlled by the Token Manager\n    */\n    function onRegisterAsHook(uint256 _hookId, address _token) external nonReentrant {\n        require(getTokenManager() == address(0), \"Hook already registered by Token Manager\");\n        TOKEN_MANAGER_POSITION.setStorageAddress(msg.sender);\n        _onRegisterAsHook(msg.sender, _hookId, _token);\n    }\n\n    /*\n    * @dev Called when this hook is being removed from the Token Manager\n    * @param _hookId The position in which the hook is going to be called\n    * @param _token The token controlled by the Token Manager\n    */\n    function onRevokeAsHook(uint256 _hookId, address _token) external onlyTokenManager nonReentrant {\n        _onRevokeAsHook(msg.sender, _hookId, _token);\n    }\n\n    /*\n    * @dev Notifies the hook about a token transfer allowing the hook to react if desired. It should return\n    * true if left unimplemented, otherwise it will prevent some functions in the TokenManager from\n    * executing successfully.\n    * @param _from The origin of the transfer\n    * @param _to The destination of the transfer\n    * @param _amount The amount of the transfer\n    */\n    function onTransfer(address _from, address _to, uint256 _amount) external onlyTokenManager nonReentrant returns (bool) {\n        return _onTransfer(_from, _to, _amount);\n    }\n\n    /*\n    * @dev Notifies the hook about an approval allowing the hook to react if desired. It should return\n    * true if left unimplemented, otherwise it will prevent some functions in the TokenManager from\n    * executing successfully.\n    * @param _holder The account that is allowing to spend\n    * @param _spender The account that is allowed to spend\n    * @param _amount The amount being allowed\n    */\n    function onApprove(address _holder, address _spender, uint _amount) external onlyTokenManager nonReentrant returns (bool) {\n        return _onApprove(_holder, _spender, _amount);\n    }\n\n    // Function to override if necessary:\n\n    function _onRegisterAsHook(address _tokenManager, uint256 _hookId, address _token) internal {\n        return;\n    }\n\n    function _onRevokeAsHook(address _tokenManager, uint256 _hookId, address _token) internal {\n        return;\n    }\n\n    function _onTransfer(address _from, address _to, uint256 _amount) internal returns (bool) {\n        return true;\n    }\n\n    function _onApprove(address _holder, address _spender, uint _amount) internal returns (bool) {\n        return true;\n    }\n}\n"
    },
    "@1hive/funds-manager/contracts/FundsManager.sol": {
      "content": "pragma solidity ^0.4.24;\n\ncontract FundsManager {\n\n    address public owner;\n    mapping(address => bool) public fundsUsers;\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"ERR:NOT_OWNER\");\n        _;\n    }\n\n    modifier onlyFundsUser {\n        require(fundsUsers[msg.sender] == true, \"ERR:NOT_FUNDS_USER\");\n        _;\n    }\n\n    constructor (address _owner) public {\n        owner = _owner;\n    }\n\n    function setOwner(address _owner) public onlyOwner {\n        owner = _owner;\n    }\n\n    function addFundsUser(address _fundsUser) public onlyOwner {\n        fundsUsers[_fundsUser] = true;\n    }\n\n    function revokeFundsUser(address _fundsUser) public onlyOwner {\n        require(fundsUsers[_fundsUser] == true, \"ERR:SHOULD_BE_FUNDS_USER\");\n        fundsUsers[_fundsUser] = false;\n    }\n\n    function fundsOwner() public view returns (address);\n\n    function balance(address _token) public view returns (uint256);\n\n    // This must revert if the transfer fails or returns false\n    function transfer(address _token, address _beneficiary, uint256 _amount) public;\n}\n"
    },
    "contracts/lib/ArrayUtils.sol": {
      "content": "pragma solidity ^0.4.24;\n\n\nlibrary ArrayUtils {\n    function deleteItem(uint256[] storage self, uint256 item) internal returns (bool) {\n        uint256 length = self.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (self[i] == item) {\n                uint256 newLength = self.length - 1;\n                if (i != newLength) {\n                    self[i] = self[newLength];\n                }\n\n                delete self[newLength];\n                self.length = newLength;\n\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function contains(uint256[] storage self, uint256 item) internal returns (bool) {\n        for (uint256 i = 0; i < self.length; i++) {\n            if (self[i] == item) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"
    },
    "contracts/lib/IPriceOracle.sol": {
      "content": "pragma solidity ^0.4.24;\n\ncontract IPriceOracle {\n    function consult(address tokenIn, uint amountIn, address tokenOut) external view returns (uint amountOut);\n}\n"
    },
    "@aragon/os/contracts/apps/disputable/IAgreement.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"../../lib/token/ERC20.sol\";\n\n\ncontract IAgreement {\n\n    event ActionSubmitted(uint256 indexed actionId, address indexed disputable);\n    event ActionClosed(uint256 indexed actionId);\n    event ActionChallenged(uint256 indexed actionId, uint256 indexed challengeId);\n    event ActionSettled(uint256 indexed actionId, uint256 indexed challengeId);\n    event ActionDisputed(uint256 indexed actionId, uint256 indexed challengeId);\n    event ActionAccepted(uint256 indexed actionId, uint256 indexed challengeId);\n    event ActionVoided(uint256 indexed actionId, uint256 indexed challengeId);\n    event ActionRejected(uint256 indexed actionId, uint256 indexed challengeId);\n\n    enum ChallengeState {\n        Waiting,\n        Settled,\n        Disputed,\n        Rejected,\n        Accepted,\n        Voided\n    }\n\n    function newAction(uint256 _disputableActionId, bytes _context, address _submitter) external returns (uint256);\n\n    function closeAction(uint256 _actionId) external;\n\n    function challengeAction(uint256 _actionId, uint256 _settlementOffer, bool _finishedSubmittingEvidence, bytes _context) external;\n\n    function settleAction(uint256 _actionId) external;\n\n    function disputeAction(uint256 _actionId, bool _finishedSubmittingEvidence) external;\n}\n"
    },
    "@aragon/os/contracts/apps/disputable/IDisputable.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./IAgreement.sol\";\nimport \"../../lib/standards/ERC165.sol\";\nimport \"../../lib/token/ERC20.sol\";\n\n\ncontract IDisputable is ERC165 {\n    // Includes setAgreement, onDisputableActionChallenged, onDisputableActionAllowed,\n    // onDisputableActionRejected, onDisputableActionVoided, getAgreement, canChallenge, and canClose methods:\n    bytes4 internal constant DISPUTABLE_INTERFACE_ID = bytes4(0xf3d3bb51);\n\n    event AgreementSet(IAgreement indexed agreement);\n\n    function setAgreement(IAgreement _agreement) external;\n\n    function onDisputableActionChallenged(uint256 _disputableActionId, uint256 _challengeId, address _challenger) external;\n\n    function onDisputableActionAllowed(uint256 _disputableActionId) external;\n\n    function onDisputableActionRejected(uint256 _disputableActionId) external;\n\n    function onDisputableActionVoided(uint256 _disputableActionId) external;\n\n    function getAgreement() external view returns (IAgreement);\n\n    function canChallenge(uint256 _disputableActionId) external view returns (bool);\n\n    function canClose(uint256 _disputableActionId) external view returns (bool);\n}\n"
    },
    "@aragon/os/contracts/apps/AragonApp.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./AppStorage.sol\";\nimport \"../acl/ACLSyntaxSugar.sol\";\nimport \"../common/Autopetrified.sol\";\nimport \"../common/ConversionHelpers.sol\";\nimport \"../common/ReentrancyGuard.sol\";\nimport \"../common/VaultRecoverable.sol\";\nimport \"../evmscript/EVMScriptRunner.sol\";\nimport \"../lib/standards/ERC165.sol\";\n\n\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\n// that they can never be initialized.\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\n// are included so that they are automatically usable by subclassing contracts\ncontract AragonApp is ERC165, AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\n    string private constant ERROR_AUTH_FAILED = \"APP_AUTH_FAILED\";\n\n    modifier auth(bytes32 _role) {\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\n        _;\n    }\n\n    modifier authP(bytes32 _role, uint256[] _params) {\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\n        _;\n    }\n\n    /**\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\n    * @param _sender Sender of the call\n    * @param _role Role on this app\n    * @param _params Permission params for the role\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\n    *         Always returns false if the app hasn't been initialized yet.\n    */\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\n        if (!hasInitialized()) {\n            return false;\n        }\n\n        IKernel linkedKernel = kernel();\n        if (address(linkedKernel) == address(0)) {\n            return false;\n        }\n\n        return linkedKernel.hasPermission(\n            _sender,\n            address(this),\n            _role,\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\n        );\n    }\n\n    /**\n    * @dev Get the recovery vault for the app\n    * @return Recovery vault address for the app\n    */\n    function getRecoveryVault() public view returns (address) {\n        // Funds recovery via a vault is only available when used with a kernel\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\n    }\n\n    /**\n    * @dev Query if a contract implements a certain interface\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\n    */\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\n        return super.supportsInterface(_interfaceId) || _interfaceId == ARAGON_APP_INTERFACE_ID;\n    }\n}\n"
    },
    "@aragon/os/contracts/lib/token/ERC20.sol": {
      "content": "// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function allowance(address _owner, address _spender)\n        public view returns (uint256);\n\n    function transfer(address _to, uint256 _value) public returns (bool);\n\n    function approve(address _spender, uint256 _value)\n        public returns (bool);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"
    },
    "@aragon/os/contracts/lib/standards/ERC165.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract ERC165 {\n    // Includes supportsInterface method:\n    bytes4 internal constant ERC165_INTERFACE_ID = bytes4(0x01ffc9a7);\n\n    /**\n    * @dev Query if a contract implements a certain interface\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\n    */\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\n        return _interfaceId == ERC165_INTERFACE_ID;\n    }\n}\n"
    },
    "@aragon/os/contracts/apps/AppStorage.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./IAragonApp.sol\";\nimport \"../common/UnstructuredStorage.sol\";\nimport \"../kernel/IKernel.sol\";\n\n\ncontract AppStorage is IAragonApp {\n    using UnstructuredStorage for bytes32;\n\n    /* Hardcoded constants to save gas\n    bytes32 internal constant KERNEL_POSITION = keccak256(\"aragonOS.appStorage.kernel\");\n    bytes32 internal constant APP_ID_POSITION = keccak256(\"aragonOS.appStorage.appId\");\n    */\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\n\n    function kernel() public view returns (IKernel) {\n        return IKernel(KERNEL_POSITION.getStorageAddress());\n    }\n\n    function appId() public view returns (bytes32) {\n        return APP_ID_POSITION.getStorageBytes32();\n    }\n\n    function setKernel(IKernel _kernel) internal {\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\n    }\n\n    function setAppId(bytes32 _appId) internal {\n        APP_ID_POSITION.setStorageBytes32(_appId);\n    }\n}\n"
    },
    "@aragon/os/contracts/acl/ACLSyntaxSugar.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract ACLSyntaxSugar {\n    function arr() internal pure returns (uint256[]) {\n        return new uint256[](0);\n    }\n\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\n        return arr(uint256(_a));\n    }\n\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b));\n    }\n\n    function arr(address _a) internal pure returns (uint256[] r) {\n        return arr(uint256(_a));\n    }\n\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b));\n    }\n\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), _b, _c);\n    }\n\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), _b, _c, _d);\n    }\n\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b));\n    }\n\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\n    }\n\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b), uint256(_c));\n    }\n\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\n        return arr(uint256(_a), uint256(_b), uint256(_c));\n    }\n\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\n        r = new uint256[](1);\n        r[0] = _a;\n    }\n\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\n        r = new uint256[](2);\n        r[0] = _a;\n        r[1] = _b;\n    }\n\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n        r = new uint256[](3);\n        r[0] = _a;\n        r[1] = _b;\n        r[2] = _c;\n    }\n\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n        r = new uint256[](4);\n        r[0] = _a;\n        r[1] = _b;\n        r[2] = _c;\n        r[3] = _d;\n    }\n\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n        r = new uint256[](5);\n        r[0] = _a;\n        r[1] = _b;\n        r[2] = _c;\n        r[3] = _d;\n        r[4] = _e;\n    }\n}\n\n\ncontract ACLHelpers {\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\n        return uint8(_x >> (8 * 30));\n    }\n\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\n        return uint8(_x >> (8 * 31));\n    }\n\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\n        a = uint32(_x);\n        b = uint32(_x >> (8 * 4));\n        c = uint32(_x >> (8 * 8));\n    }\n}\n"
    },
    "@aragon/os/contracts/common/Autopetrified.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./Petrifiable.sol\";\n\n\ncontract Autopetrified is Petrifiable {\n    constructor() public {\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\n        // This renders them uninitializable (and unusable without a proxy).\n        petrify();\n    }\n}\n"
    },
    "@aragon/os/contracts/common/ConversionHelpers.sol": {
      "content": "pragma solidity ^0.4.24;\n\n\nlibrary ConversionHelpers {\n    string private constant ERROR_IMPROPER_LENGTH = \"CONVERSION_IMPROPER_LENGTH\";\n\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\n        // Force cast the uint256[] into a bytes array, by overwriting its length\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\n        // with the input and a new length. The input becomes invalid from this point forward.\n        uint256 byteLength = _input.length * 32;\n        assembly {\n            output := _input\n            mstore(output, byteLength)\n        }\n    }\n\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\n        // Force cast the bytes array into a uint256[], by overwriting its length\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\n        // with the input and a new length. The input becomes invalid from this point forward.\n        uint256 intsLength = _input.length / 32;\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\n\n        assembly {\n            output := _input\n            mstore(output, intsLength)\n        }\n    }\n}\n"
    },
    "@aragon/os/contracts/common/ReentrancyGuard.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"../common/UnstructuredStorage.sol\";\n\n\ncontract ReentrancyGuard {\n    using UnstructuredStorage for bytes32;\n\n    /* Hardcoded constants to save gas\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\"aragonOS.reentrancyGuard.mutex\");\n    */\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\n\n    string private constant ERROR_REENTRANT = \"REENTRANCY_REENTRANT_CALL\";\n\n    modifier nonReentrant() {\n        // Ensure mutex is unlocked\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\n\n        // Lock mutex before function call\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\n\n        // Perform function call\n        _;\n\n        // Unlock mutex after function call\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/VaultRecoverable.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"../lib/token/ERC20.sol\";\nimport \"./EtherTokenConstant.sol\";\nimport \"./IsContract.sol\";\nimport \"./IVaultRecoverable.sol\";\nimport \"./SafeERC20.sol\";\n\n\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\n    using SafeERC20 for ERC20;\n\n    string private constant ERROR_DISALLOWED = \"RECOVER_DISALLOWED\";\n    string private constant ERROR_VAULT_NOT_CONTRACT = \"RECOVER_VAULT_NOT_CONTRACT\";\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \"RECOVER_TOKEN_TRANSFER_FAILED\";\n\n    /**\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\n     *         but in case it does, this function allows one to recover them.\n     * @param _token Token balance to be sent to recovery vault.\n     */\n    function transferToVault(address _token) external {\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\n        address vault = getRecoveryVault();\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\n\n        uint256 balance;\n        if (_token == ETH) {\n            balance = address(this).balance;\n            vault.transfer(balance);\n        } else {\n            ERC20 token = ERC20(_token);\n            balance = token.staticBalanceOf(this);\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\n        }\n\n        emit RecoverToVault(vault, _token, balance);\n    }\n\n    /**\n    * @dev By default deriving from AragonApp makes it recoverable\n    * @param token Token address that would be recovered\n    * @return bool whether the app allows the recovery\n    */\n    function allowRecoverability(address token) public view returns (bool) {\n        return true;\n    }\n\n    // Cast non-implemented interface to be public so we can use it internally\n    function getRecoveryVault() public view returns (address);\n}\n"
    },
    "@aragon/os/contracts/evmscript/EVMScriptRunner.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./IEVMScriptExecutor.sol\";\nimport \"./IEVMScriptRegistry.sol\";\n\nimport \"../apps/AppStorage.sol\";\nimport \"../kernel/KernelConstants.sol\";\nimport \"../common/Initializable.sol\";\n\n\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \"EVMRUN_EXECUTOR_UNAVAILABLE\";\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \"EVMRUN_PROTECTED_STATE_MODIFIED\";\n\n    /* This is manually crafted in assembly\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \"EVMRUN_EXECUTOR_INVALID_RETURN\";\n    */\n\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\n\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\n    }\n\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\n        return IEVMScriptRegistry(registryAddr);\n    }\n\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\n        internal\n        isInitialized\n        protectState\n        returns (bytes)\n    {\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\n\n        bytes4 sig = executor.execScript.selector;\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\n\n        bytes memory output;\n        assembly {\n            let success := delegatecall(\n                gas,                // forward all gas\n                executor,           // address\n                add(data, 0x20),    // calldata start\n                mload(data),        // calldata length\n                0,                  // don't write output (we'll handle this ourselves)\n                0                   // don't write output\n            )\n\n            output := mload(0x40) // free mem ptr get\n\n            switch success\n            case 0 {\n                // If the call errored, forward its full error data\n                returndatacopy(output, 0, returndatasize)\n                revert(output, returndatasize)\n            }\n            default {\n                switch gt(returndatasize, 0x3f)\n                case 0 {\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\n                    // revert with \"EVMRUN_EXECUTOR_INVALID_RETURN\"\n                    // See remix: doing a `revert(\"EVMRUN_EXECUTOR_INVALID_RETURN\")` always results in\n                    // this memory layout\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\n\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\n                }\n                default {\n                    // Copy result\n                    //\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\n                    //    [ output length (32 bytes) ]\n                    //    [ output content (N bytes) ]\n                    //\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\n                    let copysize := sub(returndatasize, 0x20)\n                    returndatacopy(output, 0x20, copysize)\n\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\n                }\n            }\n        }\n\n        emit ScriptResult(address(executor), _script, _input, output);\n\n        return output;\n    }\n\n    modifier protectState {\n        address preKernel = address(kernel());\n        bytes32 preAppId = appId();\n        _; // exec\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\n    }\n}\n"
    },
    "@aragon/os/contracts/apps/IAragonApp.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"../kernel/IKernel.sol\";\n\n\ncontract IAragonApp {\n    // Includes appId and kernel methods:\n    bytes4 internal constant ARAGON_APP_INTERFACE_ID = bytes4(0x54053e6c);\n\n    function kernel() public view returns (IKernel);\n    function appId() public view returns (bytes32);\n}\n"
    },
    "@aragon/os/contracts/common/UnstructuredStorage.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\nlibrary UnstructuredStorage {\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\n        assembly { data := sload(position) }\n    }\n\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\n        assembly { data := sload(position) }\n    }\n\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\n        assembly { data := sload(position) }\n    }\n\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\n        assembly { data := sload(position) }\n    }\n\n    function setStorageBool(bytes32 position, bool data) internal {\n        assembly { sstore(position, data) }\n    }\n\n    function setStorageAddress(bytes32 position, address data) internal {\n        assembly { sstore(position, data) }\n    }\n\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\n        assembly { sstore(position, data) }\n    }\n\n    function setStorageUint256(bytes32 position, uint256 data) internal {\n        assembly { sstore(position, data) }\n    }\n}\n"
    },
    "@aragon/os/contracts/kernel/IKernel.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"../acl/IACL.sol\";\nimport \"../common/IVaultRecoverable.sol\";\n\n\ninterface IKernelEvents {\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\n}\n\n\n// This should be an interface, but interfaces can't inherit yet :(\ncontract IKernel is IKernelEvents, IVaultRecoverable {\n    function acl() public view returns (IACL);\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\n}\n"
    },
    "@aragon/os/contracts/acl/IACL.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IACL {\n    function initialize(address permissionsCreator) external;\n\n    // TODO: this should be external\n    // See https://github.com/ethereum/solidity/issues/4832\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n}\n"
    },
    "@aragon/os/contracts/common/IVaultRecoverable.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IVaultRecoverable {\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\n\n    function transferToVault(address token) external;\n\n    function allowRecoverability(address token) external view returns (bool);\n    function getRecoveryVault() external view returns (address);\n}\n"
    },
    "@aragon/os/contracts/common/Petrifiable.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./Initializable.sol\";\n\n\ncontract Petrifiable is Initializable {\n    // Use block UINT256_MAX (which should be never) as the initializable date\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\n\n    function isPetrified() public view returns (bool) {\n        return getInitializationBlock() == PETRIFIED_BLOCK;\n    }\n\n    /**\n    * @dev Function to be called by top level contract to prevent being initialized.\n    *      Useful for freezing base contracts when they're used behind proxies.\n    */\n    function petrify() internal onlyInit {\n        initializedAt(PETRIFIED_BLOCK);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/Initializable.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./TimeHelpers.sol\";\nimport \"./UnstructuredStorage.sol\";\n\n\ncontract Initializable is TimeHelpers {\n    using UnstructuredStorage for bytes32;\n\n    // keccak256(\"aragonOS.initializable.initializationBlock\")\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\n\n    string private constant ERROR_ALREADY_INITIALIZED = \"INIT_ALREADY_INITIALIZED\";\n    string private constant ERROR_NOT_INITIALIZED = \"INIT_NOT_INITIALIZED\";\n\n    modifier onlyInit {\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\n        _;\n    }\n\n    modifier isInitialized {\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\n        _;\n    }\n\n    /**\n    * @return Block number in which the contract was initialized\n    */\n    function getInitializationBlock() public view returns (uint256) {\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\n    }\n\n    /**\n    * @return Whether the contract has been initialized by the time of the current block\n    */\n    function hasInitialized() public view returns (bool) {\n        uint256 initializationBlock = getInitializationBlock();\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\n    }\n\n    /**\n    * @dev Function to be called by top level contract after initialization has finished.\n    */\n    function initialized() internal onlyInit {\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\n    }\n\n    /**\n    * @dev Function to be called by top level contract after initialization to enable the contract\n    *      at a future block number rather than immediately.\n    */\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/TimeHelpers.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./Uint256Helpers.sol\";\n\n\ncontract TimeHelpers {\n    using Uint256Helpers for uint256;\n\n    /**\n    * @dev Returns the current block number.\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\n    *      tests.\n    */\n    function getBlockNumber() internal view returns (uint256) {\n        return block.number;\n    }\n\n    /**\n    * @dev Returns the current block number, converted to uint64.\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\n    *      tests.\n    */\n    function getBlockNumber64() internal view returns (uint64) {\n        return getBlockNumber().toUint64();\n    }\n\n    /**\n    * @dev Returns the current timestamp.\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\n    *      tests.\n    */\n    function getTimestamp() internal view returns (uint256) {\n        return block.timestamp; // solium-disable-line security/no-block-members\n    }\n\n    /**\n    * @dev Returns the current timestamp, converted to uint64.\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\n    *      tests.\n    */\n    function getTimestamp64() internal view returns (uint64) {\n        return getTimestamp().toUint64();\n    }\n}\n"
    },
    "@aragon/os/contracts/common/Uint256Helpers.sol": {
      "content": "pragma solidity ^0.4.24;\n\n\nlibrary Uint256Helpers {\n    uint256 private constant MAX_UINT64 = uint64(-1);\n\n    string private constant ERROR_NUMBER_TOO_BIG = \"UINT64_NUMBER_TOO_BIG\";\n\n    function toUint64(uint256 a) internal pure returns (uint64) {\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\n        return uint64(a);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/EtherTokenConstant.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\n// contracts where both tokens and ETH are accepted\ncontract EtherTokenConstant {\n    address internal constant ETH = address(0);\n}\n"
    },
    "@aragon/os/contracts/common/IsContract.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract IsContract {\n    /*\n    * NOTE: this should NEVER be used for authentication\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\n    *\n    * This is only intended to be used as a sanity check that an address is actually a contract,\n    * RATHER THAN an address not being a contract.\n    */\n    function isContract(address _target) internal view returns (bool) {\n        if (_target == address(0)) {\n            return false;\n        }\n\n        uint256 size;\n        assembly { size := extcodesize(_target) }\n        return size > 0;\n    }\n}\n"
    },
    "@aragon/os/contracts/common/SafeERC20.sol": {
      "content": "// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\n\npragma solidity ^0.4.24;\n\nimport \"../lib/token/ERC20.sol\";\n\n\nlibrary SafeERC20 {\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\n    // https://github.com/ethereum/solidity/issues/3544\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\n\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \"SAFE_ERC_20_BALANCE_REVERTED\";\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \"SAFE_ERC_20_ALLOWANCE_REVERTED\";\n\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\n        private\n        returns (bool)\n    {\n        bool ret;\n        assembly {\n            let ptr := mload(0x40)    // free memory pointer\n\n            let success := call(\n                gas,                  // forward all gas\n                _addr,                // address\n                0,                    // no value\n                add(_calldata, 0x20), // calldata start\n                mload(_calldata),     // calldata length\n                ptr,                  // write output over free memory\n                0x20                  // uint256 return\n            )\n\n            if gt(success, 0) {\n                // Check number of bytes returned from last function call\n                switch returndatasize\n\n                // No bytes returned: assume success\n                case 0 {\n                    ret := 1\n                }\n\n                // 32 bytes returned: check if non-zero\n                case 0x20 {\n                    // Only return success if returned data was true\n                    // Already have output in ptr\n                    ret := eq(mload(ptr), 1)\n                }\n\n                // Not sure what was returned: don't mark as success\n                default { }\n            }\n        }\n        return ret;\n    }\n\n    function staticInvoke(address _addr, bytes memory _calldata)\n        private\n        view\n        returns (bool, uint256)\n    {\n        bool success;\n        uint256 ret;\n        assembly {\n            let ptr := mload(0x40)    // free memory pointer\n\n            success := staticcall(\n                gas,                  // forward all gas\n                _addr,                // address\n                add(_calldata, 0x20), // calldata start\n                mload(_calldata),     // calldata length\n                ptr,                  // write output over free memory\n                0x20                  // uint256 return\n            )\n\n            if gt(success, 0) {\n                ret := mload(ptr)\n            }\n        }\n        return (success, ret);\n    }\n\n    /**\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\n    *      Note that this makes an external call to the token.\n    */\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\n        bytes memory transferCallData = abi.encodeWithSelector(\n            TRANSFER_SELECTOR,\n            _to,\n            _amount\n        );\n        return invokeAndCheckSuccess(_token, transferCallData);\n    }\n\n    /**\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\n    *      Note that this makes an external call to the token.\n    */\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\n        bytes memory transferFromCallData = abi.encodeWithSelector(\n            _token.transferFrom.selector,\n            _from,\n            _to,\n            _amount\n        );\n        return invokeAndCheckSuccess(_token, transferFromCallData);\n    }\n\n    /**\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\n    *      Note that this makes an external call to the token.\n    */\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\n        bytes memory approveCallData = abi.encodeWithSelector(\n            _token.approve.selector,\n            _spender,\n            _amount\n        );\n        return invokeAndCheckSuccess(_token, approveCallData);\n    }\n\n    /**\n    * @dev Static call into ERC20.balanceOf().\n    * Reverts if the call fails for some reason (should never fail).\n    */\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\n            _token.balanceOf.selector,\n            _owner\n        );\n\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\n\n        return tokenBalance;\n    }\n\n    /**\n    * @dev Static call into ERC20.allowance().\n    * Reverts if the call fails for some reason (should never fail).\n    */\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\n        bytes memory allowanceCallData = abi.encodeWithSelector(\n            _token.allowance.selector,\n            _owner,\n            _spender\n        );\n\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\n\n        return allowance;\n    }\n\n    /**\n    * @dev Static call into ERC20.totalSupply().\n    * Reverts if the call fails for some reason (should never fail).\n    */\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\n\n        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\n\n        return totalSupply;\n    }\n}\n"
    },
    "@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IEVMScriptExecutor {\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\n    function executorType() external pure returns (bytes32);\n}\n"
    },
    "@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./IEVMScriptExecutor.sol\";\n\n\ncontract EVMScriptRegistryConstants {\n    /* Hardcoded constants to save gas\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\"evmreg\");\n    */\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\n}\n\n\ninterface IEVMScriptRegistry {\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\n    function disableScriptExecutor(uint256 executorId) external;\n\n    // TODO: this should be external\n    // See https://github.com/ethereum/solidity/issues/4832\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\n}\n"
    },
    "@aragon/os/contracts/kernel/KernelConstants.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract KernelAppIds {\n    /* Hardcoded constants to save gas\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\"kernel\");\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\"acl\");\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\"vault\");\n    */\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\n}\n\n\ncontract KernelNamespaceConstants {\n    /* Hardcoded constants to save gas\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\"core\");\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\"base\");\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\"app\");\n    */\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\n}\n"
    },
    "@aragon/apps-shared-minime/contracts/ITokenController.sol": {
      "content": "pragma solidity ^0.4.24;\n\n/// @dev The token controller contract must implement these functions\n\n\ninterface ITokenController {\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether to create tokens\n    /// @return True if the ether is accepted, false if it throws\n    function proxyPayment(address _owner) external payable returns(bool);\n\n    /// @notice Notifies the controller about a token transfer allowing the\n    ///  controller to react if desired\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) external returns(bool);\n\n    /// @notice Notifies the controller about an approval allowing the\n    ///  controller to react if desired\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount) external returns(bool);\n}\n"
    },
    "contracts/test/ConvictionVotingMock.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"../ConvictionVoting.sol\";\nimport \"@aragon/contract-helpers-test/contracts/0.4/aragonOS/TimeHelpersMock.sol\";\n\ncontract ConvictionVotingMock is ConvictionVoting, TimeHelpersMock {\n\n}\n"
    },
    "@aragon/contract-helpers-test/contracts/0.4/aragonOS/TimeHelpersMock.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"@aragon/os/contracts/common/TimeHelpers.sol\";\nimport \"@aragon/os/contracts/lib/math/SafeMath.sol\";\nimport \"@aragon/os/contracts/lib/math/SafeMath64.sol\";\n\n\ncontract TimeHelpersMock is TimeHelpers {\n    using SafeMath for uint256;\n    using SafeMath64 for uint64;\n\n    uint256 public mockedTimestamp;\n    uint256 public mockedBlockNumber;\n\n    /**\n    * @dev Sets a mocked timestamp value, used only for testing purposes\n    */\n    function mockSetTimestamp(uint256 _timestamp) external {\n        mockedTimestamp = _timestamp;\n    }\n\n    /**\n    * @dev Increases the mocked timestamp value, used only for testing purposes\n    */\n    function mockIncreaseTime(uint256 _seconds) external {\n        if (mockedTimestamp != 0) mockedTimestamp = mockedTimestamp.add(_seconds);\n        else mockedTimestamp = block.timestamp.add(_seconds);\n    }\n\n    /**\n    * @dev Decreases the mocked timestamp value, used only for testing purposes\n    */\n    function mockDecreaseTime(uint256 _seconds) external {\n        if (mockedTimestamp != 0) mockedTimestamp = mockedTimestamp.sub(_seconds);\n        else mockedTimestamp = block.timestamp.sub(_seconds);\n    }\n\n    /**\n    * @dev Advances the mocked block number value, used only for testing purposes\n    */\n    function mockAdvanceBlocks(uint256 _number) external {\n        if (mockedBlockNumber != 0) mockedBlockNumber = mockedBlockNumber.add(_number);\n        else mockedBlockNumber = block.number.add(_number);\n    }\n\n    /**\n    * @dev Returns the mocked timestamp value\n    */\n    function getTimestampPublic() external view returns (uint64) {\n        return getTimestamp64();\n    }\n\n    /**\n    * @dev Returns the mocked block number value\n    */\n    function getBlockNumberPublic() external view returns (uint256) {\n        return getBlockNumber();\n    }\n\n    /**\n    * @dev Returns the mocked timestamp if it was set, or current `block.timestamp`\n    */\n    function getTimestamp() internal view returns (uint256) {\n        if (mockedTimestamp != 0) return mockedTimestamp;\n        return super.getTimestamp();\n    }\n\n    /**\n    * @dev Returns the mocked block number if it was set, or current `block.number`\n    */\n    function getBlockNumber() internal view returns (uint256) {\n        if (mockedBlockNumber != 0) return mockedBlockNumber;\n        return super.getBlockNumber();\n    }\n}\n"
    },
    "@aragon/contract-helpers-test/contracts/0.4/aragonOS/SharedTimeHelpersMock.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"./TimeHelpersMock.sol\";\nimport \"@aragon/os/contracts/common/TimeHelpers.sol\";\n\n\ncontract SharedTimeHelpersMock is TimeHelpers {\n    TimeHelpersMock public clock;\n\n    /**\n    * @dev Set shared clock mock instance\n    *      Allows to avoid changing constructors to have this time mocked functionality\n    */\n    function setClock(TimeHelpersMock _clock) external {\n        clock = _clock;\n    }\n\n    /**\n    * @dev Returns the mocked timestamp value\n    */\n    function getTimestampPublic() external view returns (uint256) {\n        return getTimestamp();\n    }\n\n    /**\n    * @dev Returns the mocked block number value\n    */\n    function getBlockNumberPublic() external view returns (uint256) {\n        return getBlockNumber();\n    }\n\n    /**\n    * @dev Returns the mocked timestamp if it was set, or current `block.timestamp`\n    */\n    function getTimestamp() internal view returns (uint256) {\n        if (clock != TimeHelpersMock(0)) {\n            return clock.getTimestampPublic();\n        }\n        return super.getTimestamp();\n    }\n\n    /**\n    * @dev Returns the mocked block number if it was set, or current `block.number`\n    */\n    function getBlockNumber() internal view returns (uint256) {\n        if (clock != TimeHelpersMock(0)) {\n            return clock.getBlockNumberPublic();\n        }\n        return super.getBlockNumber();\n    }\n}\n"
    },
    "@aragon/os/contracts/acl/ACL.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../apps/AragonApp.sol\";\nimport \"../common/ConversionHelpers.sol\";\nimport \"../common/TimeHelpers.sol\";\nimport \"./ACLSyntaxSugar.sol\";\nimport \"./IACL.sol\";\nimport \"./IACLOracle.sol\";\n\n\n/* solium-disable function-order */\n// Allow public initialize() to be first\ncontract ACL is IACL, TimeHelpers, AragonApp, ACLHelpers {\n    /* Hardcoded constants to save gas\n    bytes32 public constant CREATE_PERMISSIONS_ROLE = keccak256(\"CREATE_PERMISSIONS_ROLE\");\n    */\n    bytes32 public constant CREATE_PERMISSIONS_ROLE = 0x0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a;\n\n    enum Op { NONE, EQ, NEQ, GT, LT, GTE, LTE, RET, NOT, AND, OR, XOR, IF_ELSE } // op types\n\n    struct Param {\n        uint8 id;\n        uint8 op;\n        uint240 value; // even though value is an uint240 it can store addresses\n        // in the case of 32 byte hashes losing 2 bytes precision isn't a huge deal\n        // op and id take less than 1 byte each so it can be kept in 1 sstore\n    }\n\n    uint8 internal constant BLOCK_NUMBER_PARAM_ID = 200;\n    uint8 internal constant TIMESTAMP_PARAM_ID    = 201;\n    // 202 is unused\n    uint8 internal constant ORACLE_PARAM_ID       = 203;\n    uint8 internal constant LOGIC_OP_PARAM_ID     = 204;\n    uint8 internal constant PARAM_VALUE_PARAM_ID  = 205;\n\n    /* Hardcoded constant to save gas\n    bytes32 public constant EMPTY_PARAM_HASH = keccak256(uint256(0));\n    */\n    bytes32 public constant EMPTY_PARAM_HASH = 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\n    bytes32 public constant NO_PERMISSION = bytes32(0);\n    address public constant ANY_ENTITY = address(-1);\n    address public constant BURN_ENTITY = address(1); // address(0) is already used as \"no permission manager\"\n\n    string private constant ERROR_AUTH_INIT_KERNEL = \"ACL_AUTH_INIT_KERNEL\";\n    string private constant ERROR_AUTH_NO_MANAGER = \"ACL_AUTH_NO_MANAGER\";\n    string private constant ERROR_EXISTENT_MANAGER = \"ACL_EXISTENT_MANAGER\";\n\n    // Whether someone has a permission\n    mapping (bytes32 => bytes32) internal permissions; // permissions hash => params hash\n    mapping (bytes32 => Param[]) internal permissionParams; // params hash => params\n\n    // Who is the manager of a permission\n    mapping (bytes32 => address) internal permissionManager;\n\n    event SetPermission(address indexed entity, address indexed app, bytes32 indexed role, bool allowed);\n    event SetPermissionParams(address indexed entity, address indexed app, bytes32 indexed role, bytes32 paramsHash);\n    event ChangePermissionManager(address indexed app, bytes32 indexed role, address indexed manager);\n\n    modifier onlyPermissionManager(address _app, bytes32 _role) {\n        require(msg.sender == getPermissionManager(_app, _role), ERROR_AUTH_NO_MANAGER);\n        _;\n    }\n\n    modifier noPermissionManager(address _app, bytes32 _role) {\n        // only allow permission creation (or re-creation) when there is no manager\n        require(getPermissionManager(_app, _role) == address(0), ERROR_EXISTENT_MANAGER);\n        _;\n    }\n\n    /**\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\n    * @notice Initialize an ACL instance and set `_permissionsCreator` as the entity that can create other permissions\n    * @param _permissionsCreator Entity that will be given permission over createPermission\n    */\n    function initialize(address _permissionsCreator) public onlyInit {\n        initialized();\n        require(msg.sender == address(kernel()), ERROR_AUTH_INIT_KERNEL);\n\n        _createPermission(_permissionsCreator, this, CREATE_PERMISSIONS_ROLE, _permissionsCreator);\n    }\n\n    /**\n    * @dev Creates a permission that wasn't previously set and managed.\n    *      If a created permission is removed it is possible to reset it with createPermission.\n    *      This is the **ONLY** way to create permissions and set managers to permissions that don't\n    *      have a manager.\n    *      In terms of the ACL being initialized, this function implicitly protects all the other\n    *      state-changing external functions, as they all require the sender to be a manager.\n    * @notice Create a new permission granting `_entity` the ability to perform actions requiring `_role` on `_app`, setting `_manager` as the permission's manager\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\n    * @param _role Identifier for the group of actions in app given access to perform\n    * @param _manager Address of the entity that will be able to grant and revoke the permission further.\n    */\n    function createPermission(address _entity, address _app, bytes32 _role, address _manager)\n        external\n        auth(CREATE_PERMISSIONS_ROLE)\n        noPermissionManager(_app, _role)\n    {\n        _createPermission(_entity, _app, _role, _manager);\n    }\n\n    /**\n    * @dev Grants permission if allowed. This requires `msg.sender` to be the permission manager\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\n    * @param _role Identifier for the group of actions in app given access to perform\n    */\n    function grantPermission(address _entity, address _app, bytes32 _role)\n        external\n    {\n        grantPermissionP(_entity, _app, _role, new uint256[](0));\n    }\n\n    /**\n    * @dev Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\n    * @param _role Identifier for the group of actions in app given access to perform\n    * @param _params Permission parameters\n    */\n    function grantPermissionP(address _entity, address _app, bytes32 _role, uint256[] _params)\n        public\n        onlyPermissionManager(_app, _role)\n    {\n        bytes32 paramsHash = _params.length > 0 ? _saveParams(_params) : EMPTY_PARAM_HASH;\n        _setPermission(_entity, _app, _role, paramsHash);\n    }\n\n    /**\n    * @dev Revokes permission if allowed. This requires `msg.sender` to be the the permission manager\n    * @notice Revoke from `_entity` the ability to perform actions requiring `_role` on `_app`\n    * @param _entity Address of the whitelisted entity to revoke access from\n    * @param _app Address of the app in which the role will be revoked\n    * @param _role Identifier for the group of actions in app being revoked\n    */\n    function revokePermission(address _entity, address _app, bytes32 _role)\n        external\n        onlyPermissionManager(_app, _role)\n    {\n        _setPermission(_entity, _app, _role, NO_PERMISSION);\n    }\n\n    /**\n    * @notice Set `_newManager` as the manager of `_role` in `_app`\n    * @param _newManager Address for the new manager\n    * @param _app Address of the app in which the permission management is being transferred\n    * @param _role Identifier for the group of actions being transferred\n    */\n    function setPermissionManager(address _newManager, address _app, bytes32 _role)\n        external\n        onlyPermissionManager(_app, _role)\n    {\n        _setPermissionManager(_newManager, _app, _role);\n    }\n\n    /**\n    * @notice Remove the manager of `_role` in `_app`\n    * @param _app Address of the app in which the permission is being unmanaged\n    * @param _role Identifier for the group of actions being unmanaged\n    */\n    function removePermissionManager(address _app, bytes32 _role)\n        external\n        onlyPermissionManager(_app, _role)\n    {\n        _setPermissionManager(address(0), _app, _role);\n    }\n\n    /**\n    * @notice Burn non-existent `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\n    * @param _app Address of the app in which the permission is being burned\n    * @param _role Identifier for the group of actions being burned\n    */\n    function createBurnedPermission(address _app, bytes32 _role)\n        external\n        auth(CREATE_PERMISSIONS_ROLE)\n        noPermissionManager(_app, _role)\n    {\n        _setPermissionManager(BURN_ENTITY, _app, _role);\n    }\n\n    /**\n    * @notice Burn `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\n    * @param _app Address of the app in which the permission is being burned\n    * @param _role Identifier for the group of actions being burned\n    */\n    function burnPermissionManager(address _app, bytes32 _role)\n        external\n        onlyPermissionManager(_app, _role)\n    {\n        _setPermissionManager(BURN_ENTITY, _app, _role);\n    }\n\n    /**\n     * @notice Get parameters for permission array length\n     * @param _entity Address of the whitelisted entity that will be able to perform the role\n     * @param _app Address of the app\n     * @param _role Identifier for a group of actions in app\n     * @return Length of the array\n     */\n    function getPermissionParamsLength(address _entity, address _app, bytes32 _role) external view returns (uint) {\n        return permissionParams[permissions[permissionHash(_entity, _app, _role)]].length;\n    }\n\n    /**\n    * @notice Get parameter for permission\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\n    * @param _app Address of the app\n    * @param _role Identifier for a group of actions in app\n    * @param _index Index of parameter in the array\n    * @return Parameter (id, op, value)\n    */\n    function getPermissionParam(address _entity, address _app, bytes32 _role, uint _index)\n        external\n        view\n        returns (uint8, uint8, uint240)\n    {\n        Param storage param = permissionParams[permissions[permissionHash(_entity, _app, _role)]][_index];\n        return (param.id, param.op, param.value);\n    }\n\n    /**\n    * @dev Get manager for permission\n    * @param _app Address of the app\n    * @param _role Identifier for a group of actions in app\n    * @return address of the manager for the permission\n    */\n    function getPermissionManager(address _app, bytes32 _role) public view returns (address) {\n        return permissionManager[roleHash(_app, _role)];\n    }\n\n    /**\n    * @dev Function called by apps to check ACL on kernel or to check permission status\n    * @param _who Sender of the original call\n    * @param _where Address of the app\n    * @param _what Identifier for a group of actions in app (role)\n    * @param _how Permission parameters\n    * @return boolean indicating whether the ACL allows the role or not\n    */\n    function hasPermission(address _who, address _where, bytes32 _what, bytes memory _how) public view returns (bool) {\n        return hasPermission(_who, _where, _what, ConversionHelpers.dangerouslyCastBytesToUintArray(_how));\n    }\n\n    function hasPermission(address _who, address _where, bytes32 _what, uint256[] memory _how) public view returns (bool) {\n        bytes32 whoParams = permissions[permissionHash(_who, _where, _what)];\n        if (whoParams != NO_PERMISSION && evalParams(whoParams, _who, _where, _what, _how)) {\n            return true;\n        }\n\n        bytes32 anyParams = permissions[permissionHash(ANY_ENTITY, _where, _what)];\n        if (anyParams != NO_PERMISSION && evalParams(anyParams, ANY_ENTITY, _where, _what, _how)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function hasPermission(address _who, address _where, bytes32 _what) public view returns (bool) {\n        uint256[] memory empty = new uint256[](0);\n        return hasPermission(_who, _where, _what, empty);\n    }\n\n    function evalParams(\n        bytes32 _paramsHash,\n        address _who,\n        address _where,\n        bytes32 _what,\n        uint256[] _how\n    )\n        public\n        view\n        returns (bool)\n    {\n        if (_paramsHash == EMPTY_PARAM_HASH) {\n            return true;\n        }\n\n        return _evalParam(_paramsHash, 0, _who, _where, _what, _how);\n    }\n\n    /**\n    * @dev Internal createPermission for access inside the kernel (on instantiation)\n    */\n    function _createPermission(address _entity, address _app, bytes32 _role, address _manager) internal {\n        _setPermission(_entity, _app, _role, EMPTY_PARAM_HASH);\n        _setPermissionManager(_manager, _app, _role);\n    }\n\n    /**\n    * @dev Internal function called to actually save the permission\n    */\n    function _setPermission(address _entity, address _app, bytes32 _role, bytes32 _paramsHash) internal {\n        permissions[permissionHash(_entity, _app, _role)] = _paramsHash;\n        bool entityHasPermission = _paramsHash != NO_PERMISSION;\n        bool permissionHasParams = entityHasPermission && _paramsHash != EMPTY_PARAM_HASH;\n\n        emit SetPermission(_entity, _app, _role, entityHasPermission);\n        if (permissionHasParams) {\n            emit SetPermissionParams(_entity, _app, _role, _paramsHash);\n        }\n    }\n\n    function _saveParams(uint256[] _encodedParams) internal returns (bytes32) {\n        bytes32 paramHash = keccak256(abi.encodePacked(_encodedParams));\n        Param[] storage params = permissionParams[paramHash];\n\n        if (params.length == 0) { // params not saved before\n            for (uint256 i = 0; i < _encodedParams.length; i++) {\n                uint256 encodedParam = _encodedParams[i];\n                Param memory param = Param(decodeParamId(encodedParam), decodeParamOp(encodedParam), uint240(encodedParam));\n                params.push(param);\n            }\n        }\n\n        return paramHash;\n    }\n\n    function _evalParam(\n        bytes32 _paramsHash,\n        uint32 _paramId,\n        address _who,\n        address _where,\n        bytes32 _what,\n        uint256[] _how\n    )\n        internal\n        view\n        returns (bool)\n    {\n        if (_paramId >= permissionParams[_paramsHash].length) {\n            return false; // out of bounds\n        }\n\n        Param memory param = permissionParams[_paramsHash][_paramId];\n\n        if (param.id == LOGIC_OP_PARAM_ID) {\n            return _evalLogic(param, _paramsHash, _who, _where, _what, _how);\n        }\n\n        uint256 value;\n        uint256 comparedTo = uint256(param.value);\n\n        // get value\n        if (param.id == ORACLE_PARAM_ID) {\n            value = checkOracle(IACLOracle(param.value), _who, _where, _what, _how) ? 1 : 0;\n            comparedTo = 1;\n        } else if (param.id == BLOCK_NUMBER_PARAM_ID) {\n            value = getBlockNumber();\n        } else if (param.id == TIMESTAMP_PARAM_ID) {\n            value = getTimestamp();\n        } else if (param.id == PARAM_VALUE_PARAM_ID) {\n            value = uint256(param.value);\n        } else {\n            if (param.id >= _how.length) {\n                return false;\n            }\n            value = uint256(uint240(_how[param.id])); // force lost precision\n        }\n\n        if (Op(param.op) == Op.RET) {\n            return uint256(value) > 0;\n        }\n\n        return compare(value, Op(param.op), comparedTo);\n    }\n\n    function _evalLogic(Param _param, bytes32 _paramsHash, address _who, address _where, bytes32 _what, uint256[] _how)\n        internal\n        view\n        returns (bool)\n    {\n        if (Op(_param.op) == Op.IF_ELSE) {\n            uint32 conditionParam;\n            uint32 successParam;\n            uint32 failureParam;\n\n            (conditionParam, successParam, failureParam) = decodeParamsList(uint256(_param.value));\n            bool result = _evalParam(_paramsHash, conditionParam, _who, _where, _what, _how);\n\n            return _evalParam(_paramsHash, result ? successParam : failureParam, _who, _where, _what, _how);\n        }\n\n        uint32 param1;\n        uint32 param2;\n\n        (param1, param2,) = decodeParamsList(uint256(_param.value));\n        bool r1 = _evalParam(_paramsHash, param1, _who, _where, _what, _how);\n\n        if (Op(_param.op) == Op.NOT) {\n            return !r1;\n        }\n\n        if (r1 && Op(_param.op) == Op.OR) {\n            return true;\n        }\n\n        if (!r1 && Op(_param.op) == Op.AND) {\n            return false;\n        }\n\n        bool r2 = _evalParam(_paramsHash, param2, _who, _where, _what, _how);\n\n        if (Op(_param.op) == Op.XOR) {\n            return r1 != r2;\n        }\n\n        return r2; // both or and and depend on result of r2 after checks\n    }\n\n    function compare(uint256 _a, Op _op, uint256 _b) internal pure returns (bool) {\n        if (_op == Op.EQ)  return _a == _b;                              // solium-disable-line lbrace\n        if (_op == Op.NEQ) return _a != _b;                              // solium-disable-line lbrace\n        if (_op == Op.GT)  return _a > _b;                               // solium-disable-line lbrace\n        if (_op == Op.LT)  return _a < _b;                               // solium-disable-line lbrace\n        if (_op == Op.GTE) return _a >= _b;                              // solium-disable-line lbrace\n        if (_op == Op.LTE) return _a <= _b;                              // solium-disable-line lbrace\n        return false;\n    }\n\n    function checkOracle(IACLOracle _oracleAddr, address _who, address _where, bytes32 _what, uint256[] _how) internal view returns (bool) {\n        bytes4 sig = _oracleAddr.canPerform.selector;\n\n        // a raw call is required so we can return false if the call reverts, rather than reverting\n        bytes memory checkCalldata = abi.encodeWithSelector(sig, _who, _where, _what, _how);\n\n        bool ok;\n        assembly {\n            // send all available gas; if the oracle eats up all the gas, we will eventually revert\n            // note that we are currently guaranteed to still have some gas after the call from\n            // EIP-150's 63/64 gas forward rule\n            ok := staticcall(gas, _oracleAddr, add(checkCalldata, 0x20), mload(checkCalldata), 0, 0)\n        }\n\n        if (!ok) {\n            return false;\n        }\n\n        uint256 size;\n        assembly { size := returndatasize }\n        if (size != 32) {\n            return false;\n        }\n\n        bool result;\n        assembly {\n            let ptr := mload(0x40)       // get next free memory ptr\n            returndatacopy(ptr, 0, size) // copy return from above `staticcall`\n            result := mload(ptr)         // read data at ptr and set it to result\n            mstore(ptr, 0)               // set pointer memory to 0 so it still is the next free ptr\n        }\n\n        return result;\n    }\n\n    /**\n    * @dev Internal function that sets management\n    */\n    function _setPermissionManager(address _newManager, address _app, bytes32 _role) internal {\n        permissionManager[roleHash(_app, _role)] = _newManager;\n        emit ChangePermissionManager(_app, _role, _newManager);\n    }\n\n    function roleHash(address _where, bytes32 _what) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"ROLE\", _where, _what));\n    }\n\n    function permissionHash(address _who, address _where, bytes32 _what) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"PERMISSION\", _who, _where, _what));\n    }\n}\n"
    },
    "@aragon/os/contracts/acl/IACLOracle.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ninterface IACLOracle {\n    function canPerform(address who, address where, bytes32 what, uint256[] how) external view returns (bool);\n}\n"
    },
    "@aragon/os/contracts/factory/EVMScriptRegistryFactory.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../evmscript/IEVMScriptExecutor.sol\";\nimport \"../evmscript/EVMScriptRegistry.sol\";\n\nimport \"../evmscript/executors/CallsScript.sol\";\n\nimport \"../kernel/Kernel.sol\";\nimport \"../acl/ACL.sol\";\n\n\ncontract EVMScriptRegistryFactory is EVMScriptRegistryConstants {\n    EVMScriptRegistry public baseReg;\n    IEVMScriptExecutor public baseCallScript;\n\n    /**\n    * @notice Create a new EVMScriptRegistryFactory.\n    */\n    constructor() public {\n        baseReg = new EVMScriptRegistry();\n        baseCallScript = IEVMScriptExecutor(new CallsScript());\n    }\n\n    /**\n    * @notice Install a new pinned instance of EVMScriptRegistry on `_dao`.\n    * @param _dao Kernel\n    * @return Installed EVMScriptRegistry\n    */\n    function newEVMScriptRegistry(Kernel _dao) public returns (EVMScriptRegistry reg) {\n        bytes memory initPayload = abi.encodeWithSelector(reg.initialize.selector);\n        reg = EVMScriptRegistry(_dao.newPinnedAppInstance(EVMSCRIPT_REGISTRY_APP_ID, baseReg, initPayload, true));\n\n        ACL acl = ACL(_dao.acl());\n\n        acl.createPermission(this, reg, reg.REGISTRY_ADD_EXECUTOR_ROLE(), this);\n\n        reg.addScriptExecutor(baseCallScript);     // spec 1 = CallsScript\n\n        // Clean up the permissions\n        acl.revokePermission(this, reg, reg.REGISTRY_ADD_EXECUTOR_ROLE());\n        acl.removePermissionManager(reg, reg.REGISTRY_ADD_EXECUTOR_ROLE());\n\n        return reg;\n    }\n}\n"
    },
    "@aragon/os/contracts/evmscript/EVMScriptRegistry.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../apps/AragonApp.sol\";\nimport \"./ScriptHelpers.sol\";\nimport \"./IEVMScriptExecutor.sol\";\nimport \"./IEVMScriptRegistry.sol\";\n\n\n/* solium-disable function-order */\n// Allow public initialize() to be first\ncontract EVMScriptRegistry is IEVMScriptRegistry, EVMScriptRegistryConstants, AragonApp {\n    using ScriptHelpers for bytes;\n\n    /* Hardcoded constants to save gas\n    bytes32 public constant REGISTRY_ADD_EXECUTOR_ROLE = keccak256(\"REGISTRY_ADD_EXECUTOR_ROLE\");\n    bytes32 public constant REGISTRY_MANAGER_ROLE = keccak256(\"REGISTRY_MANAGER_ROLE\");\n    */\n    bytes32 public constant REGISTRY_ADD_EXECUTOR_ROLE = 0xc4e90f38eea8c4212a009ca7b8947943ba4d4a58d19b683417f65291d1cd9ed2;\n    // WARN: Manager can censor all votes and the like happening in an org\n    bytes32 public constant REGISTRY_MANAGER_ROLE = 0xf7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa3;\n\n    uint256 internal constant SCRIPT_START_LOCATION = 4;\n\n    string private constant ERROR_INEXISTENT_EXECUTOR = \"EVMREG_INEXISTENT_EXECUTOR\";\n    string private constant ERROR_EXECUTOR_ENABLED = \"EVMREG_EXECUTOR_ENABLED\";\n    string private constant ERROR_EXECUTOR_DISABLED = \"EVMREG_EXECUTOR_DISABLED\";\n    string private constant ERROR_SCRIPT_LENGTH_TOO_SHORT = \"EVMREG_SCRIPT_LENGTH_TOO_SHORT\";\n\n    struct ExecutorEntry {\n        IEVMScriptExecutor executor;\n        bool enabled;\n    }\n\n    uint256 private executorsNextIndex;\n    mapping (uint256 => ExecutorEntry) public executors;\n\n    event EnableExecutor(uint256 indexed executorId, address indexed executorAddress);\n    event DisableExecutor(uint256 indexed executorId, address indexed executorAddress);\n\n    modifier executorExists(uint256 _executorId) {\n        require(_executorId > 0 && _executorId < executorsNextIndex, ERROR_INEXISTENT_EXECUTOR);\n        _;\n    }\n\n    /**\n    * @notice Initialize the registry\n    */\n    function initialize() public onlyInit {\n        initialized();\n        // Create empty record to begin executor IDs at 1\n        executorsNextIndex = 1;\n    }\n\n    /**\n    * @notice Add a new script executor with address `_executor` to the registry\n    * @param _executor Address of the IEVMScriptExecutor that will be added to the registry\n    * @return id Identifier of the executor in the registry\n    */\n    function addScriptExecutor(IEVMScriptExecutor _executor) external auth(REGISTRY_ADD_EXECUTOR_ROLE) returns (uint256 id) {\n        uint256 executorId = executorsNextIndex++;\n        executors[executorId] = ExecutorEntry(_executor, true);\n        emit EnableExecutor(executorId, _executor);\n        return executorId;\n    }\n\n    /**\n    * @notice Disable script executor with ID `_executorId`\n    * @param _executorId Identifier of the executor in the registry\n    */\n    function disableScriptExecutor(uint256 _executorId)\n        external\n        authP(REGISTRY_MANAGER_ROLE, arr(_executorId))\n    {\n        // Note that we don't need to check for an executor's existence in this case, as only\n        // existing executors can be enabled\n        ExecutorEntry storage executorEntry = executors[_executorId];\n        require(executorEntry.enabled, ERROR_EXECUTOR_DISABLED);\n        executorEntry.enabled = false;\n        emit DisableExecutor(_executorId, executorEntry.executor);\n    }\n\n    /**\n    * @notice Enable script executor with ID `_executorId`\n    * @param _executorId Identifier of the executor in the registry\n    */\n    function enableScriptExecutor(uint256 _executorId)\n        external\n        authP(REGISTRY_MANAGER_ROLE, arr(_executorId))\n        executorExists(_executorId)\n    {\n        ExecutorEntry storage executorEntry = executors[_executorId];\n        require(!executorEntry.enabled, ERROR_EXECUTOR_ENABLED);\n        executorEntry.enabled = true;\n        emit EnableExecutor(_executorId, executorEntry.executor);\n    }\n\n    /**\n    * @dev Get the script executor that can execute a particular script based on its first 4 bytes\n    * @param _script EVMScript being inspected\n    */\n    function getScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\n        require(_script.length >= SCRIPT_START_LOCATION, ERROR_SCRIPT_LENGTH_TOO_SHORT);\n        uint256 id = _script.getSpecId();\n\n        // Note that we don't need to check for an executor's existence in this case, as only\n        // existing executors can be enabled\n        ExecutorEntry storage entry = executors[id];\n        return entry.enabled ? entry.executor : IEVMScriptExecutor(0);\n    }\n}\n"
    },
    "@aragon/os/contracts/evmscript/executors/CallsScript.sol": {
      "content": "pragma solidity 0.4.24;\n\n// Inspired by https://github.com/reverendus/tx-manager\n\nimport \"../ScriptHelpers.sol\";\nimport \"./BaseEVMScriptExecutor.sol\";\n\n\ncontract CallsScript is BaseEVMScriptExecutor {\n    using ScriptHelpers for bytes;\n\n    /* Hardcoded constants to save gas\n    bytes32 internal constant EXECUTOR_TYPE = keccak256(\"CALLS_SCRIPT\");\n    */\n    bytes32 internal constant EXECUTOR_TYPE = 0x2dc858a00f3e417be1394b87c07158e989ec681ce8cc68a9093680ac1a870302;\n\n    string private constant ERROR_BLACKLISTED_CALL = \"EVMCALLS_BLACKLISTED_CALL\";\n    string private constant ERROR_INVALID_LENGTH = \"EVMCALLS_INVALID_LENGTH\";\n\n    /* This is manually crafted in assembly\n    string private constant ERROR_CALL_REVERTED = \"EVMCALLS_CALL_REVERTED\";\n    */\n\n    event LogScriptCall(address indexed sender, address indexed src, address indexed dst);\n\n    /**\n    * @notice Executes a number of call scripts\n    * @param _script [ specId (uint32) ] many calls with this structure ->\n    *    [ to (address: 20 bytes) ] [ calldataLength (uint32: 4 bytes) ] [ calldata (calldataLength bytes) ]\n    * @param _blacklist Addresses the script cannot call to, or will revert.\n    * @return Always returns empty byte array\n    */\n    function execScript(bytes _script, bytes, address[] _blacklist) external isInitialized returns (bytes) {\n        uint256 location = SCRIPT_START_LOCATION; // first 32 bits are spec id\n        while (location < _script.length) {\n            // Check there's at least address + calldataLength available\n            require(_script.length - location >= 0x18, ERROR_INVALID_LENGTH);\n\n            address contractAddress = _script.addressAt(location);\n            // Check address being called is not blacklist\n            for (uint256 i = 0; i < _blacklist.length; i++) {\n                require(contractAddress != _blacklist[i], ERROR_BLACKLISTED_CALL);\n            }\n\n            // logged before execution to ensure event ordering in receipt\n            // if failed entire execution is reverted regardless\n            emit LogScriptCall(msg.sender, address(this), contractAddress);\n\n            uint256 calldataLength = uint256(_script.uint32At(location + 0x14));\n            uint256 startOffset = location + 0x14 + 0x04;\n            uint256 calldataStart = _script.locationOf(startOffset);\n\n            // compute end of script / next location\n            location = startOffset + calldataLength;\n            require(location <= _script.length, ERROR_INVALID_LENGTH);\n\n            bool success;\n            assembly {\n                success := call(\n                    sub(gas, 5000),       // forward gas left - 5000\n                    contractAddress,      // address\n                    0,                    // no value\n                    calldataStart,        // calldata start\n                    calldataLength,       // calldata length\n                    0,                    // don't write output\n                    0                     // don't write output\n                )\n\n                switch success\n                case 0 {\n                    let ptr := mload(0x40)\n\n                    switch returndatasize\n                    case 0 {\n                        // No error data was returned, revert with \"EVMCALLS_CALL_REVERTED\"\n                        // See remix: doing a `revert(\"EVMCALLS_CALL_REVERTED\")` always results in\n                        // this memory layout\n                        mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\n                        mstore(add(ptr, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\n                        mstore(add(ptr, 0x24), 0x0000000000000000000000000000000000000000000000000000000000000016) // reason length\n                        mstore(add(ptr, 0x44), 0x45564d43414c4c535f43414c4c5f524556455254454400000000000000000000) // reason\n\n                        revert(ptr, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\n                    }\n                    default {\n                        // Forward the full error data\n                        returndatacopy(ptr, 0, returndatasize)\n                        revert(ptr, returndatasize)\n                    }\n                }\n                default { }\n            }\n        }\n        // No need to allocate empty bytes for the return as this can only be called via an delegatecall\n        // (due to the isInitialized modifier)\n    }\n\n    function executorType() external pure returns (bytes32) {\n        return EXECUTOR_TYPE;\n    }\n}\n"
    },
    "@aragon/os/contracts/kernel/Kernel.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"./IKernel.sol\";\nimport \"./KernelConstants.sol\";\nimport \"./KernelStorage.sol\";\nimport \"../acl/IACL.sol\";\nimport \"../acl/ACLSyntaxSugar.sol\";\nimport \"../common/ConversionHelpers.sol\";\nimport \"../common/IsContract.sol\";\nimport \"../common/Petrifiable.sol\";\nimport \"../common/VaultRecoverable.sol\";\nimport \"../factory/AppProxyFactory.sol\";\nimport \"../lib/misc/ERCProxy.sol\";\n\n\n// solium-disable-next-line max-len\ncontract Kernel is IKernel, KernelStorage, KernelAppIds, KernelNamespaceConstants, Petrifiable, IsContract, VaultRecoverable, AppProxyFactory, ACLSyntaxSugar {\n    /* Hardcoded constants to save gas\n    bytes32 public constant APP_MANAGER_ROLE = keccak256(\"APP_MANAGER_ROLE\");\n    */\n    bytes32 public constant APP_MANAGER_ROLE = 0xb6d92708f3d4817afc106147d969e229ced5c46e65e0a5002a0d391287762bd0;\n\n    string private constant ERROR_APP_NOT_CONTRACT = \"KERNEL_APP_NOT_CONTRACT\";\n    string private constant ERROR_INVALID_APP_CHANGE = \"KERNEL_INVALID_APP_CHANGE\";\n    string private constant ERROR_AUTH_FAILED = \"KERNEL_AUTH_FAILED\";\n\n    /**\n    * @dev Constructor that allows the deployer to choose if the base instance should be petrified immediately.\n    * @param _shouldPetrify Immediately petrify this instance so that it can never be initialized\n    */\n    constructor(bool _shouldPetrify) public {\n        if (_shouldPetrify) {\n            petrify();\n        }\n    }\n\n    /**\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\n    * @notice Initialize this kernel instance along with its ACL and set `_permissionsCreator` as the entity that can create other permissions\n    * @param _baseAcl Address of base ACL app\n    * @param _permissionsCreator Entity that will be given permission over createPermission\n    */\n    function initialize(IACL _baseAcl, address _permissionsCreator) public onlyInit {\n        initialized();\n\n        // Set ACL base\n        _setApp(KERNEL_APP_BASES_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, _baseAcl);\n\n        // Create ACL instance and attach it as the default ACL app\n        IACL acl = IACL(newAppProxy(this, KERNEL_DEFAULT_ACL_APP_ID));\n        acl.initialize(_permissionsCreator);\n        _setApp(KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, acl);\n\n        recoveryVaultAppId = KERNEL_DEFAULT_VAULT_APP_ID;\n    }\n\n    /**\n    * @dev Create a new instance of an app linked to this kernel\n    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`\n    * @param _appId Identifier for app\n    * @param _appBase Address of the app's base implementation\n    * @return AppProxy instance\n    */\n    function newAppInstance(bytes32 _appId, address _appBase)\n        public\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\n        returns (ERCProxy appProxy)\n    {\n        return newAppInstance(_appId, _appBase, new bytes(0), false);\n    }\n\n    /**\n    * @dev Create a new instance of an app linked to this kernel and set its base\n    *      implementation if it was not already set\n    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`\n    * @param _appId Identifier for app\n    * @param _appBase Address of the app's base implementation\n    * @param _initializePayload Payload for call made by the proxy during its construction to initialize\n    * @param _setDefault Whether the app proxy app is the default one.\n    *        Useful when the Kernel needs to know of an instance of a particular app,\n    *        like Vault for escape hatch mechanism.\n    * @return AppProxy instance\n    */\n    function newAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault)\n        public\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\n        returns (ERCProxy appProxy)\n    {\n        _setAppIfNew(KERNEL_APP_BASES_NAMESPACE, _appId, _appBase);\n        appProxy = newAppProxy(this, _appId, _initializePayload);\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\n        // and it will only succeed if sender has permissions to set something to the namespace.\n        if (_setDefault) {\n            setApp(KERNEL_APP_ADDR_NAMESPACE, _appId, appProxy);\n        }\n    }\n\n    /**\n    * @dev Create a new pinned instance of an app linked to this kernel\n    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`.\n    * @param _appId Identifier for app\n    * @param _appBase Address of the app's base implementation\n    * @return AppProxy instance\n    */\n    function newPinnedAppInstance(bytes32 _appId, address _appBase)\n        public\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\n        returns (ERCProxy appProxy)\n    {\n        return newPinnedAppInstance(_appId, _appBase, new bytes(0), false);\n    }\n\n    /**\n    * @dev Create a new pinned instance of an app linked to this kernel and set\n    *      its base implementation if it was not already set\n    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`\n    * @param _appId Identifier for app\n    * @param _appBase Address of the app's base implementation\n    * @param _initializePayload Payload for call made by the proxy during its construction to initialize\n    * @param _setDefault Whether the app proxy app is the default one.\n    *        Useful when the Kernel needs to know of an instance of a particular app,\n    *        like Vault for escape hatch mechanism.\n    * @return AppProxy instance\n    */\n    function newPinnedAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault)\n        public\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\n        returns (ERCProxy appProxy)\n    {\n        _setAppIfNew(KERNEL_APP_BASES_NAMESPACE, _appId, _appBase);\n        appProxy = newAppProxyPinned(this, _appId, _initializePayload);\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\n        // and it will only succeed if sender has permissions to set something to the namespace.\n        if (_setDefault) {\n            setApp(KERNEL_APP_ADDR_NAMESPACE, _appId, appProxy);\n        }\n    }\n\n    /**\n    * @dev Set the resolving address of an app instance or base implementation\n    * @notice Set the resolving address of `_appId` in namespace `_namespace` to `_app`\n    * @param _namespace App namespace to use\n    * @param _appId Identifier for app\n    * @param _app Address of the app instance or base implementation\n    * @return ID of app\n    */\n    function setApp(bytes32 _namespace, bytes32 _appId, address _app)\n        public\n        auth(APP_MANAGER_ROLE, arr(_namespace, _appId))\n    {\n        _setApp(_namespace, _appId, _app);\n    }\n\n    /**\n    * @dev Set the default vault id for the escape hatch mechanism\n    * @param _recoveryVaultAppId Identifier of the recovery vault app\n    */\n    function setRecoveryVaultAppId(bytes32 _recoveryVaultAppId)\n        public\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_ADDR_NAMESPACE, _recoveryVaultAppId))\n    {\n        recoveryVaultAppId = _recoveryVaultAppId;\n    }\n\n    // External access to default app id and namespace constants to mimic default getters for constants\n    /* solium-disable function-order, mixedcase */\n    function CORE_NAMESPACE() external pure returns (bytes32) { return KERNEL_CORE_NAMESPACE; }\n    function APP_BASES_NAMESPACE() external pure returns (bytes32) { return KERNEL_APP_BASES_NAMESPACE; }\n    function APP_ADDR_NAMESPACE() external pure returns (bytes32) { return KERNEL_APP_ADDR_NAMESPACE; }\n    function KERNEL_APP_ID() external pure returns (bytes32) { return KERNEL_CORE_APP_ID; }\n    function DEFAULT_ACL_APP_ID() external pure returns (bytes32) { return KERNEL_DEFAULT_ACL_APP_ID; }\n    /* solium-enable function-order, mixedcase */\n\n    /**\n    * @dev Get the address of an app instance or base implementation\n    * @param _namespace App namespace to use\n    * @param _appId Identifier for app\n    * @return Address of the app\n    */\n    function getApp(bytes32 _namespace, bytes32 _appId) public view returns (address) {\n        return apps[_namespace][_appId];\n    }\n\n    /**\n    * @dev Get the address of the recovery Vault instance (to recover funds)\n    * @return Address of the Vault\n    */\n    function getRecoveryVault() public view returns (address) {\n        return apps[KERNEL_APP_ADDR_NAMESPACE][recoveryVaultAppId];\n    }\n\n    /**\n    * @dev Get the installed ACL app\n    * @return ACL app\n    */\n    function acl() public view returns (IACL) {\n        return IACL(getApp(KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID));\n    }\n\n    /**\n    * @dev Function called by apps to check ACL on kernel or to check permission status\n    * @param _who Sender of the original call\n    * @param _where Address of the app\n    * @param _what Identifier for a group of actions in app\n    * @param _how Extra data for ACL auth\n    * @return Boolean indicating whether the ACL allows the role or not.\n    *         Always returns false if the kernel hasn't been initialized yet.\n    */\n    function hasPermission(address _who, address _where, bytes32 _what, bytes _how) public view returns (bool) {\n        IACL defaultAcl = acl();\n        return address(defaultAcl) != address(0) && // Poor man's initialization check (saves gas)\n            defaultAcl.hasPermission(_who, _where, _what, _how);\n    }\n\n    function _setApp(bytes32 _namespace, bytes32 _appId, address _app) internal {\n        require(isContract(_app), ERROR_APP_NOT_CONTRACT);\n        apps[_namespace][_appId] = _app;\n        emit SetApp(_namespace, _appId, _app);\n    }\n\n    function _setAppIfNew(bytes32 _namespace, bytes32 _appId, address _app) internal {\n        address app = getApp(_namespace, _appId);\n        if (app != address(0)) {\n            // The only way to set an app is if it passes the isContract check, so no need to check it again\n            require(app == _app, ERROR_INVALID_APP_CHANGE);\n        } else {\n            _setApp(_namespace, _appId, _app);\n        }\n    }\n\n    modifier auth(bytes32 _role, uint256[] memory _params) {\n        require(\n            hasPermission(msg.sender, address(this), _role, ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)),\n            ERROR_AUTH_FAILED\n        );\n        _;\n    }\n}\n"
    },
    "@aragon/os/contracts/evmscript/ScriptHelpers.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\nlibrary ScriptHelpers {\n    function getSpecId(bytes _script) internal pure returns (uint32) {\n        return uint32At(_script, 0);\n    }\n\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\n        assembly {\n            result := mload(add(_data, add(0x20, _location)))\n        }\n    }\n\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\n        uint256 word = uint256At(_data, _location);\n\n        assembly {\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\n            0x1000000000000000000000000)\n        }\n    }\n\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\n        uint256 word = uint256At(_data, _location);\n\n        assembly {\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\n            0x100000000000000000000000000000000000000000000000000000000)\n        }\n    }\n\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\n        assembly {\n            result := add(_data, add(0x20, _location))\n        }\n    }\n\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\n        bytes memory payload = new bytes(4);\n        assembly { mstore(add(payload, 0x20), _sig) }\n        return payload;\n    }\n}\n"
    },
    "@aragon/os/contracts/evmscript/executors/BaseEVMScriptExecutor.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"../../common/Autopetrified.sol\";\nimport \"../IEVMScriptExecutor.sol\";\n\n\ncontract BaseEVMScriptExecutor is IEVMScriptExecutor, Autopetrified {\n    uint256 internal constant SCRIPT_START_LOCATION = 4;\n}\n"
    },
    "@aragon/os/contracts/kernel/KernelStorage.sol": {
      "content": "pragma solidity 0.4.24;\n\n\ncontract KernelStorage {\n    // namespace => app id => address\n    mapping (bytes32 => mapping (bytes32 => address)) public apps;\n    bytes32 public recoveryVaultAppId;\n}\n"
    },
    "@aragon/os/contracts/factory/AppProxyFactory.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../apps/AppProxyUpgradeable.sol\";\nimport \"../apps/AppProxyPinned.sol\";\n\n\ncontract AppProxyFactory {\n    event NewAppProxy(address proxy, bool isUpgradeable, bytes32 appId);\n\n    /**\n    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId`\n    * @param _kernel App's Kernel reference\n    * @param _appId Identifier for app\n    * @return AppProxyUpgradeable\n    */\n    function newAppProxy(IKernel _kernel, bytes32 _appId) public returns (AppProxyUpgradeable) {\n        return newAppProxy(_kernel, _appId, new bytes(0));\n    }\n\n    /**\n    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`\n    * @param _kernel App's Kernel reference\n    * @param _appId Identifier for app\n    * @return AppProxyUpgradeable\n    */\n    function newAppProxy(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyUpgradeable) {\n        AppProxyUpgradeable proxy = new AppProxyUpgradeable(_kernel, _appId, _initializePayload);\n        emit NewAppProxy(address(proxy), true, _appId);\n        return proxy;\n    }\n\n    /**\n    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId`\n    * @param _kernel App's Kernel reference\n    * @param _appId Identifier for app\n    * @return AppProxyPinned\n    */\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId) public returns (AppProxyPinned) {\n        return newAppProxyPinned(_kernel, _appId, new bytes(0));\n    }\n\n    /**\n    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`\n    * @param _kernel App's Kernel reference\n    * @param _appId Identifier for app\n    * @param _initializePayload Proxy initialization payload\n    * @return AppProxyPinned\n    */\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyPinned) {\n        AppProxyPinned proxy = new AppProxyPinned(_kernel, _appId, _initializePayload);\n        emit NewAppProxy(address(proxy), false, _appId);\n        return proxy;\n    }\n}\n"
    },
    "@aragon/os/contracts/lib/misc/ERCProxy.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\ncontract ERCProxy {\n    uint256 internal constant FORWARDING = 1;\n    uint256 internal constant UPGRADEABLE = 2;\n\n    function proxyType() public pure returns (uint256 proxyTypeId);\n    function implementation() public view returns (address codeAddr);\n}\n"
    },
    "@aragon/os/contracts/apps/AppProxyUpgradeable.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"./AppProxyBase.sol\";\n\n\ncontract AppProxyUpgradeable is AppProxyBase {\n    /**\n    * @dev Initialize AppProxyUpgradeable (makes it an upgradeable Aragon app)\n    * @param _kernel Reference to organization kernel for the app\n    * @param _appId Identifier for app\n    * @param _initializePayload Payload for call to be made after setup to initialize\n    */\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\n        AppProxyBase(_kernel, _appId, _initializePayload)\n        public // solium-disable-line visibility-first\n    {\n        // solium-disable-previous-line no-empty-blocks\n    }\n\n    /**\n     * @dev ERC897, the address the proxy would delegate calls to\n     */\n    function implementation() public view returns (address) {\n        return getAppBase(appId());\n    }\n\n    /**\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\n     */\n    function proxyType() public pure returns (uint256 proxyTypeId) {\n        return UPGRADEABLE;\n    }\n}\n"
    },
    "@aragon/os/contracts/apps/AppProxyPinned.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../common/UnstructuredStorage.sol\";\nimport \"../common/IsContract.sol\";\nimport \"./AppProxyBase.sol\";\n\n\ncontract AppProxyPinned is IsContract, AppProxyBase {\n    using UnstructuredStorage for bytes32;\n\n    // keccak256(\"aragonOS.appStorage.pinnedCode\")\n    bytes32 internal constant PINNED_CODE_POSITION = 0xdee64df20d65e53d7f51cb6ab6d921a0a6a638a91e942e1d8d02df28e31c038e;\n\n    /**\n    * @dev Initialize AppProxyPinned (makes it an un-upgradeable Aragon app)\n    * @param _kernel Reference to organization kernel for the app\n    * @param _appId Identifier for app\n    * @param _initializePayload Payload for call to be made after setup to initialize\n    */\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\n        AppProxyBase(_kernel, _appId, _initializePayload)\n        public // solium-disable-line visibility-first\n    {\n        setPinnedCode(getAppBase(_appId));\n        require(isContract(pinnedCode()));\n    }\n\n    /**\n     * @dev ERC897, the address the proxy would delegate calls to\n     */\n    function implementation() public view returns (address) {\n        return pinnedCode();\n    }\n\n    /**\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\n     */\n    function proxyType() public pure returns (uint256 proxyTypeId) {\n        return FORWARDING;\n    }\n\n    function setPinnedCode(address _pinnedCode) internal {\n        PINNED_CODE_POSITION.setStorageAddress(_pinnedCode);\n    }\n\n    function pinnedCode() internal view returns (address) {\n        return PINNED_CODE_POSITION.getStorageAddress();\n    }\n}\n"
    },
    "@aragon/os/contracts/apps/AppProxyBase.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"./AppStorage.sol\";\nimport \"../common/DepositableDelegateProxy.sol\";\nimport \"../kernel/KernelConstants.sol\";\nimport \"../kernel/IKernel.sol\";\n\n\ncontract AppProxyBase is AppStorage, DepositableDelegateProxy, KernelNamespaceConstants {\n    /**\n    * @dev Initialize AppProxy\n    * @param _kernel Reference to organization kernel for the app\n    * @param _appId Identifier for app\n    * @param _initializePayload Payload for call to be made after setup to initialize\n    */\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public {\n        setKernel(_kernel);\n        setAppId(_appId);\n\n        // Implicit check that kernel is actually a Kernel\n        // The EVM doesn't actually provide a way for us to make sure, but we can force a revert to\n        // occur if the kernel is set to 0x0 or a non-code address when we try to call a method on\n        // it.\n        address appCode = getAppBase(_appId);\n\n        // If initialize payload is provided, it will be executed\n        if (_initializePayload.length > 0) {\n            require(isContract(appCode));\n            // Cannot make delegatecall as a delegateproxy.delegatedFwd as it\n            // returns ending execution context and halts contract deployment\n            require(appCode.delegatecall(_initializePayload));\n        }\n    }\n\n    function getAppBase(bytes32 _appId) internal view returns (address) {\n        return kernel().getApp(KERNEL_APP_BASES_NAMESPACE, _appId);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/DepositableDelegateProxy.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"./DelegateProxy.sol\";\nimport \"./DepositableStorage.sol\";\n\n\ncontract DepositableDelegateProxy is DepositableStorage, DelegateProxy {\n    event ProxyDeposit(address sender, uint256 value);\n\n    function () external payable {\n        uint256 forwardGasThreshold = FWD_GAS_LIMIT;\n        bytes32 isDepositablePosition = DEPOSITABLE_POSITION;\n\n        // Optimized assembly implementation to prevent EIP-1884 from breaking deposits, reference code in Solidity:\n        // https://github.com/aragon/aragonOS/blob/v4.2.1/contracts/common/DepositableDelegateProxy.sol#L10-L20\n        assembly {\n            // Continue only if the gas left is lower than the threshold for forwarding to the implementation code,\n            // otherwise continue outside of the assembly block.\n            if lt(gas, forwardGasThreshold) {\n                // Only accept the deposit and emit an event if all of the following are true:\n                // the proxy accepts deposits (isDepositable), msg.data.length == 0, and msg.value > 0\n                if and(and(sload(isDepositablePosition), iszero(calldatasize)), gt(callvalue, 0)) {\n                    // Equivalent Solidity code for emitting the event:\n                    // emit ProxyDeposit(msg.sender, msg.value);\n\n                    let logData := mload(0x40) // free memory pointer\n                    mstore(logData, caller) // add 'msg.sender' to the log data (first event param)\n                    mstore(add(logData, 0x20), callvalue) // add 'msg.value' to the log data (second event param)\n\n                    // Emit an event with one topic to identify the event: keccak256('ProxyDeposit(address,uint256)') = 0x15ee...dee1\n                    log1(logData, 0x40, 0x15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee1)\n\n                    stop() // Stop. Exits execution context\n                }\n\n                // If any of above checks failed, revert the execution (if ETH was sent, it is returned to the sender)\n                revert(0, 0)\n            }\n        }\n\n        address target = implementation();\n        delegatedFwd(target, msg.data);\n    }\n}\n"
    },
    "@aragon/os/contracts/common/DelegateProxy.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../common/IsContract.sol\";\nimport \"../lib/misc/ERCProxy.sol\";\n\n\ncontract DelegateProxy is ERCProxy, IsContract {\n    uint256 internal constant FWD_GAS_LIMIT = 10000;\n\n    /**\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\n    * @param _dst Destination address to perform the delegatecall\n    * @param _calldata Calldata for the delegatecall\n    */\n    function delegatedFwd(address _dst, bytes _calldata) internal {\n        require(isContract(_dst));\n        uint256 fwdGasLimit = FWD_GAS_LIMIT;\n\n        assembly {\n            let result := delegatecall(sub(gas, fwdGasLimit), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\n            let size := returndatasize\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, size)\n\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\n            // if the call returned error data, forward it\n            switch result case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n}\n"
    },
    "@aragon/os/contracts/common/DepositableStorage.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"./UnstructuredStorage.sol\";\n\n\ncontract DepositableStorage {\n    using UnstructuredStorage for bytes32;\n\n    // keccak256(\"aragonOS.depositableStorage.depositable\")\n    bytes32 internal constant DEPOSITABLE_POSITION = 0x665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea;\n\n    function isDepositable() public view returns (bool) {\n        return DEPOSITABLE_POSITION.getStorageBool();\n    }\n\n    function setDepositable(bool _depositable) internal {\n        DEPOSITABLE_POSITION.setStorageBool(_depositable);\n    }\n}\n"
    },
    "@aragon/os/contracts/factory/DAOFactory.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../kernel/IKernel.sol\";\nimport \"../kernel/Kernel.sol\";\nimport \"../kernel/KernelProxy.sol\";\n\nimport \"../acl/IACL.sol\";\nimport \"../acl/ACL.sol\";\n\nimport \"./EVMScriptRegistryFactory.sol\";\n\n\ncontract DAOFactory {\n    IKernel public baseKernel;\n    IACL public baseACL;\n    EVMScriptRegistryFactory public regFactory;\n\n    event DeployDAO(address dao);\n    event DeployEVMScriptRegistry(address reg);\n\n    /**\n    * @notice Create a new DAOFactory, creating DAOs with Kernels proxied to `_baseKernel`, ACLs proxied to `_baseACL`, and new EVMScriptRegistries created from `_regFactory`.\n    * @param _baseKernel Base Kernel\n    * @param _baseACL Base ACL\n    * @param _regFactory EVMScriptRegistry factory\n    */\n    constructor(IKernel _baseKernel, IACL _baseACL, EVMScriptRegistryFactory _regFactory) public {\n        // No need to init as it cannot be killed by devops199\n        if (address(_regFactory) != address(0)) {\n            regFactory = _regFactory;\n        }\n\n        baseKernel = _baseKernel;\n        baseACL = _baseACL;\n    }\n\n    /**\n    * @notice Create a new DAO with `_root` set as the initial admin\n    * @param _root Address that will be granted control to setup DAO permissions\n    * @return Newly created DAO\n    */\n    function newDAO(address _root) public returns (Kernel) {\n        Kernel dao = Kernel(new KernelProxy(baseKernel));\n\n        if (address(regFactory) == address(0)) {\n            dao.initialize(baseACL, _root);\n        } else {\n            dao.initialize(baseACL, this);\n\n            ACL acl = ACL(dao.acl());\n            bytes32 permRole = acl.CREATE_PERMISSIONS_ROLE();\n            bytes32 appManagerRole = dao.APP_MANAGER_ROLE();\n\n            acl.grantPermission(regFactory, acl, permRole);\n\n            acl.createPermission(regFactory, dao, appManagerRole, this);\n\n            EVMScriptRegistry reg = regFactory.newEVMScriptRegistry(dao);\n            emit DeployEVMScriptRegistry(address(reg));\n\n            // Clean up permissions\n            // First, completely reset the APP_MANAGER_ROLE\n            acl.revokePermission(regFactory, dao, appManagerRole);\n            acl.removePermissionManager(dao, appManagerRole);\n\n            // Then, make root the only holder and manager of CREATE_PERMISSIONS_ROLE\n            acl.revokePermission(regFactory, acl, permRole);\n            acl.revokePermission(this, acl, permRole);\n            acl.grantPermission(_root, acl, permRole);\n            acl.setPermissionManager(_root, acl, permRole);\n        }\n\n        emit DeployDAO(address(dao));\n\n        return dao;\n    }\n}\n"
    },
    "@aragon/os/contracts/kernel/KernelProxy.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"./IKernel.sol\";\nimport \"./KernelConstants.sol\";\nimport \"./KernelStorage.sol\";\nimport \"../common/DepositableDelegateProxy.sol\";\nimport \"../common/IsContract.sol\";\n\n\ncontract KernelProxy is IKernelEvents, KernelStorage, KernelAppIds, KernelNamespaceConstants, IsContract, DepositableDelegateProxy {\n    /**\n    * @dev KernelProxy is a proxy contract to a kernel implementation. The implementation\n    *      can update the reference, which effectively upgrades the contract\n    * @param _kernelImpl Address of the contract used as implementation for kernel\n    */\n    constructor(IKernel _kernelImpl) public {\n        require(isContract(address(_kernelImpl)));\n        apps[KERNEL_CORE_NAMESPACE][KERNEL_CORE_APP_ID] = _kernelImpl;\n\n        // Note that emitting this event is important for verifying that a KernelProxy instance\n        // was never upgraded to a malicious Kernel logic contract over its lifespan.\n        // This starts the \"chain of trust\", that can be followed through later SetApp() events\n        // emitted during kernel upgrades.\n        emit SetApp(KERNEL_CORE_NAMESPACE, KERNEL_CORE_APP_ID, _kernelImpl);\n    }\n\n    /**\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\n     */\n    function proxyType() public pure returns (uint256 proxyTypeId) {\n        return UPGRADEABLE;\n    }\n\n    /**\n    * @dev ERC897, the address the proxy would delegate calls to\n    */\n    function implementation() public view returns (address) {\n        return apps[KERNEL_CORE_NAMESPACE][KERNEL_CORE_APP_ID];\n    }\n}\n"
    },
    "@1hive/apps-agreement/contracts/test/mocks/disputable/AragonAppFeesCashierMock.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"@aragon/os/contracts/common/IsContract.sol\";\n\nimport \"../../../arbitration/IAragonAppFeesCashier.sol\";\n\n\ncontract AragonAppFeesCashierMock is IAragonAppFeesCashier, IsContract {\n    string private constant ERROR_TOKEN_NOT_CONTRACT = \"AAFC_TOKEN_NOT_CONTRACT\";\n    string private constant ERROR_APP_FEE_NOT_SET = \"AAFC_APP_FEE_NOT_SET\";\n    string private constant ERROR_ETH_APP_FEE_NOT_ALLOWED = \"AAFC_ETH_APP_FEE_NOT_ALLOWED\";\n    string private constant ERROR_FEE_TOKEN_DEPOSIT_FAILED = \"AAFC_FEE_TOKEN_DEPOSIT_FAILED\";\n\n    struct AppFee {\n        bool set;\n        ERC20 token;\n        uint256 amount;\n    }\n\n    mapping (bytes32 => AppFee) internal appFees;\n\n    /**\n    * @notice Set fees for app with id `_appId` to `_amount` of `_token` tokens\n    * @param _appId Id of the app\n    * @param _token Token for the fee\n    * @param _amount Amount of fee tokens\n    */\n    function setAppFee(bytes32 _appId, ERC20 _token, uint256 _amount) external {\n        _setAppFee(_appId, _token, _amount);\n    }\n\n    /**\n    * @notice Set fees for multiple apps\n    * @param _appIds List of IDs of the apps\n    * @param _tokens List of tokens for the fees\n    * @param _amounts List of amount of the fee tokens\n    */\n    function setAppFees(bytes32[] _appIds, ERC20[] _tokens, uint256[] _amounts) external {\n        for (uint256 i = 0; i < _appIds.length; i++) {\n            _setAppFee(_appIds[i], _tokens[i], _amounts[i]);\n        }\n    }\n\n    /**\n    * @notice Unset fees for app with id `_appId`\n    * @param _appId Id of the app\n    */\n    function unsetAppFee(bytes32 _appId) external {\n       _unsetAppFee(_appId);\n    }\n\n    /**\n    * @notice Unset fees for multiple apps\n    * @param _appIds List of IDs of the apps\n    */\n    function unsetAppFees(bytes32[] _appIds) external {\n        for (uint256 i = 0; i < _appIds.length; i++) {\n            _unsetAppFee(_appIds[i]);\n        }\n    }\n\n    /**\n    * @notice Pay fees for app with id `_appId`\n    * @param _appId App id paying for\n    * @param _data Optional data input\n    */\n    function payAppFees(bytes32 _appId, bytes _data) external payable {\n        AppFee storage appFee = appFees[_appId];\n        require(appFee.set, ERROR_APP_FEE_NOT_SET);\n        require(msg.value == 0, ERROR_ETH_APP_FEE_NOT_ALLOWED);\n\n        ERC20 token = appFee.token;\n        require(token.transferFrom(msg.sender, address(this), appFee.amount), ERROR_FEE_TOKEN_DEPOSIT_FAILED);\n\n        emit AppFeePaid(msg.sender, _appId, _data);\n    }\n\n    /**\n    * @notice Get fees for any app\n    * @return Token for the fees\n    * @return Amount of fee tokens\n    */\n    function getAppFee(bytes32 _appId) external view returns (ERC20, uint256) {\n        AppFee storage appFee = appFees[_appId];\n        require(appFee.set, ERROR_APP_FEE_NOT_SET);\n        return (appFee.token, appFee.amount);\n    }\n\n    /**\n    * @dev Internal function to set app fees\n    */\n    function _setAppFee(bytes32 _appId, ERC20 _token, uint256 _amount) internal {\n        require(isContract(address(_token)), ERROR_TOKEN_NOT_CONTRACT);\n        AppFee storage appFee = appFees[_appId];\n        appFee.set = true;\n        appFee.token = _token;\n        appFee.amount = _amount;\n    }\n\n    /**\n    * @dev Internal function to unset app fees\n    */\n    function _unsetAppFee(bytes32 _appId) internal {\n        delete appFees[_appId];\n    }\n}\n"
    },
    "@1hive/apps-agreement/contracts/arbitration/IAragonAppFeesCashier.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"@aragon/os/contracts/lib/token/ERC20.sol\";\n\n\n/**\n* @title AragonAppFeesCashier interface\n* @dev This interface is derived from the `IArbitrator`'s subscriptions module.\n*      It is used to pay the fees corresponding to the usage of a disputable app.\n*      This interface was manually-copied from https://github.com/aragon/aragon-court/blob/v1.2.0/contracts/subscriptions/IAragonAppFeesCashier.sol\n*      since we are using different solidity versions.\n*/\ninterface IAragonAppFeesCashier {\n    /**\n    * @dev Emitted when an IAragonAppFeesCashier instance sets a new fee for an app\n    * @param appId App identifier\n    * @param token Token address to be used for the fees\n    * @param amount Fee amount to be charged for the given app\n    */\n    event AppFeeSet(bytes32 indexed appId, ERC20 token, uint256 amount);\n\n    /**\n    * @dev Emitted when an IAragonAppFeesCashier instance unsets an app fee\n    * @param appId App identifier\n    */\n    event AppFeeUnset(bytes32 indexed appId);\n\n    /**\n    * @dev Emitted when an IAragonAppFeesCashier instance receives a payment for an app\n    * @param by Address paying the fees\n    * @param appId App identifier\n    * @param data Optional data\n    */\n    event AppFeePaid(address indexed by, bytes32 appId, bytes data);\n\n    /**\n    * @dev Set the fee amount and token to be used for an app\n    * @param _appId App identifier\n    * @param _token Token address to be used for the fees\n    * @param _amount Fee amount to be charged for the given app\n    */\n    function setAppFee(bytes32 _appId, ERC20 _token, uint256 _amount) external;\n\n    /**\n    * @dev Set the fee amount and token to be used for a list of apps\n    * @param _appIds List of app identifiers\n    * @param _tokens List of token addresses to be used for the fees for each app\n    * @param _amounts List of fee amounts to be charged for each app\n    */\n    function setAppFees(bytes32[] _appIds, ERC20[] _tokens, uint256[] _amounts) external;\n\n    /**\n    * @dev Remove the fee set for an app\n    * @param _appId App identifier\n    */\n    function unsetAppFee(bytes32 _appId) external;\n\n    /**\n    * @dev Remove the fee set for a list of apps\n    * @param _appIds List of app identifiers\n    */\n    function unsetAppFees(bytes32[] _appIds) external;\n\n    /**\n    * @dev Pay the fees corresponding to an app\n    * @param _appId App identifier\n    * @param _data Optional data input\n    */\n    function payAppFees(bytes32 _appId, bytes _data) external payable;\n\n    /**\n    * @dev Tell the fee token and amount set for a given app\n    * @param _appId Identifier of the app being queried\n    * @return token Fee token address set for the requested app\n    * @return amount Fee token amount set for the requested app\n    */\n    function getAppFee(bytes32 _appId) external view returns (ERC20 token, uint256 amount);\n}\n"
    },
    "@1hive/apps-agreement/contracts/test/mocks/disputable/ArbitratorMock.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"@aragon/os/contracts/lib/token/ERC20.sol\";\n\nimport \"./AragonAppFeesCashierMock.sol\";\nimport \"../../../arbitration/IArbitrable.sol\";\nimport \"../../../arbitration/IArbitrator.sol\";\nimport \"../../../arbitration/IAragonAppFeesCashier.sol\";\n\ncontract ArbitratorMock is IArbitrator {\n    string internal constant ERROR_DISPUTE_NOT_RULED_YET = \"ARBITRATOR_DISPUTE_NOT_RULED_YET\";\n    string internal constant ERROR_SUBMITTER_NOT_ARBITRABLE = \"ARBITRATOR_SUBMITTER_NOT_ARBITRABLE\";\n    string internal constant ERROR_CLOSE_EVIDENCE_PERIOD_FAILED = \"ARBITRATOR_CLOSE_EVIDENCE_PERIOD_FAILED\";\n    string internal constant ERROR_DISPUTE_EVIDENCE_PERIOD_ALREADY_CLOSED = \"ARBITRATOR_DISPUTE_EVIDENCE_PERIOD_ALREADY_CLOSED\";\n\n    struct Dispute {\n        IArbitrable arbitrable;\n        bool evidencePeriodClosed;\n        uint256 ruling;\n    }\n\n    struct Fee {\n        ERC20 token;\n        uint256 amount;\n    }\n\n    Fee public fee;\n    IAragonAppFeesCashier public appFeesCashier;\n    bool public closeEvidencePeriodFail;\n\n    uint256 public disputesLength;\n    mapping (uint256 => Dispute) public disputes;\n\n    event NewDispute(uint256 disputeId, uint256 possibleRulings, bytes metadata);\n    event EvidenceSubmitted(uint256 indexed disputeId, address indexed submitter, bytes evidence);\n    event EvidencePeriodClosed(uint256 indexed disputeId);\n\n    constructor(ERC20 _feeToken, uint256 _feeAmount) public {\n        fee.token = _feeToken;\n        fee.amount = _feeAmount;\n        disputesLength++;\n        appFeesCashier = new AragonAppFeesCashierMock();\n    }\n\n    function createDispute(uint256 _possibleRulings, bytes _metadata) external returns (uint256) {\n        uint256 disputeId = disputesLength++;\n        disputes[disputeId].arbitrable = IArbitrable(msg.sender);\n\n        fee.token.transferFrom(msg.sender, address(this), fee.amount);\n        emit NewDispute(disputeId, _possibleRulings, _metadata);\n        return disputeId;\n    }\n\n    function submitEvidence(uint256 _disputeId, address _submitter, bytes _evidence) external {\n        Dispute storage dispute = disputes[_disputeId];\n        require(dispute.arbitrable == msg.sender, ERROR_SUBMITTER_NOT_ARBITRABLE);\n        emit EvidenceSubmitted(_disputeId, _submitter, _evidence);\n    }\n\n    function closeEvidencePeriod(uint256 _disputeId) external {\n        require(!closeEvidencePeriodFail, ERROR_CLOSE_EVIDENCE_PERIOD_FAILED);\n\n        Dispute storage dispute = disputes[_disputeId];\n        require(!dispute.evidencePeriodClosed, ERROR_DISPUTE_EVIDENCE_PERIOD_ALREADY_CLOSED);\n\n        dispute.evidencePeriodClosed = true;\n        emit EvidencePeriodClosed(_disputeId);\n    }\n\n    function rule(uint256 _disputeId) external returns (address subject, uint256 ruling) {\n        Dispute storage dispute = disputes[_disputeId];\n        require(dispute.ruling != 0, ERROR_DISPUTE_NOT_RULED_YET);\n        return (dispute.arbitrable, dispute.ruling);\n    }\n\n    function setRuling(uint256 _disputeId, uint8 _ruling) external {\n        Dispute storage dispute = disputes[_disputeId];\n        dispute.ruling = _ruling;\n    }\n\n    function setFees(ERC20 _feeToken, uint256 _feeAmount) external {\n        fee.token = _feeToken;\n        fee.amount = _feeAmount;\n    }\n\n    function setAppFeesCashier(IAragonAppFeesCashier _newAppFeesCashier) external {\n        appFeesCashier = _newAppFeesCashier;\n    }\n\n    function setCloseEvidencePeriodFailure(bool _fail) external {\n        closeEvidencePeriodFail = _fail;\n    }\n\n    function getDisputeFees() public view returns (address recipient, ERC20 feeToken, uint256 feeAmount) {\n        return (address(this), fee.token, fee.amount);\n    }\n\n    function getSubscriptionFees(address) external view returns (address recipient, ERC20 feeToken, uint256 feeAmount) {\n        return (address(appFeesCashier), fee.token, 0);\n    }\n}\n"
    },
    "@1hive/apps-agreement/contracts/arbitration/IArbitrable.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"./IArbitrator.sol\";\n\n\n/**\n* @title Arbitrable interface\n* @dev This interface is implemented by `Agreement` so it can be used to submit disputes to an `IArbitrator`.\n*      This interface was manually-copied from https://github.com/aragon/aragon-court/blob/v1.2.0/contracts/arbitration/IArbitrable.sol\n*      since we are using different solidity versions.\n*/\ncontract IArbitrable {\n    /**\n    * @dev Emitted when an IArbitrable instance's dispute is ruled by an IArbitrator\n    * @param arbitrator IArbitrator instance ruling the dispute\n    * @param disputeId Identifier of the dispute being ruled by the arbitrator\n    * @param ruling Ruling given by the arbitrator\n    */\n    event Ruled(IArbitrator indexed arbitrator, uint256 indexed disputeId, uint256 ruling);\n}\n"
    },
    "@1hive/apps-agreement/contracts/arbitration/IArbitrator.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"@aragon/os/contracts/lib/token/ERC20.sol\";\n\n\n/**\n* @title Arbitrator interface\n* @dev This interface is the one used by `Agreement` as its dispute resolution protocol.\n*      This interface was manually-copied from https://github.com/aragon/aragon-court/blob/v1.2.0/contracts/arbitration/IArbitrator.sol\n*      since we are using different solidity versions.\n*/\ninterface IArbitrator {\n    /**\n    * @dev Create a dispute over the Arbitrable sender with a number of possible rulings\n    * @param _possibleRulings Number of possible rulings allowed for the dispute\n    * @param _metadata Optional metadata that can be used to provide additional information on the dispute to be created\n    * @return Dispute identification number\n    */\n    function createDispute(uint256 _possibleRulings, bytes _metadata) external returns (uint256);\n\n    /**\n    * @dev Submit evidence for a dispute\n    * @param _disputeId Id of the dispute in the Protocol\n    * @param _submitter Address of the account submitting the evidence\n    * @param _evidence Data submitted for the evidence related to the dispute\n    */\n    function submitEvidence(uint256 _disputeId, address _submitter, bytes _evidence) external;\n\n    /**\n    * @dev Close the evidence period of a dispute\n    * @param _disputeId Identification number of the dispute to close its evidence submitting period\n    */\n    function closeEvidencePeriod(uint256 _disputeId) external;\n\n    /**\n    * @notice Rule dispute #`_disputeId` if ready\n    * @param _disputeId Identification number of the dispute to be ruled\n    * @return subject Arbitrable instance associated to the dispute\n    * @return ruling Ruling number computed for the given dispute\n    */\n    function rule(uint256 _disputeId) external returns (address subject, uint256 ruling);\n\n    /**\n    * @dev Tell the dispute fees information to create a dispute\n    * @return recipient Address where the corresponding dispute fees must be transferred to\n    * @return feeToken ERC20 token used for the fees\n    * @return feeAmount Total amount of fees that must be allowed to the recipient\n    */\n    function getDisputeFees() external view returns (address recipient, ERC20 feeToken, uint256 feeAmount);\n\n    /**\n    * @dev Tell the subscription fees information for a subscriber to be up-to-date\n    * @param _subscriber Address of the account paying the subscription fees for\n    * @return recipient Address where the corresponding subscriptions fees must be transferred to\n    * @return feeToken ERC20 token used for the subscription fees\n    * @return feeAmount Total amount of fees that must be allowed to the recipient\n    */\n    function getSubscriptionFees(address _subscriber) external view returns (address recipient, ERC20 feeToken, uint256 feeAmount);\n}\n"
    },
    "contracts/test/VaultMock.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"@aragon/os/contracts/lib/token/ERC20.sol\";\n\ncontract VaultMock {\n\n    function transfer(address _token, address _to, uint256 _value) external {\n        require(_value > 0, \"transfer zero value error\");\n\n        if (_token == address(0)) {\n            // solium-disable-next-line security/no-send\n            require(_to.send(_value), \"send reverted\");\n        } else {\n            require(ERC20(_token).transfer(_to, _value), \"token transfer reverted\");\n        }\n    }\n\n    function balance(address _token) public view returns (uint256) {\n        if (_token == address(0)) {\n            return address(this).balance;\n        } else {\n            return ERC20(_token).balanceOf(address(this));\n        }\n    }\n}"
    },
    "@aragon/apps-vault/contracts/Vault.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"@aragon/os/contracts/apps/AragonApp.sol\";\nimport \"@aragon/os/contracts/common/DepositableStorage.sol\";\nimport \"@aragon/os/contracts/common/EtherTokenConstant.sol\";\nimport \"@aragon/os/contracts/common/SafeERC20.sol\";\nimport \"@aragon/os/contracts/lib/token/ERC20.sol\";\n\n\ncontract Vault is EtherTokenConstant, AragonApp, DepositableStorage {\n    using SafeERC20 for ERC20;\n\n    bytes32 public constant TRANSFER_ROLE = keccak256(\"TRANSFER_ROLE\");\n\n    string private constant ERROR_DATA_NON_ZERO = \"VAULT_DATA_NON_ZERO\";\n    string private constant ERROR_NOT_DEPOSITABLE = \"VAULT_NOT_DEPOSITABLE\";\n    string private constant ERROR_DEPOSIT_VALUE_ZERO = \"VAULT_DEPOSIT_VALUE_ZERO\";\n    string private constant ERROR_TRANSFER_VALUE_ZERO = \"VAULT_TRANSFER_VALUE_ZERO\";\n    string private constant ERROR_SEND_REVERTED = \"VAULT_SEND_REVERTED\";\n    string private constant ERROR_VALUE_MISMATCH = \"VAULT_VALUE_MISMATCH\";\n    string private constant ERROR_TOKEN_TRANSFER_FROM_REVERTED = \"VAULT_TOKEN_TRANSFER_FROM_REVERT\";\n    string private constant ERROR_TOKEN_TRANSFER_REVERTED = \"VAULT_TOKEN_TRANSFER_REVERTED\";\n\n    event VaultTransfer(address indexed token, address indexed to, uint256 amount);\n    event VaultDeposit(address indexed token, address indexed sender, uint256 amount);\n\n    /**\n    * @dev On a normal send() or transfer() this fallback is never executed as it will be\n    *      intercepted by the Proxy (see aragonOS#281)\n    */\n    function () external payable isInitialized {\n        require(msg.data.length == 0, ERROR_DATA_NON_ZERO);\n        _deposit(ETH, msg.value);\n    }\n\n    /**\n    * @notice Initialize Vault app\n    * @dev As an AragonApp it needs to be initialized in order for roles (`auth` and `authP`) to work\n    */\n    function initialize() external onlyInit {\n        initialized();\n        setDepositable(true);\n    }\n\n    /**\n    * @notice Deposit `_value` `_token` to the vault\n    * @param _token Address of the token being transferred\n    * @param _value Amount of tokens being transferred\n    */\n    function deposit(address _token, uint256 _value) external payable isInitialized {\n        _deposit(_token, _value);\n    }\n\n    /**\n    * @notice Transfer `_value` `_token` from the Vault to `_to`\n    * @param _token Address of the token being transferred\n    * @param _to Address of the recipient of tokens\n    * @param _value Amount of tokens being transferred\n    */\n    /* solium-disable-next-line function-order */\n    function transfer(address _token, address _to, uint256 _value)\n        external\n        authP(TRANSFER_ROLE, arr(_token, _to, _value))\n    {\n        require(_value > 0, ERROR_TRANSFER_VALUE_ZERO);\n\n        if (_token == ETH) {\n            require(_to.send(_value), ERROR_SEND_REVERTED);\n        } else {\n            require(ERC20(_token).safeTransfer(_to, _value), ERROR_TOKEN_TRANSFER_REVERTED);\n        }\n\n        emit VaultTransfer(_token, _to, _value);\n    }\n\n    function balance(address _token) public view returns (uint256) {\n        if (_token == ETH) {\n            return address(this).balance;\n        } else {\n            return ERC20(_token).staticBalanceOf(address(this));\n        }\n    }\n\n    /**\n    * @dev Disable recovery escape hatch, as it could be used\n    *      maliciously to transfer funds away from the vault\n    */\n    function allowRecoverability(address) public view returns (bool) {\n        return false;\n    }\n\n    function _deposit(address _token, uint256 _value) internal {\n        require(isDepositable(), ERROR_NOT_DEPOSITABLE);\n        require(_value > 0, ERROR_DEPOSIT_VALUE_ZERO);\n\n        if (_token == ETH) {\n            // Deposit is implicit in this case\n            require(msg.value == _value, ERROR_VALUE_MISMATCH);\n        } else {\n            require(\n                ERC20(_token).safeTransferFrom(msg.sender, address(this), _value),\n                ERROR_TOKEN_TRANSFER_FROM_REVERTED\n            );\n        }\n\n        emit VaultDeposit(_token, msg.sender, _value);\n    }\n}\n"
    },
    "@1hive/apps-agreement/contracts/Agreement.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    GPL-3.0-or-later\n */\n\npragma solidity 0.4.24;\n\nimport \"@aragon/os/contracts/acl/IACLOracle.sol\";\nimport \"@aragon/os/contracts/apps/AragonApp.sol\";\nimport \"@aragon/os/contracts/apps/disputable/IAgreement.sol\";\nimport \"@aragon/os/contracts/apps/disputable/DisputableAragonApp.sol\";\nimport \"@aragon/os/contracts/common/ConversionHelpers.sol\";\nimport \"@aragon/os/contracts/common/SafeERC20.sol\";\nimport \"@aragon/os/contracts/lib/math/SafeMath.sol\";\nimport \"@aragon/os/contracts/lib/math/SafeMath64.sol\";\nimport \"@aragon/os/contracts/lib/token/ERC20.sol\";\n\nimport \"@aragon/staking/interfaces/0.4/IStaking.sol\";\nimport \"@aragon/staking/interfaces/0.4/IStakingFactory.sol\";\nimport \"@aragon/staking/interfaces/0.4/ILockManager.sol\";\n\nimport \"./arbitration/IArbitrable.sol\";\nimport \"./arbitration/IAragonAppFeesCashier.sol\";\n\n\ncontract Agreement is IArbitrable, ILockManager, IAgreement, IACLOracle, AragonApp {\n    using SafeMath for uint256;\n    using SafeMath64 for uint64;\n    using SafeERC20 for ERC20;\n\n    /* Arbitrator outcomes constants */\n    uint256 internal constant DISPUTES_POSSIBLE_OUTCOMES = 2;\n    // Note that Aragon Court treats the possible outcomes as arbitrary numbers, leaving the Arbitrable (us) to define how to understand them.\n    // Some outcomes [0, 1, and 2] are reserved by Aragon Court: \"missing\", \"leaked\", and \"refused\", respectively.\n    // This Arbitrable introduces the concept of the challenger/submitter (a binary outcome) as 3/4.\n    // Note that Aragon Court emits the lowest outcome in the event of a tie, and so for us, we prefer the challenger.\n    uint256 internal constant DISPUTES_RULING_CHALLENGER = 3;\n    uint256 internal constant DISPUTES_RULING_SUBMITTER = 4;\n\n    /* Validation errors */\n    string internal constant ERROR_SENDER_NOT_ALLOWED = \"AGR_SENDER_NOT_ALLOWED\";\n    string internal constant ERROR_SIGNER_MUST_SIGN = \"AGR_SIGNER_MUST_SIGN\";\n    string internal constant ERROR_SIGNER_ALREADY_SIGNED = \"AGR_SIGNER_ALREADY_SIGNED\";\n    string internal constant ERROR_INVALID_SIGNING_SETTING = \"AGR_INVALID_SIGNING_SETTING\";\n    string internal constant ERROR_INVALID_SETTLEMENT_OFFER = \"AGR_INVALID_SETTLEMENT_OFFER\";\n    string internal constant ERROR_ACTION_DOES_NOT_EXIST = \"AGR_ACTION_DOES_NOT_EXIST\";\n    string internal constant ERROR_CHALLENGE_DOES_NOT_EXIST = \"AGR_CHALLENGE_DOES_NOT_EXIST\";\n    string internal constant ERROR_TOKEN_DEPOSIT_FAILED = \"AGR_TOKEN_DEPOSIT_FAILED\";\n    string internal constant ERROR_TOKEN_TRANSFER_FAILED = \"AGR_TOKEN_TRANSFER_FAILED\";\n    string internal constant ERROR_TOKEN_APPROVAL_FAILED = \"AGR_TOKEN_APPROVAL_FAILED\";\n    string internal constant ERROR_TOKEN_NOT_CONTRACT = \"AGR_TOKEN_NOT_CONTRACT\";\n    string internal constant ERROR_SETTING_DOES_NOT_EXIST = \"AGR_SETTING_DOES_NOT_EXIST\";\n    string internal constant ERROR_ARBITRATOR_NOT_CONTRACT = \"AGR_ARBITRATOR_NOT_CONTRACT\";\n    string internal constant ERROR_STAKING_FACTORY_NOT_CONTRACT = \"AGR_STAKING_FACTORY_NOT_CONTRACT\";\n    string internal constant ERROR_ACL_ORACLE_SIGNER_MISSING = \"AGR_ACL_ORACLE_SIGNER_MISSING\";\n    string internal constant ERROR_ACL_ORACLE_SIGNER_NOT_ADDRESS = \"AGR_ACL_ORACLE_SIGNER_NOT_ADDR\";\n\n    /* Disputable related errors */\n    string internal constant ERROR_SENDER_CANNOT_CHALLENGE_ACTION = \"AGR_SENDER_CANT_CHALLENGE_ACTION\";\n    string internal constant ERROR_DISPUTABLE_NOT_CONTRACT = \"AGR_DISPUTABLE_NOT_CONTRACT\";\n    string internal constant ERROR_DISPUTABLE_NOT_ACTIVE = \"AGR_DISPUTABLE_NOT_ACTIVE\";\n    string internal constant ERROR_DISPUTABLE_ALREADY_ACTIVE = \"AGR_DISPUTABLE_ALREADY_ACTIVE\";\n    string internal constant ERROR_COLLATERAL_REQUIREMENT_DOES_NOT_EXIST = \"AGR_COL_REQ_DOES_NOT_EXIST\";\n\n    /* Action related errors */\n    string internal constant ERROR_CANNOT_CHALLENGE_ACTION = \"AGR_CANNOT_CHALLENGE_ACTION\";\n    string internal constant ERROR_CANNOT_CLOSE_ACTION = \"AGR_CANNOT_CLOSE_ACTION\";\n    string internal constant ERROR_CANNOT_SETTLE_ACTION = \"AGR_CANNOT_SETTLE_ACTION\";\n    string internal constant ERROR_CANNOT_DISPUTE_ACTION = \"AGR_CANNOT_DISPUTE_ACTION\";\n    string internal constant ERROR_CANNOT_RULE_ACTION = \"AGR_CANNOT_RULE_ACTION\";\n    string internal constant ERROR_CANNOT_SUBMIT_EVIDENCE = \"AGR_CANNOT_SUBMIT_EVIDENCE\";\n    string internal constant ERROR_CANNOT_CLOSE_EVIDENCE_PERIOD = \"AGR_CANNOT_CLOSE_EVIDENCE_PERIOD\";\n\n    // This role will be checked against the Disputable app when users try to challenge actions.\n    // It is expected to be configured per Disputable app. For reference, see `canPerformChallenge()`.\n    // bytes32 public constant CHALLENGE_ROLE = keccak256(\"CHALLENGE_ROLE\");\n    bytes32 public constant CHALLENGE_ROLE = 0xef025787d7cd1a96d9014b8dc7b44899b8c1350859fb9e1e05f5a546dd65158d;\n\n    // bytes32 public constant CHANGE_AGREEMENT_ROLE = keccak256(\"CHANGE_AGREEMENT_ROLE\");\n    bytes32 public constant CHANGE_AGREEMENT_ROLE = 0x07813bca4905795fa22783885acd0167950db28f2d7a40b70f666f429e19f1d9;\n\n    // bytes32 public constant MANAGE_DISPUTABLE_ROLE = keccak256(\"MANAGE_DISPUTABLE_ROLE\");\n    bytes32 public constant MANAGE_DISPUTABLE_ROLE = 0x2309a8cbbd5c3f18649f3b7ac47a0e7b99756c2ac146dda1ffc80d3f80827be6;\n\n    event Signed(address indexed signer, uint256 settingId);\n    event SettingChanged(uint256 settingId);\n    event AppFeesCashierSynced(IAragonAppFeesCashier newAppFeesCashier);\n    event DisputableAppActivated(address indexed disputable);\n    event DisputableAppDeactivated(address indexed disputable);\n    event CollateralRequirementChanged(address indexed disputable, uint256 collateralRequirementId);\n\n    struct Setting {\n        IArbitrator arbitrator;\n        IAragonAppFeesCashier aragonAppFeesCashier; // Fees cashier to deposit action fees (linked to the selected arbitrator)\n        string title;\n        bytes content;\n    }\n\n    struct CollateralRequirement {\n        ERC20 token;                        // ERC20 token to be used for collateral\n        uint64 challengeDuration;           // Challenge duration, during which the submitter can raise a dispute\n        uint256 actionAmount;               // Amount of collateral token to be locked from the submitter's staking pool when creating actions\n        uint256 challengeAmount;            // Amount of collateral token to be locked from the challenger's own balance when challenging actions\n        IStaking staking;                   // Staking pool cache for the collateral token -- will never change\n    }\n\n    struct DisputableInfo {\n        bool activated;                                                     // Whether the Disputable app is active\n        uint256 nextCollateralRequirementsId;                               // Identification number of the next collateral requirement\n        mapping (uint256 => CollateralRequirement) collateralRequirements;  // List of collateral requirements indexed by ID\n    }\n\n    struct Action {\n        DisputableAragonApp disputable;     // Disputable app that created the action\n        uint256 disputableActionId;         // Identification number of the action on the Disputable app\n        uint256 collateralRequirementId;    // Identification number of the collateral requirement applicable to the action\n        uint256 settingId;                  // Identification number of the agreement setting applicable to the action\n        address submitter;                  // Address that submitted the action\n        bool closed;                        // Whether the action is closed (and cannot be challenged anymore)\n        bytes context;                      // Link to a human-readable context for the given action\n        uint256 lastChallengeId;            // Identification number of the action's most recent challenge, if any\n    }\n\n    struct ArbitratorFees {\n        ERC20 token;                        // ERC20 token used for the arbitration fees\n        uint256 amount;                     // Amount of arbitration fees\n    }\n\n    struct Challenge {\n        uint256 actionId;                        // Identification number of the action associated to the challenge\n        address challenger;                      // Address that challenged the action\n        uint64 endDate;                          // Last date the submitter can raise a dispute against the challenge\n        bytes context;                           // Link to a human-readable context for the challenge\n        uint256 settlementOffer;                 // Amount of collateral tokens the challenger would accept without involving the arbitrator\n        ArbitratorFees challengerArbitratorFees; // Arbitration fees paid by the challenger (in advance)\n        ArbitratorFees submitterArbitratorFees;  // Arbitration fees paid by the submitter (on dispute creation)\n        ChallengeState state;                    // Current state of the challenge\n        bool submitterFinishedEvidence;          // Whether the action submitter has finished submitting evidence for the raised dispute\n        bool challengerFinishedEvidence;         // Whether the action challenger has finished submitting evidence for the raised dispute\n        uint256 disputeId;                       // Identification number of the dispute on the arbitrator\n        uint256 ruling;                          // Ruling given from the arbitrator for the dispute\n    }\n\n    IStakingFactory public stakingFactory;                           // Staking factory, for finding each collateral token's staking pool\n\n    uint256 private nextSettingId;\n    mapping (uint256 => Setting) private settings;                  // List of historic agreement settings indexed by ID (starting at 1)\n    mapping (address => uint256) private lastSettingSignedBy;       // Mapping of address => last agreement setting signed\n    mapping (address => DisputableInfo) private disputableInfos;    // Mapping of Disputable app => disputable infos\n\n    uint256 private nextActionId;\n    mapping (uint256 => Action) private actions;                    // List of actions indexed by ID (starting at 1)\n\n    uint256 private nextChallengeId;\n    mapping (uint256 => Challenge) private challenges;              // List of challenges indexed by ID (starting at 1)\n    mapping (uint256 => uint256) private challengeByDispute;        // Mapping of arbitrator's dispute ID => challenge ID\n\n    /**\n    * @notice Initialize Agreement for \"`_title`\" and content \"`_content`\", with arbitrator `_arbitrator` and staking factory `_factory`\n    * @param _arbitrator Address of the IArbitrator that will be used to resolve disputes\n    * @param _setAppFeesCashier Whether to integrate with the IArbitrator's fee cashier\n    * @param _title String indicating a short description\n    * @param _content Link to a human-readable text that describes the initial rules for the Agreement\n    * @param _stakingFactory Staking factory for finding each collateral token's staking pool\n    */\n    function initialize(\n        IArbitrator _arbitrator,\n        bool _setAppFeesCashier,\n        string _title,\n        bytes _content,\n        IStakingFactory _stakingFactory\n    )\n        external\n    {\n        initialized();\n        require(isContract(address(_stakingFactory)), ERROR_STAKING_FACTORY_NOT_CONTRACT);\n\n        stakingFactory = _stakingFactory;\n\n        nextSettingId = 1;   // Agreement setting ID zero is considered the null agreement setting for further validations\n        nextActionId = 1;    // Action ID zero is considered the null action for further validations\n        nextChallengeId = 1; // Challenge ID zero is considered the null challenge for further validations\n        _newSetting(_arbitrator, _setAppFeesCashier, _title, _content);\n    }\n\n    /**\n    * @notice Update Agreement to title \"`_title`\" and content \"`_content`\", with arbitrator `_arbitrator`\n    * @dev Initialization check is implicitly provided by the `auth()` modifier\n    * @param _arbitrator Address of the IArbitrator that will be used to resolve disputes\n    * @param _setAppFeesCashier Whether to integrate with the IArbitrator's fee cashier\n    * @param _title String indicating a short description\n    * @param _content Link to a human-readable text that describes the new rules for the Agreement\n    */\n    function changeSetting(\n        IArbitrator _arbitrator,\n        bool _setAppFeesCashier,\n        string _title,\n        bytes _content\n    )\n        external\n        auth(CHANGE_AGREEMENT_ROLE)\n    {\n        _newSetting(_arbitrator, _setAppFeesCashier, _title, _content);\n    }\n\n    /**\n    * @notice Sync app fees cashier address\n    * @dev The app fees cashier address is being cached in the contract to save gas.\n    *      This can be called permission-lessly to allow any account to re-sync the cashier when changed by the arbitrator.\n    *      Initialization check is implicitly provided by `_getSetting()`, as valid settings can only be created after initialization.\n    */\n    function syncAppFeesCashier() external {\n        Setting storage setting = _getSetting(_getCurrentSettingId());\n        IAragonAppFeesCashier newAppFeesCashier = _getArbitratorFeesCashier(setting.arbitrator);\n        IAragonAppFeesCashier currentAppFeesCashier = setting.aragonAppFeesCashier;\n\n        // Sync the app fees cashier only if there was one set before and it's different from the arbitrator's current one\n        if (currentAppFeesCashier != IAragonAppFeesCashier(0) && currentAppFeesCashier != newAppFeesCashier) {\n            setting.aragonAppFeesCashier = newAppFeesCashier;\n            emit AppFeesCashierSynced(newAppFeesCashier);\n        }\n    }\n\n    /**\n    * @notice Activate Disputable app `_disputableAddress`\n    * @dev Initialization check is implicitly provided by the `auth()` modifier\n    * @param _disputableAddress Address of the Disputable app\n    * @param _collateralToken Address of the ERC20 token to be used for collateral\n    * @param _actionAmount Amount of collateral tokens that will be locked every time an action is submitted\n    * @param _challengeAmount Amount of collateral tokens that will be locked every time an action is challenged\n    * @param _challengeDuration Challenge duration, during which the submitter can raise a dispute\n    */\n    function activate(\n        address _disputableAddress,\n        ERC20 _collateralToken,\n        uint64 _challengeDuration,\n        uint256 _actionAmount,\n        uint256 _challengeAmount\n    )\n        external\n        auth(MANAGE_DISPUTABLE_ROLE)\n    {\n        require(isContract(_disputableAddress), ERROR_DISPUTABLE_NOT_CONTRACT);\n\n        DisputableInfo storage disputableInfo = disputableInfos[_disputableAddress];\n        _ensureInactiveDisputable(disputableInfo);\n\n        DisputableAragonApp disputable = DisputableAragonApp(_disputableAddress);\n        disputableInfo.activated = true;\n\n        // If the disputable app is being activated for the first time, then we need to set-up its initial collateral\n        // requirement and set its Agreement reference to here.\n        if (disputable.getAgreement() != IAgreement(this)) {\n            disputable.setAgreement(IAgreement(this));\n            uint256 nextId = disputableInfo.nextCollateralRequirementsId;\n            disputableInfo.nextCollateralRequirementsId = nextId > 0 ? nextId : 1;\n        }\n        _changeCollateralRequirement(disputable, disputableInfo, _collateralToken, _challengeDuration, _actionAmount, _challengeAmount);\n\n        emit DisputableAppActivated(disputable);\n    }\n\n    /**\n    * @notice Deactivate Disputable app `_disputable`\n    * @dev Initialization check is implicitly provided by the `auth()` modifier\n    * @param _disputableAddress Address of the Disputable app to be deactivated\n    */\n    function deactivate(address _disputableAddress) external auth(MANAGE_DISPUTABLE_ROLE) {\n        DisputableInfo storage disputableInfo = disputableInfos[_disputableAddress];\n        _ensureActiveDisputable(disputableInfo);\n\n        disputableInfo.activated = false;\n        emit DisputableAppDeactivated(_disputableAddress);\n    }\n\n    /**\n    * @notice Change `_disputable`'s collateral requirements\n    * @dev Initialization check is implicitly provided by the `auth()` modifier\n    * @param _disputable Address of the Disputable app\n    * @param _collateralToken Address of the ERC20 token to be used for collateral\n    * @param _actionAmount Amount of collateral tokens that will be locked every time an action is submitted\n    * @param _challengeAmount Amount of collateral tokens that will be locked every time an action is challenged\n    * @param _challengeDuration Challenge duration, during which the submitter can raise a dispute\n    */\n    function changeCollateralRequirement(\n        DisputableAragonApp _disputable,\n        ERC20 _collateralToken,\n        uint64 _challengeDuration,\n        uint256 _actionAmount,\n        uint256 _challengeAmount\n    )\n        external\n        auth(MANAGE_DISPUTABLE_ROLE)\n    {\n        DisputableInfo storage disputableInfo = disputableInfos[address(_disputable)];\n        _ensureActiveDisputable(disputableInfo);\n\n        _changeCollateralRequirement(_disputable, disputableInfo, _collateralToken, _challengeDuration, _actionAmount, _challengeAmount);\n    }\n\n    /**\n    * @notice Sign the agreement up-to setting #`_settingId`\n    * @dev Callable by any account; only accounts that have signed the latest version of the agreement can submit new disputable actions.\n    *      Initialization check is implicitly provided by `_settingId < nextSettingId`, as valid settings can only be created after initialization.\n    * @param _settingId Last setting ID the user is agreeing with\n    */\n    function sign(uint256 _settingId) external {\n        uint256 lastSettingIdSigned = lastSettingSignedBy[msg.sender];\n        require(lastSettingIdSigned < _settingId, ERROR_SIGNER_ALREADY_SIGNED);\n        require(_settingId < nextSettingId, ERROR_INVALID_SIGNING_SETTING);\n\n        lastSettingSignedBy[msg.sender] = _settingId;\n        emit Signed(msg.sender, _settingId);\n    }\n\n    /**\n    * @notice Register action #`_disputableActionId` from disputable `msg.sender` for submitter `_submitter` with context `_context`\n    * @dev This function should be called from the Disputable app each time a new disputable action is created.\n    *      Each disputable action ID must only be registered once; this is how the Agreement gets notified about each disputable action.\n    *      Initialization check is implicitly provided by `_ensureActiveDisputable()` as Disputable apps can only be activated\n    *      via `activate()` which already requires initialization.\n    *      IMPORTANT: Note the responsibility of the Disputable app in terms of providing the correct `_submitter` parameter.\n    *      Users are required to trust that all Disputable apps activated with this Agreement have implemented this correctly, as\n    *      otherwise funds could be maliciously locked from the incorrect account on new actions.\n    * @param _disputableActionId Identification number of the action on the Disputable app\n    * @param _context Link to a human-readable context for the given action\n    * @param _submitter Address that submitted the action\n    * @return Unique identification number for the created action on the Agreement\n    */\n    function newAction(uint256 _disputableActionId, bytes _context, address _submitter) external returns (uint256) {\n        DisputableInfo storage disputableInfo = disputableInfos[msg.sender];\n        _ensureActiveDisputable(disputableInfo);\n\n        uint256 currentSettingId = _getCurrentSettingId();\n        uint256 lastSettingIdSigned = lastSettingSignedBy[_submitter];\n        require(lastSettingIdSigned == currentSettingId, ERROR_SIGNER_MUST_SIGN);\n\n        // An initial collateral requirement is created when disputable apps are activated, thus length is always greater than 0\n        uint256 currentCollateralRequirementId = disputableInfo.nextCollateralRequirementsId - 1;\n        CollateralRequirement storage requirement = _getCollateralRequirement(disputableInfo, currentCollateralRequirementId);\n        _lockBalance(requirement.staking, _submitter, requirement.actionAmount);\n\n        // Create new action\n        uint256 id = nextActionId++;\n        Action storage action = actions[id];\n\n        // Pay action submission fees\n        Setting storage setting = _getSetting(currentSettingId);\n        DisputableAragonApp disputable = DisputableAragonApp(msg.sender);\n        _payAppFees(setting, disputable, _submitter, id);\n\n        action.disputable = disputable;\n        action.disputableActionId = _disputableActionId;\n        action.collateralRequirementId = currentCollateralRequirementId;\n        action.settingId = currentSettingId;\n        action.submitter = _submitter;\n        action.context = _context;\n\n        emit ActionSubmitted(id, msg.sender);\n        return id;\n    }\n\n    /**\n    * @notice Close action #`_actionId`\n    * @dev This function closes actions that:\n    *      - Are not currently challenged nor disputed, or\n    *      - Were previously disputed but ruled in favour of the submitter or voided\n    *      Disputable apps may call this method directly at the end of an action, but is also accessible in a permission-less manner\n    *      in case the app does not close its own actions automatically (e.g. disputable votes that don't pass).\n    *      Can be called multiple times; it does nothing if the action is already closed.\n    *      Initialization check is implicitly provided by `_getAction()` as disputable actions can only be created via `newAction()`.\n    * @param _actionId Identification number of the action to be closed\n    */\n    function closeAction(uint256 _actionId) external {\n        Action storage action = _getAction(_actionId);\n        if (action.closed) {\n            return;\n        }\n\n        require(_canClose(action), ERROR_CANNOT_CLOSE_ACTION);\n        (, CollateralRequirement storage requirement) = _getDisputableInfoFor(action);\n        _unlockBalance(requirement.staking, action.submitter, requirement.actionAmount);\n        _unsafeCloseAction(_actionId, action);\n    }\n\n    /**\n    * @notice Challenge action #`_actionId`\n    * @dev This is only callable by those who hold the CHALLENGE_ROLE on the related Disputable app.\n    *      Can be called multiple times per action, until a challenge is successful (settled or ruled for challenger).\n    *      Initialization check is implicitly provided by `_getAction()` as disputable actions can only be created via `newAction()`.\n    * @param _actionId Identification number of the action to be challenged\n    * @param _settlementOffer Amount of collateral tokens the challenger would accept for resolving the dispute without involving the arbitrator\n    * @param _finishedEvidence Whether the challenger is finished submitting evidence with the challenge context\n    * @param _context Link to a human-readable context for the challenge\n    */\n    function challengeAction(uint256 _actionId, uint256 _settlementOffer, bool _finishedEvidence, bytes _context) external {\n        Action storage action = _getAction(_actionId);\n        require(_canChallenge(action), ERROR_CANNOT_CHALLENGE_ACTION);\n\n        (DisputableAragonApp disputable, CollateralRequirement storage requirement) = _getDisputableInfoFor(action);\n        require(_canPerformChallenge(disputable, msg.sender), ERROR_SENDER_CANNOT_CHALLENGE_ACTION);\n        require(_settlementOffer <= requirement.actionAmount, ERROR_INVALID_SETTLEMENT_OFFER);\n\n        uint256 challengeId = _createChallenge(_actionId, action, msg.sender, requirement, _settlementOffer, _finishedEvidence, _context);\n        action.lastChallengeId = challengeId;\n        disputable.onDisputableActionChallenged(action.disputableActionId, challengeId, msg.sender);\n        emit ActionChallenged(_actionId, challengeId);\n    }\n\n    /**\n    * @notice Settle challenged action #`_actionId`, accepting the settlement offer\n    * @dev This can be accessed by both the submitter (at any time) or any account (after the settlement period has passed).\n    *      Can only be called once (if at all) per opened challenge.\n    *      Initialization check is implicitly provided by `_getChallengedAction()` as disputable actions can only be created via `newAction()`.\n    * @param _actionId Identification number of the action to be settled\n    */\n    function settleAction(uint256 _actionId) external {\n        (Action storage action, Challenge storage challenge, uint256 challengeId) = _getChallengedAction(_actionId);\n        address submitter = action.submitter;\n\n        if (msg.sender == submitter) {\n            require(_canSettle(challenge), ERROR_CANNOT_SETTLE_ACTION);\n        } else {\n            require(_canClaimSettlement(challenge), ERROR_CANNOT_SETTLE_ACTION);\n        }\n\n        (DisputableAragonApp disputable, CollateralRequirement storage requirement) = _getDisputableInfoFor(action);\n        uint256 actionCollateral = requirement.actionAmount;\n        uint256 settlementOffer = challenge.settlementOffer;\n\n        // The settlement offer was already checked to be up-to the collateral amount upon challenge creation\n        // However, we cap it to collateral amount to be safe\n        // With this, we can avoid using SafeMath to calculate `unlockedAmount`\n        uint256 slashedAmount = settlementOffer >= actionCollateral ? actionCollateral : settlementOffer;\n        uint256 unlockedAmount = actionCollateral - slashedAmount;\n\n        // Unlock and slash action collateral for settlement offer\n        address challenger = challenge.challenger;\n        IStaking staking = requirement.staking;\n        _unlockBalance(staking, submitter, unlockedAmount);\n        _slashBalance(staking, submitter, challenger, slashedAmount);\n\n        // Transfer challenge collateral and challenger arbitrator fees back to the challenger\n        _transferTo(requirement.token, challenger, requirement.challengeAmount);\n        _transferTo(challenge.challengerArbitratorFees.token, challenger, challenge.challengerArbitratorFees.amount);\n\n        challenge.state = ChallengeState.Settled;\n        disputable.onDisputableActionRejected(action.disputableActionId);\n        emit ActionSettled(_actionId, challengeId);\n        _unsafeCloseAction(_actionId, action);\n    }\n\n    /**\n    * @notice Dispute challenged action #`_actionId`, raising it to the arbitrator\n    * @dev Only the action submitter can create a dispute for an action with an open challenge.\n    *      Can only be called once (if at all) per opened challenge.\n    *      Initialization check is implicitly provided by `_getChallengedAction()` as disputable actions can only be created via `newAction()`.\n    * @param _actionId Identification number of the action to be disputed\n    * @param _submitterFinishedEvidence Whether the submitter was finished submitting evidence with their action context\n    */\n    function disputeAction(uint256 _actionId, bool _submitterFinishedEvidence) external {\n        (Action storage action, Challenge storage challenge, uint256 challengeId) = _getChallengedAction(_actionId);\n        require(_canDispute(challenge), ERROR_CANNOT_DISPUTE_ACTION);\n\n        address submitter = action.submitter;\n        require(msg.sender == submitter, ERROR_SENDER_NOT_ALLOWED);\n\n        IArbitrator arbitrator = _getArbitratorFor(action);\n        bytes memory metadata = abi.encodePacked(appId(), action.lastChallengeId);\n        uint256 disputeId = _createDispute(action, challenge, arbitrator, metadata);\n        bool challengerFinishedEvidence = challenge.challengerFinishedEvidence;\n        arbitrator.submitEvidence(disputeId, submitter, action.context);\n        arbitrator.submitEvidence(disputeId, challenge.challenger, challenge.context);\n\n        if (_submitterFinishedEvidence && challengerFinishedEvidence) {\n            // Try-catch for: arbitrator.closeEvidencePeriod(disputeId);\n            bytes memory closeEvidencePeriodCalldata = abi.encodeWithSelector(arbitrator.closeEvidencePeriod.selector, disputeId);\n            address(arbitrator).call(closeEvidencePeriodCalldata);\n        }\n\n        challenge.state = ChallengeState.Disputed;\n        challenge.submitterFinishedEvidence = _submitterFinishedEvidence;\n        challenge.disputeId = disputeId;\n        challengeByDispute[disputeId] = challengeId;\n        emit ActionDisputed(_actionId, challengeId);\n    }\n\n    /**\n    * @notice Submit evidence for dispute #`_disputeId`\n    * @dev Only callable by the action submitter or challenger.\n    *      Can be called as many times as desired until the dispute is over.\n    *      Initialization check is implicitly provided by `_getDisputedAction()` as disputable actions can only be created via `newAction()`.\n    * @param _disputeId Identification number of the dispute on the arbitrator\n    * @param _evidence Evidence data to be submitted\n    * @param _finished Whether the evidence submitter is now finished submitting evidence\n    */\n    function submitEvidence(uint256 _disputeId, bytes _evidence, bool _finished) external {\n        (, Action storage action, , Challenge storage challenge) = _getDisputedAction(_disputeId);\n        require(_isDisputed(challenge), ERROR_CANNOT_SUBMIT_EVIDENCE);\n\n        IArbitrator arbitrator = _getArbitratorFor(action);\n        if (msg.sender == action.submitter) {\n            // If the submitter finished submitting evidence earlier, also emit this event as finished\n            bool submitterFinishedEvidence = challenge.submitterFinishedEvidence || _finished;\n            arbitrator.submitEvidence(_disputeId, msg.sender, _evidence);\n            challenge.submitterFinishedEvidence = submitterFinishedEvidence;\n        } else if (msg.sender == challenge.challenger) {\n            // If the challenger finished submitting evidence earlier, also emit this event as finished\n            bool challengerFinishedEvidence = challenge.challengerFinishedEvidence || _finished;\n            arbitrator.submitEvidence(_disputeId, msg.sender, _evidence);\n            challenge.challengerFinishedEvidence = challengerFinishedEvidence;\n        } else {\n            revert(ERROR_SENDER_NOT_ALLOWED);\n        }\n    }\n\n    /**\n    * @notice Close evidence submission period for dispute #`_disputeId`\n    * @dev Callable by any account.\n    *      Initialization check is implicitly provided by `_getDisputedAction()` as disputable actions can only be created via `newAction()`.\n    * @param _disputeId Identification number of the dispute on the arbitrator\n    */\n    function closeEvidencePeriod(uint256 _disputeId) external {\n        (, Action storage action, , Challenge storage challenge) = _getDisputedAction(_disputeId);\n        require(_isDisputed(challenge), ERROR_CANNOT_SUBMIT_EVIDENCE);\n        require(challenge.submitterFinishedEvidence && challenge.challengerFinishedEvidence, ERROR_CANNOT_CLOSE_EVIDENCE_PERIOD);\n\n        IArbitrator arbitrator = _getArbitratorFor(action);\n        arbitrator.closeEvidencePeriod(_disputeId);\n    }\n\n    /**\n    * @notice Resolve the action associated to dispute #`_disputeId` with ruling `_ruling`\n    * @dev Can only be called once per challenge by anyone once the arbitrator ruling has been finalized.\n    *      Initialization check is implicitly provided by `_getDisputedAction()` as disputable actions can only be created via `newAction()`.\n    * @param _disputeId Identification number of the dispute on the arbitrator\n    */\n    function resolve(uint256 _disputeId) external {\n        (uint256 actionId, Action storage action, uint256 challengeId, Challenge storage challenge) = _getDisputedAction(_disputeId);\n        require(_isDisputed(challenge), ERROR_CANNOT_RULE_ACTION);\n\n        IArbitrator arbitrator = _getArbitratorFor(action);\n        (, uint256 ruling) = arbitrator.rule(_disputeId);\n\n        challenge.ruling = ruling;\n        emit Ruled(arbitrator, _disputeId, ruling);\n\n        if (ruling == DISPUTES_RULING_SUBMITTER) {\n            _acceptAction(actionId, action, challengeId, challenge);\n        } else if (ruling == DISPUTES_RULING_CHALLENGER) {\n            _rejectAction(actionId, action, challengeId, challenge);\n        } else {\n            _voidAction(actionId, action, challengeId, challenge);\n        }\n    }\n\n    // Getter fns\n\n    /**\n    * @dev Tell the identification number of the current agreement setting\n    * @return Identification number of the current agreement setting\n    */\n    function getCurrentSettingId() external view returns (uint256) {\n        return _getCurrentSettingId();\n    }\n\n    /**\n    * @dev Tell the information related to an agreement setting\n    * @param _settingId Identification number of the agreement setting\n    * @return arbitrator Address of the IArbitrator that will be used to resolve disputes\n    * @return aragonAppFeesCashier Address of the fees cashier to deposit action fees (linked to the selected arbitrator)\n    * @return title String indicating a short description\n    * @return content Link to a human-readable text that describes the current rules for the Agreement\n    */\n    function getSetting(uint256 _settingId)\n        external\n        view\n        returns (IArbitrator arbitrator, IAragonAppFeesCashier aragonAppFeesCashier, string title, bytes content)\n    {\n        Setting storage setting = _getSetting(_settingId);\n        arbitrator = setting.arbitrator;\n        aragonAppFeesCashier = setting.aragonAppFeesCashier;\n        title = setting.title;\n        content = setting.content;\n    }\n\n    /**\n    * @dev Tell the information related to a Disputable app\n    * @param _disputable Address of the Disputable app\n    * @return activated Whether the Disputable app is active\n    * @return currentCollateralRequirementId Identification number of the current collateral requirement\n    */\n    function getDisputableInfo(address _disputable) external view returns (bool activated, uint256 currentCollateralRequirementId) {\n        DisputableInfo storage disputableInfo = disputableInfos[_disputable];\n        activated = disputableInfo.activated;\n        uint256 nextId = disputableInfo.nextCollateralRequirementsId;\n        // Since `nextCollateralRequirementsId` is initialized to 1 when disputable apps are activated, it is safe to consider the\n        // current collateral requirement ID of a disputable app as 0 if it has not been set yet, which means it was not activated yet.\n        currentCollateralRequirementId = nextId == 0 ? 0 : nextId - 1;\n    }\n\n    /**\n    * @dev Tell the information related to a collateral requirement of a Disputable app\n    * @param _disputable Address of the Disputable app\n    * @param _collateralRequirementId Identification number of the collateral requirement\n    * @return collateralToken Address of the ERC20 token to be used for collateral\n    * @return actionAmount Amount of collateral tokens that will be locked every time an action is created\n    * @return challengeAmount Amount of collateral tokens that will be locked every time an action is challenged\n    * @return challengeDuration Challenge duration, during which the submitter can raise a dispute\n    */\n    function getCollateralRequirement(address _disputable, uint256 _collateralRequirementId)\n        external\n        view\n        returns (\n            ERC20 collateralToken,\n            uint64 challengeDuration,\n            uint256 actionAmount,\n            uint256 challengeAmount\n        )\n    {\n        DisputableInfo storage disputableInfo = disputableInfos[_disputable];\n        CollateralRequirement storage collateral = _getCollateralRequirement(disputableInfo, _collateralRequirementId);\n        collateralToken = collateral.token;\n        actionAmount = collateral.actionAmount;\n        challengeAmount = collateral.challengeAmount;\n        challengeDuration = collateral.challengeDuration;\n    }\n\n    /**\n    * @dev Tell the information related to a signer\n    * @param _signer Address of signer\n    * @return lastSettingIdSigned Identification number of the last agreement setting signed by the signer\n    * @return mustSign Whether the requested signer needs to sign the current agreement setting before submitting an action\n    */\n    function getSigner(address _signer) external view returns (uint256 lastSettingIdSigned, bool mustSign) {\n        (lastSettingIdSigned, mustSign) = _getSigner(_signer);\n    }\n\n    /**\n    * @dev Tell the information related to an action\n    * @param _actionId Identification number of the action\n    * @return disputable Address of the Disputable app that created the action\n    * @return disputableActionId Identification number of the action on the Disputable app\n    * @return collateralRequirementId Identification number of the collateral requirement applicable to the action\n    * @return settingId Identification number of the agreement setting applicable to the action\n    * @return submitter Address that submitted the action\n    * @return closed Whether the action is closed\n    * @return context Link to a human-readable context for the action\n    * @return lastChallengeId Identification number of the action's most recent challenge, if any\n    * @return lastChallengeActive Whether the action's most recent challenge is still ongoing\n    */\n    function getAction(uint256 _actionId)\n        external\n        view\n        returns (\n            address disputable,\n            uint256 disputableActionId,\n            uint256 collateralRequirementId,\n            uint256 settingId,\n            address submitter,\n            bool closed,\n            bytes context,\n            uint256 lastChallengeId,\n            bool lastChallengeActive\n        )\n    {\n        Action storage action = _getAction(_actionId);\n\n        disputable = action.disputable;\n        disputableActionId = action.disputableActionId;\n        collateralRequirementId = action.collateralRequirementId;\n        settingId = action.settingId;\n        submitter = action.submitter;\n        closed = action.closed;\n        context = action.context;\n        lastChallengeId = action.lastChallengeId;\n\n        if (lastChallengeId > 0) {\n            (, Challenge storage challenge, ) = _getChallengedAction(_actionId);\n            lastChallengeActive = _isWaitingChallengeAnswer(challenge) || _isDisputed(challenge);\n        }\n    }\n\n    /**\n    * @dev Tell the information related to an action challenge\n    * @param _challengeId Identification number of the challenge\n    * @return actionId Identification number of the action associated to the challenge\n    * @return challenger Address that challenged the action\n    * @return endDate Datetime of the last date the submitter can raise a dispute against the challenge\n    * @return context Link to a human-readable context for the challenge\n    * @return settlementOffer Amount of collateral tokens the challenger would accept for resolving the dispute without involving the arbitrator\n    * @return state Current state of the challenge\n    * @return submitterFinishedEvidence Whether the action submitter has finished submitting evidence for the associated dispute\n    * @return challengerFinishedEvidence Whether the action challenger has finished submitting evidence for the associated dispute\n    * @return disputeId Identification number of the associated dispute on the arbitrator\n    * @return ruling Ruling given from the arbitrator for the dispute\n    */\n    function getChallenge(uint256 _challengeId)\n        external\n        view\n        returns (\n            uint256 actionId,\n            address challenger,\n            uint64 endDate,\n            bytes context,\n            uint256 settlementOffer,\n            ChallengeState state,\n            bool submitterFinishedEvidence,\n            bool challengerFinishedEvidence,\n            uint256 disputeId,\n            uint256 ruling\n        )\n    {\n        Challenge storage challenge = _getChallenge(_challengeId);\n\n        actionId = challenge.actionId;\n        challenger = challenge.challenger;\n        endDate = challenge.endDate;\n        context = challenge.context;\n        settlementOffer = challenge.settlementOffer;\n        state = challenge.state;\n        submitterFinishedEvidence = challenge.submitterFinishedEvidence;\n        challengerFinishedEvidence = challenge.challengerFinishedEvidence;\n        disputeId = challenge.disputeId;\n        ruling = challenge.ruling;\n    }\n\n    /**\n    * @dev Tell the arbitration fees paid for an action challenge\n    *      Split from `getChallenge()` due to “stack too deep issues”\n    * @param _challengeId Identification number of the challenge\n    * @return submitterArbitratorFeesToken ERC20 token used for the arbitration fees paid by the submitter (on dispute creation)\n    * @return submitterArbitratorFeesAmount Amount of arbitration fees paid by the submitter (on dispute creation)\n    * @return challengerArbitratorFeesToken ERC20 token used for the arbitration fees paid by the challenger (in advance)\n    * @return challengerArbitratorFeesAmount Amount of arbitration fees paid by the challenger (in advance)\n    */\n    function getChallengeArbitratorFees(uint256 _challengeId)\n        external\n        view\n        returns (\n            ERC20 submitterArbitratorFeesToken,\n            uint256 submitterArbitratorFeesAmount,\n            ERC20 challengerArbitratorFeesToken,\n            uint256 challengerArbitratorFeesAmount\n        )\n    {\n        Challenge storage challenge = _getChallenge(_challengeId);\n\n        submitterArbitratorFeesToken = challenge.submitterArbitratorFees.token;\n        submitterArbitratorFeesAmount = challenge.submitterArbitratorFees.amount;\n        challengerArbitratorFeesToken = challenge.challengerArbitratorFees.token;\n        challengerArbitratorFeesAmount = challenge.challengerArbitratorFees.amount;\n    }\n\n    /**\n    * @dev Tell whether an action can be challenged\n    * @param _actionId Identification number of the action\n    * @return True if the action can be challenged, false otherwise\n    */\n    function canChallenge(uint256 _actionId) external view returns (bool) {\n        Action storage action = _getAction(_actionId);\n        return _canChallenge(action);\n    }\n\n    /**\n    * @dev Tell whether an action can be manually closed.\n    *      An action can be closed if it is allowed to:\n    *       - Proceed in the context of this Agreement (see `_canProceed()`), and\n    *       - Be closed in the context of the originating Disputable app\n    * @param _actionId Identification number of the action\n    * @return True if the action can be closed, false otherwise\n    */\n    function canClose(uint256 _actionId) external view returns (bool) {\n        Action storage action = _getAction(_actionId);\n        return _canClose(action);\n    }\n\n    /**\n    * @dev Tell whether an action can be settled\n    * @param _actionId Identification number of the action\n    * @return True if the action can be settled, false otherwise\n    */\n    function canSettle(uint256 _actionId) external view returns (bool) {\n        (, Challenge storage challenge, ) = _getChallengedAction(_actionId);\n        return _canSettle(challenge);\n    }\n\n    /**\n    * @dev Tell whether an action can be settled by claiming its challenge settlement\n    * @param _actionId Identification number of the action\n    * @return True if the action settlement can be claimed, false otherwise\n    */\n    function canClaimSettlement(uint256 _actionId) external view returns (bool) {\n        (, Challenge storage challenge, ) = _getChallengedAction(_actionId);\n        return _canClaimSettlement(challenge);\n    }\n\n    /**\n    * @dev Tell whether an action can be disputed\n    * @param _actionId Identification number of the action\n    * @return True if the action can be disputed, false otherwise\n    */\n    function canDispute(uint256 _actionId) external view returns (bool) {\n        (, Challenge storage challenge, ) = _getChallengedAction(_actionId);\n        return _canDispute(challenge);\n    }\n\n    /**\n    * @dev Tell whether an action's dispute can be ruled\n    * @param _actionId Identification number of the action\n    * @return True if the action's dispute can be ruled, false otherwise\n    */\n    function canRuleDispute(uint256 _actionId) external view returns (bool) {\n        (, Challenge storage challenge, ) = _getChallengedAction(_actionId);\n        return _isDisputed(challenge);\n    }\n\n    /**\n    * @dev Tell whether an address can challenge an action\n    * @param _actionId Identification number of the action\n    * @param _challenger Address of the challenger\n    * @return True if the challenger can challenge the action, false otherwise\n    */\n    function canPerformChallenge(uint256 _actionId, address _challenger) external view returns (bool) {\n        Action storage action = _getAction(_actionId);\n        return _canPerformChallenge(action.disputable, _challenger);\n    }\n\n    /**\n    * @notice Tells whether an address has already signed the Agreement\n    * @dev ACL oracle interface conformance\n    * @return True if a parameterized address has signed the current version of the Agreement, false otherwise\n    */\n    function canPerform(address /* _grantee */, address /* _where */, bytes32 /* _what */, uint256[] _how)\n        external\n        view\n        returns (bool)\n    {\n        // We currently expect the address as the only permission parameter because an ACL Oracle's `grantee`\n        // argument is not provided with the original sender if the permission is set for ANY_ENTITY.\n        require(_how.length > 0, ERROR_ACL_ORACLE_SIGNER_MISSING);\n        require(_how[0] < 2**160, ERROR_ACL_ORACLE_SIGNER_NOT_ADDRESS);\n\n        address signer = address(_how[0]);\n        (, bool mustSign) = _getSigner(signer);\n        return !mustSign;\n    }\n\n    /**\n    * @dev ILockManager conformance.\n    *      The Staking contract checks this on each request to unlock an amount managed by this Agreement.\n    *      It always returns false to disable owners from unlocking their funds arbitrarily, as we\n    *      want to control the release of the locked amount when actions are closed or settled.\n    * @return Whether the request to unlock tokens of a given owner should be allowed\n    */\n    function canUnlock(address, uint256) external view returns (bool) {\n        return false;\n    }\n\n    /**\n    * @dev Disable built-in AragonApp token recovery escape hatch.\n    *      This app is intended to hold users' funds and we do not want to allow them to be transferred to the default vault.\n    * @return Always false\n    */\n    function allowRecoverability(address /* _token */) public view returns (bool) {\n        return false;\n    }\n\n    // Internal fns\n\n    /**\n    * @dev Change agreement settings\n    * @param _arbitrator Address of the IArbitrator that will be used to resolve disputes\n    * @param _setAppFeesCashier Whether to integrate with the IArbitrator's fee cashier\n    * @param _title String indicating a short description\n    * @param _content Link to a human-readable text that describes the new rules for the Agreement\n    */\n    function _newSetting(IArbitrator _arbitrator, bool _setAppFeesCashier, string _title, bytes _content) internal {\n        require(isContract(address(_arbitrator)), ERROR_ARBITRATOR_NOT_CONTRACT);\n\n        uint256 id = nextSettingId++;\n        Setting storage setting = settings[id];\n        setting.title = _title;\n        setting.content = _content;\n        setting.arbitrator = _arbitrator;\n\n        // Note that if the Agreement app didn't have an app fees cashier set at the start, then it must be explicitly set later.\n        // Arbitrators must always have at least some sort of subscription module, and having the flexibility to turn this off\n        // on the Agreement side can be useful.\n        setting.aragonAppFeesCashier = _setAppFeesCashier ? _getArbitratorFeesCashier(_arbitrator) : IAragonAppFeesCashier(0);\n        emit SettingChanged(id);\n    }\n\n    /**\n    * @dev Change the collateral requirements of an active Disputable app\n    * @param _disputable Address of the Disputable app\n    * @param _disputableInfo Disputable info instance for the Disputable app\n    * @param _collateralToken Address of the ERC20 token to be used for collateral\n    * @param _actionAmount Amount of collateral tokens that will be locked every time an action is submitted\n    * @param _challengeAmount Amount of collateral tokens that will be locked every time an action is challenged\n    * @param _challengeDuration Challenge duration, during which the submitter can raise a dispute\n    */\n    function _changeCollateralRequirement(\n        DisputableAragonApp _disputable,\n        DisputableInfo storage _disputableInfo,\n        ERC20 _collateralToken,\n        uint64 _challengeDuration,\n        uint256 _actionAmount,\n        uint256 _challengeAmount\n    )\n        internal\n    {\n        require(isContract(address(_collateralToken)), ERROR_TOKEN_NOT_CONTRACT);\n\n        IStaking staking = stakingFactory.getOrCreateInstance(_collateralToken);\n        uint256 id = _disputableInfo.nextCollateralRequirementsId++;\n        CollateralRequirement storage collateralRequirement = _disputableInfo.collateralRequirements[id];\n        collateralRequirement.token = _collateralToken;\n        collateralRequirement.challengeDuration = _challengeDuration;\n        collateralRequirement.actionAmount = _actionAmount;\n        collateralRequirement.challengeAmount = _challengeAmount;\n        collateralRequirement.staking = staking;\n\n        emit CollateralRequirementChanged(_disputable, id);\n    }\n\n    /**\n    * @dev Pay transactions fees required for new actions\n    * @param _setting Agreement setting instance, used to get Aragon App Fees Cashier\n    * @param _disputable Address of the Disputable app, used to determine fees\n    * @param _submitter Address that submitted the action\n    * @param _actionId Identification number of the action being paid for\n    */\n    function _payAppFees(Setting storage _setting, DisputableAragonApp _disputable, address _submitter, uint256 _actionId) internal {\n        // Get fees\n        IAragonAppFeesCashier aragonAppFeesCashier = _setting.aragonAppFeesCashier;\n        if (aragonAppFeesCashier == IAragonAppFeesCashier(0)) {\n            return;\n        }\n\n        bytes32 appId = _disputable.appId();\n        (ERC20 token, uint256 amount) = aragonAppFeesCashier.getAppFee(appId);\n\n        if (amount == 0) {\n            return;\n        }\n\n        // Pull the required amount from the fee token's staking pool and approve them to the cashier\n        IStaking staking = stakingFactory.getOrCreateInstance(token);\n        _lockBalance(staking, _submitter, amount);\n        _slashBalance(staking, _submitter, address(this), amount);\n        _approveFor(token, address(aragonAppFeesCashier), amount);\n\n        // Pay fees\n        aragonAppFeesCashier.payAppFees(appId, abi.encodePacked(_actionId));\n    }\n\n    /**\n    * @dev Close an action\n    *      This function does not perform any checks about the action status; callers must have already ensured the action can be closed.\n    * @param _actionId Identification number of the action being closed\n    * @param _action Action instance being closed\n    */\n    function _unsafeCloseAction(uint256 _actionId, Action storage _action) internal {\n        _action.closed = true;\n        emit ActionClosed(_actionId);\n    }\n\n    /**\n    * @dev Challenge an action\n    * @param _actionId Identification number of the action being challenged\n    * @param _action Action instance being challenged\n    * @param _challenger Address challenging the action\n    * @param _requirement Collateral requirement instance applicable to the challenge\n    * @param _settlementOffer Amount of collateral tokens the challenger would accept for resolving the dispute without involving the arbitrator\n    * @param _finishedSubmittingEvidence Whether the challenger is finished submitting evidence with the challenge context\n    * @param _context Link to a human-readable context for the challenge\n    * @return Identification number for the created challenge\n    */\n    function _createChallenge(\n        uint256 _actionId,\n        Action storage _action,\n        address _challenger,\n        CollateralRequirement storage _requirement,\n        uint256 _settlementOffer,\n        bool _finishedSubmittingEvidence,\n        bytes _context\n    )\n        internal\n        returns (uint256)\n    {\n        // Store challenge\n        uint256 challengeId = nextChallengeId++;\n        Challenge storage challenge = challenges[challengeId];\n        challenge.actionId = _actionId;\n        challenge.challenger = _challenger;\n        challenge.endDate = getTimestamp64().add(_requirement.challengeDuration);\n        challenge.context = _context;\n        challenge.settlementOffer = _settlementOffer;\n        challenge.challengerFinishedEvidence = _finishedSubmittingEvidence;\n\n        // Pull challenge collateral\n        _depositFrom(_requirement.token, _challenger, _requirement.challengeAmount);\n\n        // Pull pre-paid arbitrator fees from challenger\n        IArbitrator arbitrator = _getArbitratorFor(_action);\n        (, ERC20 feeToken, uint256 feeAmount) = arbitrator.getDisputeFees();\n        challenge.challengerArbitratorFees.token = feeToken;\n        challenge.challengerArbitratorFees.amount = feeAmount;\n        _depositFrom(feeToken, _challenger, feeAmount);\n\n        return challengeId;\n    }\n\n    /**\n    * @dev Dispute an action\n    * @param _action Action instance being disputed\n    * @param _challenge Currently open challenge instance for the action\n    * @return _arbitrator Address of the IArbitrator applicable to the action\n    * @return _metadata Metadata content to be used for the dispute\n    * @return Identification number of the dispute created on the arbitrator\n    */\n    function _createDispute(Action storage _action, Challenge storage _challenge, IArbitrator _arbitrator, bytes memory _metadata)\n        internal\n        returns (uint256)\n    {\n        // Pull arbitration fees from submitter\n        (address disputeFeeRecipient, ERC20 feeToken, uint256 feeAmount) = _arbitrator.getDisputeFees();\n        _challenge.submitterArbitratorFees.token = feeToken;\n        _challenge.submitterArbitratorFees.amount = feeAmount;\n\n        address submitter = _action.submitter;\n        _depositFrom(feeToken, submitter, feeAmount);\n\n        // Create dispute. The arbitrator should pull its arbitration fees (if any) from this Agreement on `createDispute()`.\n        _approveFor(feeToken, disputeFeeRecipient, feeAmount);\n        uint256 disputeId = _arbitrator.createDispute(DISPUTES_POSSIBLE_OUTCOMES, _metadata);\n\n        return disputeId;\n    }\n\n    /**\n    * @dev Reject an action (\"accept challenge\")\n    * @param _actionId Identification number of the action to be rejected\n    * @param _action Action instance to be rejected\n    * @param _challengeId Current challenge identification number for the action\n    * @param _challenge Current challenge instance for the action\n    */\n    function _rejectAction(uint256 _actionId, Action storage _action, uint256 _challengeId, Challenge storage _challenge) internal {\n        _challenge.state = ChallengeState.Accepted;\n\n        address challenger = _challenge.challenger;\n        (DisputableAragonApp disputable, CollateralRequirement storage requirement) = _getDisputableInfoFor(_action);\n\n        // Transfer action collateral, challenge collateral, and challenger arbitrator fees to the challenger\n        _slashBalance(requirement.staking, _action.submitter, challenger, requirement.actionAmount);\n        _transferTo(requirement.token, challenger, requirement.challengeAmount);\n        _transferTo(_challenge.challengerArbitratorFees.token, challenger, _challenge.challengerArbitratorFees.amount);\n        disputable.onDisputableActionRejected(_action.disputableActionId);\n        emit ActionRejected(_actionId, _challengeId);\n        _unsafeCloseAction(_actionId, _action);\n    }\n\n    /**\n    * @dev Accept an action (\"reject challenge\")\n    * @param _actionId Identification number of the action to be accepted\n    * @param _action Action instance to be accepted\n    * @param _challengeId Current challenge identification number for the action\n    * @param _challenge Current challenge instance for the action\n    */\n    function _acceptAction(uint256 _actionId, Action storage _action, uint256 _challengeId, Challenge storage _challenge) internal {\n        _challenge.state = ChallengeState.Rejected;\n\n        address submitter = _action.submitter;\n        (DisputableAragonApp disputable, CollateralRequirement storage requirement) = _getDisputableInfoFor(_action);\n\n        // Transfer challenge collateral and challenger arbitrator fees to the submitter\n        _transferTo(requirement.token, submitter, requirement.challengeAmount);\n        _transferTo(_challenge.challengerArbitratorFees.token, submitter, _challenge.challengerArbitratorFees.amount);\n        disputable.onDisputableActionAllowed(_action.disputableActionId);\n        emit ActionAccepted(_actionId, _challengeId);\n\n        // Note that the action still continues after this ruling and will be closed at a future date\n    }\n\n    /**\n    * @dev Void an action (\"void challenge\")\n    * @param _actionId Identification number of the action to be voided\n    * @param _action Action instance to be voided\n    * @param _challengeId Current challenge identification number for the action\n    * @param _challenge Current challenge instance for the action\n    */\n    function _voidAction(uint256 _actionId, Action storage _action, uint256 _challengeId, Challenge storage _challenge) internal {\n        _challenge.state = ChallengeState.Voided;\n\n        (DisputableAragonApp disputable, CollateralRequirement storage requirement) = _getDisputableInfoFor(_action);\n        address challenger = _challenge.challenger;\n\n        // Return challenge collateral to the challenger, and split the challenger arbitrator fees between the challenger and the submitter\n        _transferTo(requirement.token, challenger, requirement.challengeAmount);\n        ERC20 challengerArbitratorFeesToken = _challenge.challengerArbitratorFees.token;\n        uint256 challengerArbitratorFeesAmount = _challenge.challengerArbitratorFees.amount;\n        uint256 submitterPayBack = challengerArbitratorFeesAmount / 2;\n        // No need for Safemath because of previous computation\n        uint256 challengerPayBack = challengerArbitratorFeesAmount - submitterPayBack;\n        _transferTo(challengerArbitratorFeesToken, _action.submitter, submitterPayBack);\n        _transferTo(challengerArbitratorFeesToken, challenger, challengerPayBack);\n        disputable.onDisputableActionVoided(_action.disputableActionId);\n        emit ActionVoided(_actionId, _challengeId);\n\n        // Note that the action still continues after this ruling and will be closed at a future date\n    }\n\n    /**\n    * @dev Lock some tokens in the staking pool for a user\n    * @param _staking Staking pool for the ERC20 token to be locked\n    * @param _user Address of the user to lock tokens for\n    * @param _amount Amount of collateral tokens to be locked\n    */\n    function _lockBalance(IStaking _staking, address _user, uint256 _amount) internal {\n        if (_amount == 0) {\n            return;\n        }\n\n        _staking.lock(_user, _amount);\n    }\n\n    /**\n    * @dev Unlock some tokens in the staking pool for a user\n    * @param _staking Staking pool for the ERC20 token to be unlocked\n    * @param _user Address of the user to unlock tokens for\n    * @param _amount Amount of collateral tokens to be unlocked\n    */\n    function _unlockBalance(IStaking _staking, address _user, uint256 _amount) internal {\n        if (_amount == 0) {\n            return;\n        }\n\n        _staking.unlock(_user, address(this), _amount);\n    }\n\n    /**\n    * @dev Slash some tokens in the staking pool from a user to a recipient\n    * @param _staking Staking pool for the ERC20 token to be slashed\n    * @param _user Address of the user to be slashed\n    * @param _recipient Address receiving the slashed tokens\n    * @param _amount Amount of collateral tokens to be slashed\n    */\n    function _slashBalance(IStaking _staking, address _user, address _recipient, uint256 _amount) internal {\n        if (_amount == 0) {\n            return;\n        }\n\n        _staking.slashAndUnstake(_user, _recipient, _amount);\n    }\n\n    /**\n    * @dev Transfer tokens to an address\n    * @param _token ERC20 token to be transferred\n    * @param _to Address receiving the tokens\n    * @param _amount Amount of tokens to be transferred\n    */\n    function _transferTo(ERC20 _token, address _to, uint256 _amount) internal {\n        if (_amount > 0) {\n            require(_token.safeTransfer(_to, _amount), ERROR_TOKEN_TRANSFER_FAILED);\n        }\n    }\n\n    /**\n    * @dev Deposit tokens from an address to this Agreement\n    * @param _token ERC20 token to be transferred\n    * @param _from Address transferring the tokens\n    * @param _amount Amount of tokens to be transferred\n    */\n    function _depositFrom(ERC20 _token, address _from, uint256 _amount) internal {\n        if (_amount > 0) {\n            require(_token.safeTransferFrom(_from, address(this), _amount), ERROR_TOKEN_DEPOSIT_FAILED);\n        }\n    }\n\n    /**\n    * @dev Approve tokens held by this Agreement to another address\n    * @param _token ERC20 token used for the arbitration fees\n    * @param _to Address to be approved\n    * @param _amount Amount of `_arbitrationFeeToken` tokens to be approved\n    */\n    function _approveFor(ERC20 _token, address _to, uint256 _amount) internal {\n        if (_amount > 0) {\n            // To be safe, we first set the allowance to zero in case there is a remaining approval for the arbitrator.\n            // This is not strictly necessary for ERC20s, but some tokens, e.g. MiniMe (ANT and ANJ),\n            // revert on an approval if an outstanding allowance exists\n            require(_token.safeApprove(_to, 0), ERROR_TOKEN_APPROVAL_FAILED);\n            require(_token.safeApprove(_to, _amount), ERROR_TOKEN_APPROVAL_FAILED);\n        }\n    }\n\n    /**\n    * @dev Fetch an agreement setting instance by identification number\n    * @param _settingId Identification number of the agreement setting\n    * @return Agreement setting instance associated to the given identification number\n    */\n    function _getSetting(uint256 _settingId) internal view returns (Setting storage) {\n        require(_settingId > 0 && _settingId < nextSettingId, ERROR_SETTING_DOES_NOT_EXIST);\n        return settings[_settingId];\n    }\n\n    /**\n    * @dev Tell the identification number of the current agreement setting\n    * @return Identification number of the current agreement setting\n    */\n    function _getCurrentSettingId() internal view returns (uint256) {\n        // An initial setting is created during initialization, thus after initialization, length will be always greater than 0\n        return nextSettingId == 0 ? 0 : nextSettingId - 1;\n    }\n\n    /**\n    * @dev Tell the arbitrator to be used for an action\n    * @param _action Action instance\n    * @return arbitrator Address of the IArbitrator that will be used to resolve disputes\n    */\n    function _getArbitratorFor(Action storage _action) internal view returns (IArbitrator) {\n        Setting storage setting = _getSetting(_action.settingId);\n        return setting.arbitrator;\n    }\n\n    /**\n    * @dev Tell the app fees cashier instance associated to an arbitrator\n    * @param _arbitrator Arbitrator querying the app fees cashier for\n    * @return Address of the app fees cashier associated to the arbitrator\n    */\n    function _getArbitratorFeesCashier(IArbitrator _arbitrator) internal view returns (IAragonAppFeesCashier) {\n        (address cashier,,) = _arbitrator.getSubscriptionFees(address(this));\n        return IAragonAppFeesCashier(cashier);\n    }\n\n    /**\n    * @dev Ensure a Disputable app is activate\n    * @param _disputableInfo Disputable info of the app\n    */\n    function _ensureActiveDisputable(DisputableInfo storage _disputableInfo) internal view {\n        require(_disputableInfo.activated, ERROR_DISPUTABLE_NOT_ACTIVE);\n    }\n\n    /**\n    * @dev Ensure a Disputable app is inactive\n    * @param _disputableInfo Disputable info of the app\n    */\n    function _ensureInactiveDisputable(DisputableInfo storage _disputableInfo) internal view {\n        require(!_disputableInfo.activated, ERROR_DISPUTABLE_ALREADY_ACTIVE);\n    }\n\n    /**\n    * @dev Tell the disputable-related information about an action\n    * @param _action Action instance\n    * @return disputable Address of the Disputable app associated to the action\n    * @return requirement Collateral requirement instance applicable to the action\n    */\n    function _getDisputableInfoFor(Action storage _action)\n        internal\n        view\n        returns (DisputableAragonApp disputable, CollateralRequirement storage requirement)\n    {\n        disputable = _action.disputable;\n        DisputableInfo storage disputableInfo = disputableInfos[address(disputable)];\n        requirement = _getCollateralRequirement(disputableInfo, _action.collateralRequirementId);\n    }\n\n    /**\n    * @dev Fetch the collateral requirement instance by identification number for a Disputable app\n    * @param _disputableInfo Disputable info instance\n    * @param _collateralRequirementId Identification number of the collateral requirement\n    * @return Collateral requirement instance associated to the given identification number\n    */\n    function _getCollateralRequirement(DisputableInfo storage _disputableInfo, uint256 _collateralRequirementId)\n        internal\n        view\n        returns (CollateralRequirement storage)\n    {\n        bool exists = _collateralRequirementId > 0 && _collateralRequirementId < _disputableInfo.nextCollateralRequirementsId;\n        require(exists, ERROR_COLLATERAL_REQUIREMENT_DOES_NOT_EXIST);\n        return _disputableInfo.collateralRequirements[_collateralRequirementId];\n    }\n\n    /**\n    * @dev Tell the information related to a signer\n    * @param _signer Address of signer\n    * @return lastSettingIdSigned Identification number of the last agreement setting signed by the signer\n    * @return mustSign Whether the signer needs to sign the current agreement setting before submitting an action\n    */\n    function _getSigner(address _signer) internal view returns (uint256 lastSettingIdSigned, bool mustSign) {\n        lastSettingIdSigned = lastSettingSignedBy[_signer];\n        mustSign = lastSettingIdSigned < _getCurrentSettingId();\n    }\n\n    /**\n    * @dev Fetch an action instance by identification number\n    * @param _actionId Identification number of the action\n    * @return Action instance associated to the given identification number\n    */\n    function _getAction(uint256 _actionId) internal view returns (Action storage) {\n        require(_actionId > 0 && _actionId < nextActionId, ERROR_ACTION_DOES_NOT_EXIST);\n        return actions[_actionId];\n    }\n\n    /**\n    * @dev Fetch a challenge instance by identification number\n    * @param _challengeId Identification number of the challenge\n    * @return Challenge instance associated to the given identification number\n    */\n    function _getChallenge(uint256 _challengeId) internal view returns (Challenge storage) {\n        require(_existChallenge(_challengeId), ERROR_CHALLENGE_DOES_NOT_EXIST);\n        return challenges[_challengeId];\n    }\n\n    /**\n    * @dev Fetch an action instance along with its most recent challenge by identification number\n    * @param _actionId Identification number of the action\n    * @return action Action instance associated to the given identification number\n    * @return challenge Most recent challenge instance associated to the action\n    * @return challengeId Identification number of the most recent challenge associated to the action\n    */\n    function _getChallengedAction(uint256 _actionId)\n        internal\n        view\n        returns (Action storage action, Challenge storage challenge, uint256 challengeId)\n    {\n        action = _getAction(_actionId);\n        challengeId = action.lastChallengeId;\n        challenge = _getChallenge(challengeId);\n    }\n\n    /**\n    * @dev Fetch a dispute's associated action and challenge instance\n    * @param _disputeId Identification number of the dispute on the arbitrator\n    * @return actionId Identification number of the action associated to the dispute\n    * @return action Action instance associated to the dispute\n    * @return challengeId Identification number of the challenge associated to the dispute\n    * @return challenge Current challenge instance associated to the dispute\n    */\n    function _getDisputedAction(uint256 _disputeId)\n        internal\n        view\n        returns (uint256 actionId, Action storage action, uint256 challengeId, Challenge storage challenge)\n    {\n        challengeId = challengeByDispute[_disputeId];\n        challenge = _getChallenge(challengeId);\n        actionId = challenge.actionId;\n        action = _getAction(actionId);\n    }\n\n    /**\n    * @dev Tell whether a challenge exists\n    * @param _challengeId Identification number of the challenge\n    * @return True if the requested challenge exists, false otherwise\n    */\n    function _existChallenge(uint256 _challengeId) internal view returns (bool) {\n        return _challengeId > 0 && _challengeId < nextChallengeId;\n    }\n\n    /**\n    * @dev Tell whether an action can be manually closed\n    * @param _action Action instance\n    * @return True if the action can be closed, false otherwise\n    */\n    function _canClose(Action storage _action) internal view returns (bool) {\n        if (!_canProceed(_action)) {\n            return false;\n        }\n\n        DisputableAragonApp disputable = _action.disputable;\n        // Assume that the Disputable app does not need to be checked if it's the one asking us to close an action\n        return DisputableAragonApp(msg.sender) == disputable || disputable.canClose(_action.disputableActionId);\n    }\n\n    /**\n    * @dev Tell whether an action can be challenged\n    * @param _action Action instance\n    * @return True if the action can be challenged, false otherwise\n    */\n    function _canChallenge(Action storage _action) internal view returns (bool) {\n        return _canProceed(_action) && _action.disputable.canChallenge(_action.disputableActionId);\n    }\n\n    /**\n    * @dev Tell whether an action can proceed to another state.\n    * @dev An action can proceed if it is:\n    *       - Not closed\n    *       - Not currently challenged or disputed, and\n    *       - Not already settled or had a dispute rule in favour of the challenger (the action will have been closed automatically)\n    * @param _action Action instance\n    * @return True if the action can proceed, false otherwise\n    */\n    function _canProceed(Action storage _action) internal view returns (bool) {\n        // If the action was already closed, return false\n        if (_action.closed) {\n            return false;\n        }\n\n        uint256 challengeId = _action.lastChallengeId;\n\n        // If the action has not been challenged yet, return true\n        if (!_existChallenge(challengeId)) {\n            return true;\n        }\n\n        // If the action was previously challenged but ruled in favour of the submitter or voided, return true\n        Challenge storage challenge = challenges[challengeId];\n        ChallengeState state = challenge.state;\n        return state == ChallengeState.Rejected || state == ChallengeState.Voided;\n    }\n\n    /**\n    * @dev Tell whether a challenge can be settled\n    * @param _challenge Challenge instance\n    * @return True if the challenge can be settled, false otherwise\n    */\n    function _canSettle(Challenge storage _challenge) internal view returns (bool) {\n        return _isWaitingChallengeAnswer(_challenge);\n    }\n\n    /**\n    * @dev Tell whether a challenge settlement can be claimed\n    * @param _challenge Challenge instance\n    * @return True if the challenge settlement can be claimed, false otherwise\n    */\n    function _canClaimSettlement(Challenge storage _challenge) internal view returns (bool) {\n        return _isWaitingChallengeAnswer(_challenge) && getTimestamp() >= uint256(_challenge.endDate);\n    }\n\n    /**\n    * @dev Tell whether a challenge can be disputed\n    * @param _challenge Challenge instance\n    * @return True if the challenge can be disputed, false otherwise\n    */\n    function _canDispute(Challenge storage _challenge) internal view returns (bool) {\n        return _isWaitingChallengeAnswer(_challenge) && uint256(_challenge.endDate) > getTimestamp();\n    }\n\n    /**\n    * @dev Tell whether a challenge is waiting to be answered\n    * @param _challenge Challenge instance\n    * @return True if the challenge is waiting to be answered, false otherwise\n    */\n    function _isWaitingChallengeAnswer(Challenge storage _challenge) internal view returns (bool) {\n        return _challenge.state == ChallengeState.Waiting;\n    }\n\n    /**\n    * @dev Tell whether a challenge is disputed\n    * @param _challenge Challenge instance\n    * @return True if the challenge is disputed, false otherwise\n    */\n    function _isDisputed(Challenge storage _challenge) internal view returns (bool) {\n        return _challenge.state == ChallengeState.Disputed;\n    }\n\n    /**\n    * @dev Tell whether an address has permission to challenge actions on a specific Disputable app\n    * @param _disputable Address of the Disputable app\n    * @param _challenger Address of the challenger\n    * @return True if the challenger can challenge actions on the Disputable app, false otherwise\n    */\n    function _canPerformChallenge(DisputableAragonApp _disputable, address _challenger) internal view returns (bool) {\n        IKernel currentKernel = kernel();\n        if (currentKernel == IKernel(0)) {\n            return false;\n        }\n\n        // To make sure the challenger address is reachable by ACL oracles, we need to pass it as the first argument.\n        // Permissions set with ANY_ENTITY do not provide the original sender's address into the ACL Oracle's `grantee` argument.\n        bytes memory params = ConversionHelpers.dangerouslyCastUintArrayToBytes(arr(_challenger));\n        return currentKernel.hasPermission(_challenger, address(_disputable), CHALLENGE_ROLE, params);\n    }\n}\n"
    },
    "@aragon/staking/interfaces/0.4/IStaking.sol": {
      "content": "pragma solidity >=0.4 <0.5;\n\n\ninterface IStaking {\n    // IERC-900\n    function stake(uint256 _amount, bytes _data) external;\n    function stakeFor(address _user, uint256 _amount, bytes _data) external;\n    function unstake(uint256 _amount, bytes _data) external;\n\n    function totalStakedFor(address _addr) external view returns (uint256);\n    function totalStaked() external view returns (uint256);\n    function token() external view returns (address);\n    function supportsHistory() external pure returns (bool);\n\n    function lastStakedFor(address addr) external view returns (uint256);\n    function totalStakedForAt(address addr, uint256 blockNumber) external view returns (uint256);\n    function totalStakedAt(uint256 blockNumber) external view returns (uint256);\n\n    // ILockable\n    function allowManager(address _lockManager, uint256 _allowance, bytes _data) external;\n    function unlockAndRemoveManager(address _user, address _lockManager) external;\n    function increaseLockAllowance(address _lockManager, uint256 _allowance) external;\n    function decreaseLockAllowance(address _user, address _lockManager, uint256 _allowance) external;\n    function lock(address _user, uint256 _amount) external;\n    function unlock(address _user, address _lockManager, uint256 _amount) external;\n    function slash(address _user, address _to, uint256 _amount) external;\n    function slashAndUnstake(address _user, address _to, uint256 _amount) external;\n\n    function getLock(address _user, address _lockManager) external view returns (uint256 _amount, uint256 _allowance);\n    function unlockedBalanceOf(address _user) external view returns (uint256);\n    function lockedBalanceOf(address _user) external view returns (uint256);\n    function getBalancesOf(address _user) external view returns (uint256 staked, uint256 locked);\n    function canUnlock(address _sender, address _user, address _lockManager, uint256 _amount) external view returns (bool);\n\n    // Misc.\n    function transfer(address _to, uint256 _amount) external;\n    function transferAndUnstake(address _to, uint256 _amount) external;\n}\n"
    },
    "@aragon/staking/interfaces/0.4/IStakingFactory.sol": {
      "content": "pragma solidity >=0.4 <0.5;\n\nimport \"./IStaking.sol\";\n\n\ninterface IStakingFactory {\n    function getOrCreateInstance(/* ERC20 */ address token) external returns (IStaking);\n\n    function existsInstance(/* ERC20 */ address token) external view returns (bool);\n    function getInstance(/* ERC20 */ address token) external view returns (IStaking);\n}\n"
    },
    "@aragon/staking/interfaces/0.4/ILockManager.sol": {
      "content": "pragma solidity >=0.4 <0.5;\n\n\ninterface ILockManager {\n    /**\n     * @notice Check if `_user`'s lock by `_lockManager` can be unlocked\n     * @param _user Owner of lock\n     * @param _amount Amount of locked tokens to unlock\n     * @return Whether given user's lock can be unlocked\n     */\n    function canUnlock(address _user, uint256 _amount) external view returns (bool);\n}\n"
    },
    "@1hive/apps-token-manager/contracts/HookedTokenManager.sol": {
      "content": "/*\n * SPDX-License-Identitifer:    GPL-3.0-or-later\n */\n\n/* solium-disable function-order */\n\npragma solidity 0.4.24;\n\nimport \"@aragon/os/contracts/apps/AragonApp.sol\";\nimport \"@aragon/os/contracts/forwarding/IForwarder.sol\";\n\nimport \"@aragon/os/contracts/lib/math/SafeMath.sol\";\n\nimport \"@aragon/apps-shared-minime/contracts/ITokenController.sol\";\nimport \"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\";\n\nimport \"./TokenManagerHook.sol\";\n\n\ncontract HookedTokenManager is ITokenController, IForwarder, AragonApp {\n    using SafeMath for uint256;\n\n    bytes32 public constant MINT_ROLE = keccak256(\"MINT_ROLE\");\n    bytes32 public constant ISSUE_ROLE = keccak256(\"ISSUE_ROLE\");\n    bytes32 public constant ASSIGN_ROLE = keccak256(\"ASSIGN_ROLE\");\n    bytes32 public constant REVOKE_VESTINGS_ROLE = keccak256(\"REVOKE_VESTINGS_ROLE\");\n    bytes32 public constant BURN_ROLE = keccak256(\"BURN_ROLE\");\n    bytes32 public constant SET_HOOK_ROLE = keccak256(\"SET_HOOK_ROLE\");\n\n    uint256 public constant MAX_VESTINGS_PER_ADDRESS = 50;\n\n    string private constant ERROR_CALLER_NOT_TOKEN = \"TM_CALLER_NOT_TOKEN\";\n    string private constant ERROR_NO_VESTING = \"TM_NO_VESTING\";\n    string private constant ERROR_TOKEN_CONTROLLER = \"TM_TOKEN_CONTROLLER\";\n    string private constant ERROR_MINT_RECEIVER_IS_TM = \"TM_MINT_RECEIVER_IS_TM\";\n    string private constant ERROR_VESTING_TO_TM = \"TM_VESTING_TO_TM\";\n    string private constant ERROR_TOO_MANY_VESTINGS = \"TM_TOO_MANY_VESTINGS\";\n    string private constant ERROR_WRONG_CLIFF_DATE = \"TM_WRONG_CLIFF_DATE\";\n    string private constant ERROR_VESTING_NOT_REVOKABLE = \"TM_VESTING_NOT_REVOKABLE\";\n    string private constant ERROR_REVOKE_TRANSFER_FROM_REVERTED = \"TM_REVOKE_TRANSFER_FROM_REVERTED\";\n    string private constant ERROR_CAN_NOT_FORWARD = \"TM_CAN_NOT_FORWARD\";\n    string private constant ERROR_BALANCE_INCREASE_NOT_ALLOWED = \"TM_BALANCE_INC_NOT_ALLOWED\";\n    string private constant ERROR_ASSIGN_TRANSFER_FROM_REVERTED = \"TM_ASSIGN_TRANSFER_FROM_REVERTED\";\n\n    struct TokenVesting {\n        uint256 amount;\n        uint64 start;\n        uint64 cliff;\n        uint64 vesting;\n        bool revokable;\n    }\n\n    // Note that we COMPLETELY trust this MiniMeToken to not be malicious for proper operation of this contract\n    MiniMeToken public token;\n    uint256 public maxAccountTokens;\n\n    // We are mimicing an array in the inner mapping, we use a mapping instead to make app upgrade more graceful\n    mapping (address => mapping (uint256 => TokenVesting)) internal vestings;\n    mapping (address => uint256) public vestingsLengths;\n\n    mapping (uint256 => TokenManagerHook) internal hooks;\n    uint256 internal hooksLength;\n\n    // Other token specific events can be watched on the token address directly (avoids duplication)\n    event NewVesting(address indexed receiver, uint256 vestingId, uint256 amount);\n    event RevokeVesting(address indexed receiver, uint256 vestingId, uint256 nonVestedAmount);\n\n    modifier onlyToken() {\n        require(msg.sender == address(token), ERROR_CALLER_NOT_TOKEN);\n        _;\n    }\n\n    modifier vestingExists(address _holder, uint256 _vestingId) {\n        // TODO: it's not checking for gaps that may appear because of deletes in revokeVesting function\n        require(_vestingId < vestingsLengths[_holder], ERROR_NO_VESTING);\n        _;\n    }\n\n    /**\n    * @notice Initialize Token Manager for `_token.symbol(): string`, whose tokens are `_transferable ? '' : 'not'` transferable`_maxAccountTokens > 0 ? ' and limited to a maximum of ' + @tokenAmount(_token, _maxAccountTokens, false) + ' per account' : ''`\n    * @param _token MiniMeToken address for the managed token (Token Manager instance must be already set as the token controller)\n    * @param _transferable whether the token can be transferred by holders\n    * @param _maxAccountTokens Maximum amount of tokens an account can have (0 for infinite tokens)\n    */\n    function initialize(\n        MiniMeToken _token,\n        bool _transferable,\n        uint256 _maxAccountTokens\n    )\n        external\n        onlyInit\n    {\n        initialized();\n\n        require(_token.controller() == address(this), ERROR_TOKEN_CONTROLLER);\n\n        token = _token;\n        maxAccountTokens = _maxAccountTokens == 0 ? uint256(-1) : _maxAccountTokens;\n\n        if (token.transfersEnabled() != _transferable) {\n            token.enableTransfers(_transferable);\n        }\n    }\n\n    /**\n    * @notice Create a new Token Manager hook for `_hook`\n    * @param _hook Contract that will be used as Token Manager hook\n    */\n    function registerHook(address _hook) external authP(SET_HOOK_ROLE, arr(_hook)) returns (uint256) {\n        uint256 hookId = hooksLength++;\n        hooks[hookId] = TokenManagerHook(_hook);\n        hooks[hookId].onRegisterAsHook(hookId, token);\n        return hookId;\n    }\n\n    /**\n    * @notice Revoke Token Manager hook #`_hookId`\n    * @param _hookId Position of the hook to be removed\n    */\n    function revokeHook(uint256 _hookId) external authP(SET_HOOK_ROLE, arr(_hookId)) {\n        hooks[_hookId].onRevokeAsHook(_hookId, token);\n        delete hooks[_hookId];\n    }\n\n    /**\n    * @notice Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for `_receiver`\n    * @param _receiver The address receiving the tokens, cannot be the Token Manager itself (use `issue()` instead)\n    * @param _amount Number of tokens minted\n    */\n    function mint(address _receiver, uint256 _amount) external authP(MINT_ROLE, arr(_receiver, _amount)) {\n        require(_receiver != address(this), ERROR_MINT_RECEIVER_IS_TM);\n        _mint(_receiver, _amount);\n    }\n\n    /**\n    * @notice Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for the Token Manager\n    * @param _amount Number of tokens minted\n    */\n    function issue(uint256 _amount) external authP(ISSUE_ROLE, arr(_amount)) {\n        _mint(address(this), _amount);\n    }\n\n    /**\n    * @notice Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings\n    * @param _receiver The address receiving the tokens\n    * @param _amount Number of tokens transferred\n    */\n    function assign(address _receiver, uint256 _amount) external authP(ASSIGN_ROLE, arr(_receiver, _amount)) {\n        _assign(_receiver, _amount);\n    }\n\n    /**\n    * @notice Burn `@tokenAmount(self.token(): address, _amount, false)` tokens from `_holder`\n    * @param _holder Holder of tokens being burned\n    * @param _amount Number of tokens being burned\n    */\n    function burn(address _holder, uint256 _amount) external authP(BURN_ROLE, arr(_holder, _amount)) {\n        _burn(_holder, _amount);\n    }\n\n    /**\n    * @notice Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings with a `_revokable : 'revokable' : ''` vesting starting at `@formatDate(_start)`, cliff at `@formatDate(_cliff)` (first portion of tokens transferable), and completed vesting at `@formatDate(_vested)` (all tokens transferable)\n    * @param _receiver The address receiving the tokens, cannot be Token Manager itself\n    * @param _amount Number of tokens vested\n    * @param _start Date the vesting calculations start\n    * @param _cliff Date when the initial portion of tokens are transferable\n    * @param _vested Date when all tokens are transferable\n    * @param _revokable Whether the vesting can be revoked by the Token Manager\n    */\n    function assignVested(\n        address _receiver,\n        uint256 _amount,\n        uint64 _start,\n        uint64 _cliff,\n        uint64 _vested,\n        bool _revokable\n    )\n        external\n        authP(ASSIGN_ROLE, arr(_receiver, _amount))\n        returns (uint256)\n    {\n        require(_receiver != address(this), ERROR_VESTING_TO_TM);\n        require(vestingsLengths[_receiver] < MAX_VESTINGS_PER_ADDRESS, ERROR_TOO_MANY_VESTINGS);\n        require(_start <= _cliff && _cliff <= _vested, ERROR_WRONG_CLIFF_DATE);\n\n        uint256 vestingId = vestingsLengths[_receiver]++;\n        vestings[_receiver][vestingId] = TokenVesting(\n            _amount,\n            _start,\n            _cliff,\n            _vested,\n            _revokable\n        );\n\n        _assign(_receiver, _amount);\n\n        emit NewVesting(_receiver, vestingId, _amount);\n\n        return vestingId;\n    }\n\n    /**\n    * @notice Revoke vesting #`_vestingId` from `_holder`, returning unvested tokens to the Token Manager\n    * @param _holder Address whose vesting to revoke\n    * @param _vestingId Numeric id of the vesting\n    */\n    function revokeVesting(address _holder, uint256 _vestingId)\n        external\n        authP(REVOKE_VESTINGS_ROLE, arr(_holder))\n        vestingExists(_holder, _vestingId)\n    {\n        TokenVesting storage v = vestings[_holder][_vestingId];\n        require(v.revokable, ERROR_VESTING_NOT_REVOKABLE);\n\n        uint256 nonVested = _calculateNonVestedTokens(\n            v.amount,\n            getTimestamp(),\n            v.start,\n            v.cliff,\n            v.vesting\n        );\n\n        // To make vestingIds immutable over time, we just zero out the revoked vesting\n        // Clearing this out also allows the token transfer back to the Token Manager to succeed\n        delete vestings[_holder][_vestingId];\n\n        // transferFrom always works as controller\n        // onTransfer hook always allows if transfering to token controller\n        require(token.transferFrom(_holder, address(this), nonVested), ERROR_REVOKE_TRANSFER_FROM_REVERTED);\n\n        emit RevokeVesting(_holder, _vestingId, nonVested);\n    }\n\n    // ITokenController fns\n    // `onTransfer()`, `onApprove()`, and `proxyPayment()` are callbacks from the MiniMe token\n    // contract and are only meant to be called through the managed MiniMe token that gets assigned\n    // during initialization.\n\n    /*\n    * @dev Notifies the controller about a token transfer allowing the controller to decide whether\n    *      to allow it or react if desired (only callable from the token).\n    *      Initialization check is implicitly provided by `onlyToken()`.\n    * @param _from The origin of the transfer\n    * @param _to The destination of the transfer\n    * @param _amount The amount of the transfer\n    * @return False if the controller does not authorize the transfer\n    */\n    function onTransfer(address _from, address _to, uint256 _amount) external onlyToken returns (bool) {\n        if (_isBalanceIncreaseAllowed(_to, _amount) && _transferableBalance(_from, getTimestamp()) >= _amount) {\n            return _triggerOnTransferHook(_from, _to, _amount);\n        }\n        return false;\n    }\n\n    /**\n    * @dev Notifies the controller about an approval allowing the controller to react if desired\n    *      Initialization check is implicitly provided by `onlyToken()`.\n    * @return False if the controller does not authorize the approval\n    */\n    function onApprove(address _holder, address _spender, uint _amount) external onlyToken returns (bool) {\n        return _triggerOnApproveHook(_holder, _spender, _amount);\n    }\n\n    /**\n    * @dev Called when ether is sent to the MiniMe Token contract\n    *      Initialization check is implicitly provided by `onlyToken()`.\n    * @return True if the ether is accepted, false for it to throw\n    */\n    function proxyPayment(address) external payable onlyToken returns (bool) {\n        return false;\n    }\n\n    // Forwarding fns\n\n    function isForwarder() external pure returns (bool) {\n        return true;\n    }\n\n    /**\n    * @notice Execute desired action as a token holder\n    * @dev IForwarder interface conformance. Forwards any token holder action.\n    * @param _evmScript Script being executed\n    */\n    function forward(bytes _evmScript) external {\n        require(_canForward(msg.sender), ERROR_CAN_NOT_FORWARD);\n        bytes memory input = new bytes(0); // TODO: Consider input for this\n\n        // Add the managed token to the blacklist to disallow a token holder from executing actions\n        // on the token controller's (this contract) behalf\n        address[] memory blacklist = new address[](1);\n        blacklist[0] = address(token);\n\n        runScript(_evmScript, input, blacklist);\n    }\n\n    function canForward(address _sender, bytes) external view returns (bool) {\n        return _canForward(_sender);\n    }\n\n    // Getter fns\n\n    function getVesting(\n        address _recipient,\n        uint256 _vestingId\n    )\n        public\n        view\n        vestingExists(_recipient, _vestingId)\n        returns (\n            uint256 amount,\n            uint64 start,\n            uint64 cliff,\n            uint64 vesting,\n            bool revokable\n        )\n    {\n        TokenVesting storage tokenVesting = vestings[_recipient][_vestingId];\n        amount = tokenVesting.amount;\n        start = tokenVesting.start;\n        cliff = tokenVesting.cliff;\n        vesting = tokenVesting.vesting;\n        revokable = tokenVesting.revokable;\n    }\n\n    function spendableBalanceOf(address _holder) public view isInitialized returns (uint256) {\n        return _transferableBalance(_holder, getTimestamp());\n    }\n\n    function transferableBalance(address _holder, uint256 _time) public view isInitialized returns (uint256) {\n        return _transferableBalance(_holder, _time);\n    }\n\n    /**\n    * @dev Disable recovery escape hatch for own token,\n    *      as the it has the concept of issuing tokens without assigning them\n    */\n    function allowRecoverability(address _token) public view returns (bool) {\n        return _token != address(token);\n    }\n\n    // Internal fns\n\n    function _assign(address _receiver, uint256 _amount) internal {\n        require(_isBalanceIncreaseAllowed(_receiver, _amount), ERROR_BALANCE_INCREASE_NOT_ALLOWED);\n        // Must use transferFrom() as transfer() does not give the token controller full control\n        require(token.transferFrom(address(this), _receiver, _amount), ERROR_ASSIGN_TRANSFER_FROM_REVERTED);\n    }\n\n    function _mint(address _receiver, uint256 _amount) internal {\n        require(_isBalanceIncreaseAllowed(_receiver, _amount), ERROR_BALANCE_INCREASE_NOT_ALLOWED);\n        _triggerOnTransferHook(0x0, _receiver, _amount);\n        token.generateTokens(_receiver, _amount); // minime.generateTokens() never returns false\n    }\n\n    function _burn(address _holder, uint256 _amount) internal {\n        _triggerOnTransferHook(_holder, 0x0, _amount);\n        // minime.destroyTokens() never returns false, only reverts on failure\n        token.destroyTokens(_holder, _amount);\n    }\n\n    function _isBalanceIncreaseAllowed(address _receiver, uint256 _inc) internal view returns (bool) {\n        // Max balance doesn't apply to the token manager itself\n        if (_receiver == address(this)) {\n            return true;\n        }\n        return token.balanceOf(_receiver).add(_inc) <= maxAccountTokens;\n    }\n\n    /**\n    * @dev Calculate amount of non-vested tokens at a specifc time\n    * @param tokens The total amount of tokens vested\n    * @param time The time at which to check\n    * @param start The date vesting started\n    * @param cliff The cliff period\n    * @param vested The fully vested date\n    * @return The amount of non-vested tokens of a specific grant\n    *  transferableTokens\n    *   |                         _/--------   vestedTokens rect\n    *   |                       _/\n    *   |                     _/\n    *   |                   _/\n    *   |                 _/\n    *   |                /\n    *   |              .|\n    *   |            .  |\n    *   |          .    |\n    *   |        .      |\n    *   |      .        |\n    *   |    .          |\n    *   +===+===========+---------+----------> time\n    *      Start       Cliff    Vested\n    */\n    function _calculateNonVestedTokens(\n        uint256 tokens,\n        uint256 time,\n        uint256 start,\n        uint256 cliff,\n        uint256 vested\n    )\n        private\n        pure\n        returns (uint256)\n    {\n        // Shortcuts for before cliff and after vested cases.\n        if (time >= vested) {\n            return 0;\n        }\n        if (time < cliff) {\n            return tokens;\n        }\n\n        // Interpolate all vested tokens.\n        // As before cliff the shortcut returns 0, we can just calculate a value\n        // in the vesting rect (as shown in above's figure)\n\n        // vestedTokens = tokens * (time - start) / (vested - start)\n        // In assignVesting we enforce start <= cliff <= vested\n        // Here we shortcut time >= vested and time < cliff,\n        // so no division by 0 is possible\n        uint256 vestedTokens = tokens.mul(time.sub(start)) / vested.sub(start);\n\n        // tokens - vestedTokens\n        return tokens.sub(vestedTokens);\n    }\n\n    function _transferableBalance(address _holder, uint256 _time) internal view returns (uint256) {\n        uint256 transferable = token.balanceOf(_holder);\n\n        // This check is not strictly necessary for the current version of this contract, as\n        // Token Managers now cannot assign vestings to themselves.\n        // However, this was a possibility in the past, so in case there were vestings assigned to\n        // themselves, this will still return the correct value (entire balance, as the Token\n        // Manager does not have a spending limit on its own balance).\n        if (_holder != address(this)) {\n            uint256 vestingsCount = vestingsLengths[_holder];\n            for (uint256 i = 0; i < vestingsCount; i++) {\n                TokenVesting storage v = vestings[_holder][i];\n                uint256 nonTransferable = _calculateNonVestedTokens(\n                    v.amount,\n                    _time,\n                    v.start,\n                    v.cliff,\n                    v.vesting\n                );\n                transferable = transferable.sub(nonTransferable);\n            }\n        }\n\n        return transferable;\n    }\n\n    function _triggerOnApproveHook(address _holder, address _spender, uint _amount) internal returns (bool approved) {\n        approved = true;\n        uint256 i = 0;\n        while (approved && i < hooksLength) {\n            if (address(hooks[i]) != 0) {\n                approved = hooks[i].onApprove(_holder, _spender, _amount);\n            }\n            i++;\n        }\n    }\n\n    function _triggerOnTransferHook(address _from, address _to, uint256 _amount) internal returns (bool transferable) {\n        transferable = true;\n        uint256 i = 0;\n        while (transferable && i < hooksLength) {\n            if (address(hooks[i]) != 0) {\n                transferable = hooks[i].onTransfer(_from, _to, _amount);\n            }\n            i++;\n        }\n    }\n\n    function _canForward(address _sender) internal view returns (bool) {\n        return hasInitialized() && token.balanceOf(_sender) > 0;\n    }\n}\n"
    },
    "@aragon/os/contracts/forwarding/IForwarder.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\nimport \"./IAbstractForwarder.sol\";\n\n\n/**\n* @title Forwarder interface\n* @dev This is the basic forwarder interface, that only supports forwarding an EVM script.\n*      It does not support forwarding additional context or receiving ETH; other interfaces are available to support those.\n*/\ncontract IForwarder is IAbstractForwarder {\n    /**\n    * @dev Forward an EVM script\n    */\n    function forward(bytes evmScript) external;\n\n    /**\n    * @dev Tell the forwarder type\n    * @return Always 1 (ForwarderType.NO_CONTEXT)\n    */\n    function forwarderType() external pure returns (ForwarderType) {\n        return ForwarderType.NO_CONTEXT;\n    }\n}\n"
    },
    "@aragon/os/contracts/forwarding/IAbstractForwarder.sol": {
      "content": "/*\n * SPDX-License-Identifier:    MIT\n */\n\npragma solidity ^0.4.24;\n\n\n/**\n* @title Abstract forwarder interface\n* @dev This is the base interface for all forwarders.\n*      Forwarding allows separately installed applications (smart contracts implementing the forwarding interface) to execute multi-step actions via EVM scripts.\n*      You should only support the forwarding interface if your \"action step\" is asynchronous (e.g. requiring a delay period or a voting period).\n*      Note: you should **NOT** directly inherit from this interface; see one of the other, non-abstract interfaces available.\n*/\ncontract IAbstractForwarder {\n    enum ForwarderType {\n        NOT_IMPLEMENTED,\n        NO_CONTEXT,\n        WITH_CONTEXT\n    }\n\n    /**\n    * @dev Tell whether the proposed forwarding path (an EVM script) from the given sender is allowed.\n    *      However, this is not a strict guarantee of safety: the implemented `forward()` method is\n    *      still allowed to revert even if `canForward()` returns true for the same parameters.\n    * @return True if the sender's proposed path is allowed\n    */\n    function canForward(address sender, bytes evmScript) external view returns (bool);\n\n    /**\n    * @dev Tell the forwarder type\n    * @return Forwarder type\n    */\n    function forwarderType() external pure returns (ForwarderType);\n\n    /**\n    * @dev Report whether the implementing app is a forwarder\n    *      Required for backwards compatibility with aragonOS 4\n    * @return Always true\n    */\n    function isForwarder() external pure returns (bool) {\n        return true;\n    }\n}\n"
    },
    "contracts/Erc721Adapter.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"./IConvictionVoting.sol\";\nimport \"./IErc721Adapter.sol\";\nimport \"./ERC721.sol\";\nimport \"@aragon/os/contracts/lib/math/SafeMath.sol\";\n\ncontract Erc721Adapter is IErc721Adapter {\n    using SafeMath for uint256;\n\n    uint256 constant public TOKENS_PER_NFT = 1000e18;\n\n    address public owner;\n    IConvictionVoting public convictionVoting;\n    ERC721 public erc721;\n    string public name;\n    string public symbol;\n    uint256 public totalSupply;\n    mapping(address => uint256) public balances;\n\n    event SetErc721(address _erc721);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"ERR:NOT_OWNER\");\n        _;\n    }\n\n    constructor(address _owner) public {\n        owner = _owner;\n    }\n\n    function setOwner(address _owner) public onlyOwner {\n        owner = _owner;\n    }\n\n    function setErc721(ERC721 _erc721) public onlyOwner {\n        require(erc721 == address(0), \"ERR:ALREADY_SET\");\n\n        erc721 = _erc721;\n        name = _prependG(_erc721.name());\n        symbol = _prependG(_erc721.symbol());\n\n        emit SetErc721(_erc721);\n    }\n\n    function setConvictionVoting(IConvictionVoting _convictionVoting) public onlyOwner {\n        convictionVoting = _convictionVoting;\n\n        if (address(_convictionVoting) != address(0)) {\n            _convictionVoting.onRegisterAsHook(0, address(this));\n        }\n    }\n\n    // Function used by Conviction Voting\n    function totalSupply() view returns (uint256) {\n        return totalSupply;\n    }\n\n    // Function used by Conviction Voting\n    function balanceOf(address _account) view returns (uint256) {\n        return balances[_account];\n    }\n\n    // In the LivingNft this occurs before the transfer has happened and balanceOf is updated\n    // Note this must be called for all mint/burn operations on the NFT as well\n    function onTransfer(address _from, address _to, uint256 _id) public {\n        require(msg.sender == address(erc721), \"ERR:NOT_ERC721\");\n        require(_from != _to, \"ERR:SEND_TO_SELF\");\n\n        if (_from != address(0) // not a mint\n            && erc721.balanceOf(_from) == 1) // Note balanceOf will be 0 after transfer is completed, this prevents an account with multiple NFT's being revoked vote weight until they have 0 NFT's\n        {\n            if (address(convictionVoting) != address(0)) {\n                convictionVoting.onTransfer(_from, _to, TOKENS_PER_NFT);\n            }\n\n            balances[_from] = balances[_from].sub(TOKENS_PER_NFT);\n            totalSupply = totalSupply.sub(TOKENS_PER_NFT);\n        }\n\n        if (_to != address(0) // not a burn\n            && erc721.balanceOf(_to) == 0) // Note balanceOf will be 1 after transfer is completed, this prevents an account with multiple NFT's being granted multiple vote weights\n        {\n            balances[_to] = balances[_to].add(TOKENS_PER_NFT);\n            totalSupply = totalSupply.add(TOKENS_PER_NFT);\n        }\n    }\n\n    function _prependG(string _string) internal returns (string) {\n        return string(abi.encodePacked(\"g\", _string));\n    }\n}\n"
    },
    "contracts/IConvictionVoting.sol": {
      "content": "pragma solidity ^0.4.24;\n\ncontract IConvictionVoting {\n\n    function onTransfer(address _from, address _to, uint256 _amount) external returns (bool);\n\n    function onRegisterAsHook(uint256 _hookId, address _token) external;\n\n}\n"
    },
    "contracts/IErc721Adapter.sol": {
      "content": "pragma solidity ^0.4.24;\n\ncontract IErc721Adapter {\n\n    function onTransfer(address _from, address _to, uint256 _id) public;\n\n}\n"
    },
    "contracts/ERC721.sol": {
      "content": "pragma solidity ^0.4.0;\n\ncontract ERC721 {\n\n    function balanceOf(address _owner) public view returns (uint256);\n\n    function name() public view returns (string);\n\n    function symbol() external view returns (string memory);\n}\n"
    },
    "contracts/Erc721AdapterFactory.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"./Erc721Adapter.sol\";\n\ncontract Erc721AdapterFactory {\n\n    event NewErc721Adapter(Erc721Adapter erc721Adapter);\n\n    function newErc721Adapter(address _owner) public returns (Erc721Adapter) {\n        Erc721Adapter erc721Adapter = new Erc721Adapter(_owner);\n        emit NewErc721Adapter(erc721Adapter);\n        return erc721Adapter;\n    }\n}\n"
    },
    "contracts/test/Imports.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"@aragon/os/contracts/acl/ACL.sol\";\nimport \"@aragon/os/contracts/kernel/Kernel.sol\";\nimport \"@aragon/os/contracts/factory/DAOFactory.sol\";\nimport \"@aragon/os/contracts/factory/EVMScriptRegistryFactory.sol\";\n\nimport \"@1hive/apps-agreement/contracts/test/mocks/AgreementMock.sol\";\nimport \"@1hive/apps-agreement/contracts/test/mocks/disputable/ArbitratorMock.sol\";\nimport \"@1hive/apps-agreement/contracts/test/mocks/disputable/AragonAppFeesCashierMock.sol\";\n\nimport \"@1hive/apps-token-manager/contracts/HookedTokenManager.sol\";\n\nimport \"@1hive/funds-manager/contracts/AragonVaultFundsManager.sol\";\n\ncontract Imports {}\n"
    },
    "@1hive/apps-agreement/contracts/test/mocks/AgreementMock.sol": {
      "content": "pragma solidity 0.4.24;\n\nimport \"../../Agreement.sol\";\nimport \"@aragon/contract-helpers-test/contracts/0.4/aragonOS/SharedTimeHelpersMock.sol\";\n\n\ncontract AgreementMock is Agreement, SharedTimeHelpersMock {}\n"
    },
    "@1hive/funds-manager/contracts/AragonVaultFundsManager.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"./FundsManager.sol\";\nimport \"@aragon/apps-vault/contracts/Vault.sol\";\n\n// This contract must be granted the permission to transfer funds on the Aragon Vault it accepts\ncontract AragonVaultFundsManager is FundsManager {\n\n    Vault public aragonVault;\n\n    constructor(Vault _aragonVault) FundsManager(msg.sender) public {\n        aragonVault = _aragonVault;\n    }\n\n    function fundsOwner() public view returns (address) {\n        return address(aragonVault);\n    }\n\n    function balance(address _token) public view returns (uint256) {\n        return aragonVault.balance(_token);\n    }\n\n    function transfer(address _token, address _beneficiary, uint256 _amount) public onlyFundsUser {\n        aragonVault.transfer(_token, _beneficiary, _amount);\n    }\n}\n"
    },
    "contracts/test/PriceOracleMock.sol": {
      "content": "pragma solidity ^0.4.24;\n\nimport \"../lib/IPriceOracle.sol\";\n\ncontract PriceOracleMock is IPriceOracle {\n\n    uint256 public requestTokenPriceInStableToken;\n\n    constructor(uint256 _requestTokenPriceInStableToken) public {\n        requestTokenPriceInStableToken = _requestTokenPriceInStableToken;\n    }\n\n    function consult(address tokenIn, uint256 amountIn, address tokenOut) external view returns (uint256 amountOut) {\n        return amountIn / requestTokenPriceInStableToken;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}